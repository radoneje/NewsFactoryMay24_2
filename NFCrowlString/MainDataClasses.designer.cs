#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NFCrowlString
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="NewsFactory")]
	public partial class MainDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InserttSTR_playlist(tSTR_playlist instance);
    partial void UpdatetSTR_playlist(tSTR_playlist instance);
    partial void DeletetSTR_playlist(tSTR_playlist instance);
    partial void InserttSTR_item(tSTR_item instance);
    partial void UpdatetSTR_item(tSTR_item instance);
    partial void DeletetSTR_item(tSTR_item instance);
    partial void InserttSTR_timer(tSTR_timer instance);
    partial void UpdatetSTR_timer(tSTR_timer instance);
    partial void DeletetSTR_timer(tSTR_timer instance);
    #endregion
		
		public MainDataClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["NewsFactoryConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MainDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MainDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MainDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MainDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tSTR_playlist> tSTR_playlists
		{
			get
			{
				return this.GetTable<tSTR_playlist>();
			}
		}
		
		public System.Data.Linq.Table<tSTR_item> tSTR_items
		{
			get
			{
				return this.GetTable<tSTR_item>();
			}
		}
		
		public System.Data.Linq.Table<tSTR_timer> tSTR_timers
		{
			get
			{
				return this.GetTable<tSTR_timer>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="NewsFactoryUser.fSTR_getActiveTimers", IsComposable=true)]
		public System.Nullable<bool> fSTR_getActiveTimers([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(90)")] string playListItemId)
		{
			return ((System.Nullable<bool>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), playListItemId).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="NewsFactoryUser.fSTR_getPassiveTimers", IsComposable=true)]
		public System.Nullable<bool> fSTR_getPassiveTimers([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(90)")] string playListItemId)
		{
			return ((System.Nullable<bool>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), playListItemId).ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tSTR_playlist")]
	public partial class tSTR_playlist : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id;
		
		private string _title;
		
		private bool _deleted;
		
		private EntitySet<tSTR_item> _tSTR_items;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(string value);
    partial void OnidChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OndeletedChanging(bool value);
    partial void OndeletedChanged();
    #endregion
		
		public tSTR_playlist()
		{
			this._tSTR_items = new EntitySet<tSTR_item>(new Action<tSTR_item>(this.attach_tSTR_items), new Action<tSTR_item>(this.detach_tSTR_items));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="NVarChar(90) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deleted", DbType="Bit NOT NULL")]
		public bool deleted
		{
			get
			{
				return this._deleted;
			}
			set
			{
				if ((this._deleted != value))
				{
					this.OndeletedChanging(value);
					this.SendPropertyChanging();
					this._deleted = value;
					this.SendPropertyChanged("deleted");
					this.OndeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tSTR_playlist_tSTR_item", Storage="_tSTR_items", ThisKey="id", OtherKey="playlistId")]
		public EntitySet<tSTR_item> tSTR_items
		{
			get
			{
				return this._tSTR_items;
			}
			set
			{
				this._tSTR_items.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tSTR_items(tSTR_item entity)
		{
			this.SendPropertyChanging();
			entity.tSTR_playlist = this;
		}
		
		private void detach_tSTR_items(tSTR_item entity)
		{
			this.SendPropertyChanging();
			entity.tSTR_playlist = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tSTR_items")]
	public partial class tSTR_item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id;
		
		private string _playlistId;
		
		private string _text;
		
		private bool _isActive;
		
		private bool _isAlert;
		
		private System.DateTime _dateAdd;
		
		private System.DateTime _dateModify;
		
		private bool _deleted;
		
		private int _sortOrder;
		
		private EntitySet<tSTR_timer> _tSTR_timers;
		
		private EntityRef<tSTR_playlist> _tSTR_playlist;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(string value);
    partial void OnidChanged();
    partial void OnplaylistIdChanging(string value);
    partial void OnplaylistIdChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    partial void OnisActiveChanging(bool value);
    partial void OnisActiveChanged();
    partial void OnisAlertChanging(bool value);
    partial void OnisAlertChanged();
    partial void OndateAddChanging(System.DateTime value);
    partial void OndateAddChanged();
    partial void OndateModifyChanging(System.DateTime value);
    partial void OndateModifyChanged();
    partial void OndeletedChanging(bool value);
    partial void OndeletedChanged();
    partial void OnsortOrderChanging(int value);
    partial void OnsortOrderChanged();
    #endregion
		
		public tSTR_item()
		{
			this._tSTR_timers = new EntitySet<tSTR_timer>(new Action<tSTR_timer>(this.attach_tSTR_timers), new Action<tSTR_timer>(this.detach_tSTR_timers));
			this._tSTR_playlist = default(EntityRef<tSTR_playlist>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="NVarChar(90) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_playlistId", DbType="NVarChar(90) NOT NULL", CanBeNull=false)]
		public string playlistId
		{
			get
			{
				return this._playlistId;
			}
			set
			{
				if ((this._playlistId != value))
				{
					if (this._tSTR_playlist.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnplaylistIdChanging(value);
					this.SendPropertyChanging();
					this._playlistId = value;
					this.SendPropertyChanged("playlistId");
					this.OnplaylistIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActive", DbType="Bit NOT NULL")]
		public bool isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this.OnisActiveChanging(value);
					this.SendPropertyChanging();
					this._isActive = value;
					this.SendPropertyChanged("isActive");
					this.OnisActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isAlert", DbType="Bit NOT NULL")]
		public bool isAlert
		{
			get
			{
				return this._isAlert;
			}
			set
			{
				if ((this._isAlert != value))
				{
					this.OnisAlertChanging(value);
					this.SendPropertyChanging();
					this._isAlert = value;
					this.SendPropertyChanged("isAlert");
					this.OnisAlertChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateAdd", DbType="DateTime NOT NULL")]
		public System.DateTime dateAdd
		{
			get
			{
				return this._dateAdd;
			}
			set
			{
				if ((this._dateAdd != value))
				{
					this.OndateAddChanging(value);
					this.SendPropertyChanging();
					this._dateAdd = value;
					this.SendPropertyChanged("dateAdd");
					this.OndateAddChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateModify", DbType="DateTime NOT NULL")]
		public System.DateTime dateModify
		{
			get
			{
				return this._dateModify;
			}
			set
			{
				if ((this._dateModify != value))
				{
					this.OndateModifyChanging(value);
					this.SendPropertyChanging();
					this._dateModify = value;
					this.SendPropertyChanged("dateModify");
					this.OndateModifyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deleted", DbType="Bit NOT NULL")]
		public bool deleted
		{
			get
			{
				return this._deleted;
			}
			set
			{
				if ((this._deleted != value))
				{
					this.OndeletedChanging(value);
					this.SendPropertyChanging();
					this._deleted = value;
					this.SendPropertyChanged("deleted");
					this.OndeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sortOrder", DbType="Int NOT NULL")]
		public int sortOrder
		{
			get
			{
				return this._sortOrder;
			}
			set
			{
				if ((this._sortOrder != value))
				{
					this.OnsortOrderChanging(value);
					this.SendPropertyChanging();
					this._sortOrder = value;
					this.SendPropertyChanged("sortOrder");
					this.OnsortOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tSTR_item_tSTR_timer", Storage="_tSTR_timers", ThisKey="id", OtherKey="itemId")]
		public EntitySet<tSTR_timer> tSTR_timers
		{
			get
			{
				return this._tSTR_timers;
			}
			set
			{
				this._tSTR_timers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tSTR_playlist_tSTR_item", Storage="_tSTR_playlist", ThisKey="playlistId", OtherKey="id", IsForeignKey=true)]
		public tSTR_playlist tSTR_playlist
		{
			get
			{
				return this._tSTR_playlist.Entity;
			}
			set
			{
				tSTR_playlist previousValue = this._tSTR_playlist.Entity;
				if (((previousValue != value) 
							|| (this._tSTR_playlist.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tSTR_playlist.Entity = null;
						previousValue.tSTR_items.Remove(this);
					}
					this._tSTR_playlist.Entity = value;
					if ((value != null))
					{
						value.tSTR_items.Add(this);
						this._playlistId = value.id;
					}
					else
					{
						this._playlistId = default(string);
					}
					this.SendPropertyChanged("tSTR_playlist");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tSTR_timers(tSTR_timer entity)
		{
			this.SendPropertyChanging();
			entity.tSTR_item = this;
		}
		
		private void detach_tSTR_timers(tSTR_timer entity)
		{
			this.SendPropertyChanging();
			entity.tSTR_item = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tSTR_timers")]
	public partial class tSTR_timer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id;
		
		private string _itemId;
		
		private System.DateTime _dateStart;
		
		private System.DateTime _deteEnd;
		
		private System.DateTime _dateInsert;
		
		private bool _isEnd;
		
		private bool _isDaily;
		
		private bool _deleted;
		
		private EntityRef<tSTR_item> _tSTR_item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(string value);
    partial void OnidChanged();
    partial void OnitemIdChanging(string value);
    partial void OnitemIdChanged();
    partial void OndateStartChanging(System.DateTime value);
    partial void OndateStartChanged();
    partial void OndeteEndChanging(System.DateTime value);
    partial void OndeteEndChanged();
    partial void OndateInsertChanging(System.DateTime value);
    partial void OndateInsertChanged();
    partial void OnisEndChanging(bool value);
    partial void OnisEndChanged();
    partial void OnisDailyChanging(bool value);
    partial void OnisDailyChanged();
    partial void OndeletedChanging(bool value);
    partial void OndeletedChanged();
    #endregion
		
		public tSTR_timer()
		{
			this._tSTR_item = default(EntityRef<tSTR_item>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="NVarChar(90) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_itemId", DbType="NVarChar(90) NOT NULL", CanBeNull=false)]
		public string itemId
		{
			get
			{
				return this._itemId;
			}
			set
			{
				if ((this._itemId != value))
				{
					if (this._tSTR_item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnitemIdChanging(value);
					this.SendPropertyChanging();
					this._itemId = value;
					this.SendPropertyChanged("itemId");
					this.OnitemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateStart", DbType="DateTime NOT NULL")]
		public System.DateTime dateStart
		{
			get
			{
				return this._dateStart;
			}
			set
			{
				if ((this._dateStart != value))
				{
					this.OndateStartChanging(value);
					this.SendPropertyChanging();
					this._dateStart = value;
					this.SendPropertyChanged("dateStart");
					this.OndateStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deteEnd", DbType="DateTime NOT NULL")]
		public System.DateTime deteEnd
		{
			get
			{
				return this._deteEnd;
			}
			set
			{
				if ((this._deteEnd != value))
				{
					this.OndeteEndChanging(value);
					this.SendPropertyChanging();
					this._deteEnd = value;
					this.SendPropertyChanged("deteEnd");
					this.OndeteEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateInsert", DbType="DateTime NOT NULL")]
		public System.DateTime dateInsert
		{
			get
			{
				return this._dateInsert;
			}
			set
			{
				if ((this._dateInsert != value))
				{
					this.OndateInsertChanging(value);
					this.SendPropertyChanging();
					this._dateInsert = value;
					this.SendPropertyChanged("dateInsert");
					this.OndateInsertChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isEnd", DbType="Bit NOT NULL")]
		public bool isEnd
		{
			get
			{
				return this._isEnd;
			}
			set
			{
				if ((this._isEnd != value))
				{
					this.OnisEndChanging(value);
					this.SendPropertyChanging();
					this._isEnd = value;
					this.SendPropertyChanged("isEnd");
					this.OnisEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isDaily", DbType="Bit NOT NULL")]
		public bool isDaily
		{
			get
			{
				return this._isDaily;
			}
			set
			{
				if ((this._isDaily != value))
				{
					this.OnisDailyChanging(value);
					this.SendPropertyChanging();
					this._isDaily = value;
					this.SendPropertyChanged("isDaily");
					this.OnisDailyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deleted", DbType="Bit NOT NULL")]
		public bool deleted
		{
			get
			{
				return this._deleted;
			}
			set
			{
				if ((this._deleted != value))
				{
					this.OndeletedChanging(value);
					this.SendPropertyChanging();
					this._deleted = value;
					this.SendPropertyChanged("deleted");
					this.OndeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tSTR_item_tSTR_timer", Storage="_tSTR_item", ThisKey="itemId", OtherKey="id", IsForeignKey=true)]
		public tSTR_item tSTR_item
		{
			get
			{
				return this._tSTR_item.Entity;
			}
			set
			{
				tSTR_item previousValue = this._tSTR_item.Entity;
				if (((previousValue != value) 
							|| (this._tSTR_item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tSTR_item.Entity = null;
						previousValue.tSTR_timers.Remove(this);
					}
					this._tSTR_item.Entity = value;
					if ((value != null))
					{
						value.tSTR_timers.Add(this);
						this._itemId = value.id;
					}
					else
					{
						this._itemId = default(string);
					}
					this.SendPropertyChanged("tSTR_item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
