Use NewsFactory
GO

DECLARE @sql VARCHAR(MAX) = ''
        , @crlf VARCHAR(2) = CHAR(13) + CHAR(10) ;

SELECT @sql = @sql + 'DROP VIEW ' + QUOTENAME(SCHEMA_NAME(schema_id)) + '.' + QUOTENAME(v.name) +';' + @crlf
FROM   sys.views v

PRINT @sql;
EXEC(@sql);
GO
Declare @sql NVARCHAR(MAX) = N'';

SELECT @sql = @sql + N' DROP FUNCTION ' 
                   + QUOTENAME(SCHEMA_NAME(schema_id)) 
                   + N'.' + QUOTENAME(name)
FROM sys.objects
WHERE type_desc LIKE '%FUNCTION%';

Exec sp_executesql @sql
GO
GO
DECLARE @sql NVARCHAR(MAX) = N'';

SELECT @sql += 
    N'DROP TRIGGER ' + 
    QUOTENAME(OBJECT_SCHEMA_NAME(t.object_id)) + N'.' + 
    QUOTENAME(t.name) + N'; ' + NCHAR(13)
FROM sys.triggers AS t
WHERE t.is_ms_shipped = 0
  AND t.parent_class_desc = N'OBJECT_OR_COLUMN';

PRINT @sql;


GO

declare @procName varchar(500)
declare cur cursor 

for select [name] from sys.objects where type = 'p'
open cur
fetch next from cur into @procName
while @@fetch_status = 0
begin
    exec('drop procedure [' + @procName + ']')
    fetch next from cur into @procName
end
close cur
deallocate cur
GO


/*=============================================================
SCRIPT HEADER

VERSION:   1.01.0002
DATE:      05-28-2017 18:41:31
SERVER:    DENISSHEVCHB89A\SQLEXPRESS

DATABASE:	NewsFactory
	Fulltext catalogs:
		ArchiveCatalog
	Functions:
		ConvertIntToCharTime, fMedia_FolderCompliteCheck, fWeb_BlockIdGetFromBlockGuid
		fWeb_BlockLookingCheckFromBlockId, fWeb_CheckLooking_FromCookie, fWeb_CheckUserRightForShowMessager
		fWeb_GetLockUserName, fWeb_GetUserIdFromCoockie, fWeb_GetUserName
		fWeb_ListUsersTOBlockEditorsList, fWeb_NewsWithBlocksToXML, fWeb_ProgramIdFromBlockId
		fWebFirstSplitString, fWebGetNewsCalcTime, fWebGetNewsRealTime
		GetTypeName, GetUserRight, pWEB_FIRST_GetUNIXTime
	Procedures:
		AAA_toUpdate, AddToArchNewsFromNF1, AddToNewsFromNF1, AdduserFromNF1
		ImportUser, InsetIntoArchBlocsFromNF2, InsetIntoBlocsFromNF2, pMedia_AddImage
		pMedia_AddLRV, pMedia_ChunkAdd, pMedia_Delete, pMedia_EncoderSetTaskActive
		pMedia_EncoderSetTaskDisActive, pMedia_EncoderSetTaskError, pMedia_FilesAdd
		pMedia_FilesLrvUpdate, pMedia_FilesUpdate, pMedia_FoldersAdd, pMedia_FoldersUpdate
		pMedia_Rename, pMedia_SetEncoderTaskActiveDELETE, pMedia_SetEncoderTaskUnActiveDELETE
		pMedia_SetTaskUploadComplite, pMedia_ThumbnailInsert, pMedia_ThumbnailInsertFromImage
		pMedia_UpdateSort, pMedia_UpdateStatus, pWeb_BlockDescFromExtViewUpdate
		pWeb_BlockDescFromLiteEditorUpdtate, pWeb_CheckUserActive, pWeb_ChekUserCookie
		pWeb_ClearRss, pWeb_CopyBlockGroupsTONewNews, pWeb_CopyBlockTONewNews
		pWeb_CopyBlockTONewNewsWITHnoSORT, pWEB_DeleteTempLink, pWeb_ExtLinkUpdate
		pWeb_ExtListAdd, pWeb_First_UpdateBlockLooking, pWeb_InsertMediaToBlock
		pWeb_InsertRssFeed, pWeb_InsertRssToNews, pWeb_log, pWeb_NewBlock
		pWeb_NewNews, pWeb_ReplyMessage, pWeb_SendMessage, pWeb_StateSave
		pWeb_UnlookBlock, pWeb_UnlookBlockFromUser, pWeb_UpdateLookingFromCookie
		pWeb_UpdateLookingFromUser, pWEB_UpdateUserCoockie, sp_ArchblockToCopybox
		sp_ArchiveToNews, sp_ArchiveToOutbox, sp_BlockDown, sp_BlockFromTemplate
		sp_BlockToCopybox, sp_BlockUp, sp_ChangeBlockPosition, sp_CheckUserTimeout
		sp_Cleardeleted, sp_CopyBlockToOutbox, sp_CopyboxNewsToOutbox
		sp_CopyUserRoles, sp_InputblockToCopybox, sp_NewsBlockToOutbox
		sp_NewsFromCopyboxTemplate, sp_NewsToArchive, sp_NewsToCopybox
		sp_NewsToOutbox, sp_NFWCleanup, sp_OutboxblockToCopybox, sp_SendMessageAllActiveUsers
		sp_SendMessageAllUsers, sp_SetUserActive, sp_SortBlocks, sp_SortChildrenBlocks
		sp_UpdateNewsHrono, spa_SetAsDeleted, spa_UpdateBlockType, spa_UpdateFlag
		spa_UpdateProgram, spa_UpdateRole, spa_UpdateRoleRights, spa_UpdateTag
		spa_UpdateTypeFlags, spa_UpdateUser, spa_UpdateUserRoles, spWeb_UpdateBlockDescFromExtView
	Tables:
		ArcGroups Query, ArchBlocks, ArcNews, BlockEditTemplates, BlockFlag
		Blocks, BlockType, CopyNews, ExcangeBlocks, EXCGroups Query, ExchangeNews
		Flags, FlagsToBlockTypes, Locking, log, MailLog, Messages, News
		NewsGroupsConditions, Outbox, Outbox e-mail, OutboxBlocks, OutboxNews
		PrintTemplates, Programs, tCleanUpTasks, Timeouts, tMedia_Chunks
		tMedia_EncoderTasks, tMedia_Files, tMedia_Folders, tMedia_Thumbnails
		tWeb_ArchiveBlockHistory, tWeb_BlockHistory, tWeb_IncomingRssMessages
		tWeb_MediaTask, tWeb_RssSources, tWeb_SavedStates, tWeb_SessionGuid
		tWeb_Settings, tWeb_TempLink, Update, URights, URightsToRole, URoles
		Users, UUserToProgram
	Triggers:
		cascade_delete_emails, cascade_delete_outboxblocks, del_depend_roles_from_user_program
		delete Blocks, delete Blocks Exchange, delete Blocks on Copy News
		delete locking for inactive users, delete_0_newsID, Messages update
		replaseEmailToAlias, time update, time update Outbox, TRIG_UPDATEUseers
		update date search, update EXCGroups Query, update ocking user name
		update time, update time arch condition, update time blocks, update time copybox
		update time exch, update time locking, update time update, update update
		Update users timeout
	Views:
		tMedia_FilseWithFoldersToList, v_ProgramsToList, va_Blocks, va_dependblocks
		va_flags, va_FlagsToBlockTypes, va_log, va_MailLog, va_News, va_RoleUsers
		va_Timeouts, vA_UserRights, va_UserRoles, va_UsersProgram, vArchBlock_for_list
		vArchNewsBlock, vBlocks, vBlocksPromt, vCopyNewsBlock, vDeletedBlocs
		vExcangeBlock_for_list, vExchangeNewsBlock, vExcNewsBlock, vFlagToBlockType
		vImportUsers, vLite_NewsToList, vLite_ProgramsFromUser, vMedia_EncoderTask
		vMedia_FileWIthFolderToLIst, vMedia_ListForGenerateImages, vMedia_ListForGenerateLRV
		vMedia_ListForGenerateTh, vMedia_MediaToList, vMedia_TaskList
		vMedia_ThumbnailsForList, vMessages-Name, vOutbox_Blocks, vOutboxEmail
		vPrintTemlates, vUsersListAll, vUsersLoginList, vUsersLoginListForArchive
		vUsersLoginListForLenta, vUsersMessagerList, vUsersProgramList
		vUsersRights, vUsersRightsAdminList, vUsertoLists, vWeb_ArchiveFindBlocks
		vWeb_ArchiveMediaForList, vWeb_ArchiveSearch, vWeb_BlockDeleteUser
		vWeb_BlockForPrintTemplate, vWeb_Blocks, vWeb_BlockToExtView, vWeb_CopyNewsForBlocksHead
		vWeb_DeletedBlock, vWEB_ExtLinkToList, vWeb_InMsg, vWeb_ListUserToLoginMessager
		vWeb_MediaForList, vWeb_NewsForBlocksHead, vWeb_ProgramsFromCookie
		vWeb_RssFeed, vWeb_SavedStates, vWeb_Settings, vWeb_Timeouts, vWeb_UserRight
		vWeb_Users, vWeb_UsersLoginList, vWeb_UsertForMessager


=============================================================*/
SET ANSI_WARNINGS ON
SET XACT_ABORT ON
SET ARITHABORT ON
SET NOCOUNT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
GO
-- Create Fulltext Catalog [ArchiveCatalog]
Print 'Create Fulltext Catalog [ArchiveCatalog]'
GO
CREATE FULLTEXT CATALOG [ArchiveCatalog]
	WITH ACCENT_SENSITIVITY = ON
	AUTHORIZATION [dbo]
GO
-- BEGINNING TRANSACTION STRUCTURE
PRINT 'Beginning transaction STRUCTURE'
BEGIN TRANSACTION _STRUCTURE_
GO
-- Create Function [dbo].[pWEB_FIRST_GetUNIXTime]
Print 'Create Function [dbo].[pWEB_FIRST_GetUNIXTime]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
CREATE FUNCTION [dbo].[pWEB_FIRST_GetUNIXTime] (
@ctimestamp datetime
)
RETURNS integer
AS 
BEGIN
  /* Function body */
  declare @return bigint

  SELECT @return = DATEDIFF(second,{d '1970-01-01'}, @ctimestamp)

  return @return
END
GO


GO
-- Create Function [dbo].[ConvertIntToCharTime]
Print 'Create Function [dbo].[ConvertIntToCharTime]'
GO
SET ANSI_NULLS OFF
SET QUOTED_IDENTIFIER OFF
GO


GO

CREATE FUNCTION dbo.ConvertIntToCharTime (@in int)  
RETURNS  nvarchar(9)
BEGIN 
declare @out nvarchar(9)
declare @h int
declare @m int
declare @s int

Set @h=@in/3600

Set @m=@in%3600/60
Set @s=@in%3600%60
if (@h<10)
begin
	Set @out='0' + convert(nvarchar(4), @h)
end
else
begin 
	Set @out=convert(nvarchar(4), @h)
end
Set @out=@out + ':'

if (@m<10)
begin
	Set @out=@out +'0' + convert(nvarchar(2), @m)
end
else
begin 
	Set @out=@out + convert(nvarchar(2), @m)
end
Set @out=@out + ':'
if (@s<10)
begin
	Set @out=@out + '0' + convert(nvarchar(2), @s)
end
else
begin 
	Set @out=@out + convert(nvarchar(2), @s)
end

return @out
END



GO


GO
-- Create Function [dbo].[fMedia_FolderCompliteCheck]
Print 'Create Function [dbo].[fMedia_FolderCompliteCheck]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date, ,>
-- Description:	<Description, ,>
-- =============================================
CREATE FUNCTION dbo.fMedia_FolderCompliteCheck
(
	-- Add the parameters for the function here
	@FolderGuid nvarchar(255)
)
RETURNS bit
AS
BEGIN
			DECLARE @RET bit
			SET @RET=0
			
			DECLARE @FileCount int
			DECLARE @FilesInFolder int
			SELECT @FileCount=COUNT(id) FROM dbo.vMedia_FileWithCoplitedToList WHERE FolderGUID=@FolderGuid AND Complited=1 
			SELECT @FilesInFolder = FilesCount FROM dbo.tMedia_Folder WHERE FolderGUID=@FolderGuid
			IF @FileCount=@FilesInFolder
			BEGIN
				SET @RET=1
			END
RETURN @RET
END
GO


GO
-- Create Function [dbo].[fWebFirstSplitString]
Print 'Create Function [dbo].[fWebFirstSplitString]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
CREATE FUNCTION dbo.fWebFirstSplitString ( @stringToSplit VARCHAR(MAX) )
RETURNS
 @returnList TABLE ([Name] [nvarchar] (500))
AS
BEGIN

 DECLARE @name NVARCHAR(255)
 DECLARE @pos INT

 WHILE CHARINDEX(',', @stringToSplit) > 0
 BEGIN
  SELECT @pos  = CHARINDEX(',', @stringToSplit)  
  SELECT @name = SUBSTRING(@stringToSplit, 1, @pos-1)

  INSERT INTO @returnList 
  SELECT @name

  SELECT @stringToSplit = SUBSTRING(@stringToSplit, @pos+1, LEN(@stringToSplit)-@pos)
 END

 INSERT INTO @returnList
 SELECT @stringToSplit

 RETURN
END
GO


GO
-- Create Table [dbo].[log]
Print 'Create Table [dbo].[log]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[log] (
		[id]               [bigint] IDENTITY(1, 1) NOT NULL,
		[Userid]           [int] NOT NULL,
		[ComputerName]     [nvarchar](255) NOT NULL,
		[ItemID]           [bigint] NOT NULL,
		[Sect]             [bit] NOT NULL,
		[EventDate]        [datetime] NOT NULL,
		[Event]            [smallint] NOT NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[log]
	ADD
	CONSTRAINT [PK_log]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[log]
	ADD
	CONSTRAINT [DF_log_Date]
	DEFAULT (getdate()) FOR [EventDate]
GO


GO
ALTER TABLE [dbo].[log]
	ADD
	CONSTRAINT [DF_log_Event1]
	DEFAULT ((-1)) FOR [Event]
GO


GO
ALTER TABLE [dbo].[log]
	ADD
	CONSTRAINT [DF_log_NewsID]
	DEFAULT ((-1)) FOR [ItemID]
GO


GO
ALTER TABLE [dbo].[log]
	ADD
	CONSTRAINT [DF_log_Section]
	DEFAULT ((0)) FOR [Sect]
GO


GO
ALTER TABLE [dbo].[log] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[MailLog]
Print 'Create Table [dbo].[MailLog]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[MailLog] (
		[id]        [bigint] IDENTITY(1, 1) NOT NULL,
		[Date]      [datetime] NOT NULL,
		[type]      [smallint] NOT NULL,
		[error]     [bit] NOT NULL,
		[msg]       [nvarchar](255) NOT NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[MailLog]
	ADD
	CONSTRAINT [PK_MailLog]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[MailLog]
	ADD
	CONSTRAINT [DF_MailLog_Date]
	DEFAULT (getdate()) FOR [Date]
GO


GO
ALTER TABLE [dbo].[MailLog]
	ADD
	CONSTRAINT [DF_MailLog_error]
	DEFAULT ((0)) FOR [error]
GO


GO
ALTER TABLE [dbo].[MailLog]
	ADD
	CONSTRAINT [DF_MailLog_msg]
	DEFAULT ('') FOR [msg]
GO


GO
ALTER TABLE [dbo].[MailLog]
	ADD
	CONSTRAINT [DF_MailLog_type]
	DEFAULT ((0)) FOR [type]
GO


GO
ALTER TABLE [dbo].[MailLog] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[Messages]
Print 'Create Table [dbo].[Messages]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[Messages] (
		[id]       [bigint] IDENTITY(1, 1) NOT NULL,
		[from]     [int] NULL,
		[to]       [int] NOT NULL,
		[text]     [nvarchar](1025) NOT NULL,
		[data]     [datetime] NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[Messages]
	ADD
	CONSTRAINT [PK_Messages]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[Messages]
	ADD
	CONSTRAINT [DF_Messages_text]
	DEFAULT ('нет текста') FOR [text]
GO


GO
ALTER TABLE [dbo].[Messages] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[OutboxBlocks]
Print 'Create Table [dbo].[OutboxBlocks]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[OutboxBlocks] (
		[Id]              [bigint] NOT NULL,
		[Name]            [nvarchar](256) NULL,
		[NewsId]          [bigint] NULL,
		[ParentId]        [bigint] NULL,
		[BLockType]       [int] NULL,
		[CreatorId]       [int] NULL,
		[OperatorId]      [int] NULL,
		[JockeyId]        [int] NULL,
		[BlockTime]       [int] NULL,
		[TaskTime]        [int] NULL,
		[CalcTime]        [int] NULL,
		[BlockText]       [ntext] NULL,
		[Sort]            [int] NULL,
		[Description]     [nvarchar](255) NULL,
		[Approve]         [bit] NOT NULL,
		[Ready]           [bit] NOT NULL,
		[deleted]         [bit] NOT NULL,
		[TextLang1]       [ntext] NOT NULL,
		[TextLang2]       [ntext] NOT NULL,
		[TextLang3]       [ntext] NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[OutboxBlocks]
	ADD
	CONSTRAINT [PK_OutboxBlocks]
	PRIMARY KEY
	CLUSTERED
	([Id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[OutboxBlocks]
	ADD
	CONSTRAINT [DF__OutboxBlo__TextL__00AA174D]
	DEFAULT ('') FOR [TextLang3]
GO


GO
ALTER TABLE [dbo].[OutboxBlocks]
	ADD
	CONSTRAINT [DF__OutboxBlo__TextL__7EC1CEDB]
	DEFAULT ('') FOR [TextLang1]
GO


GO
ALTER TABLE [dbo].[OutboxBlocks]
	ADD
	CONSTRAINT [DF__OutboxBlo__TextL__7FB5F314]
	DEFAULT ('') FOR [TextLang2]
GO


GO
ALTER TABLE [dbo].[OutboxBlocks]
	ADD
	CONSTRAINT [DF_OutboxBlocks_Approve]
	DEFAULT ((0)) FOR [Approve]
GO


GO
ALTER TABLE [dbo].[OutboxBlocks]
	ADD
	CONSTRAINT [DF_OutboxBlocks_deleted]
	DEFAULT ((0)) FOR [deleted]
GO


GO
ALTER TABLE [dbo].[OutboxBlocks]
	ADD
	CONSTRAINT [DF_OutboxBlocks_Ready]
	DEFAULT ((0)) FOR [Ready]
GO


GO
ALTER TABLE [dbo].[OutboxBlocks] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[Outbox e-mail]
Print 'Create Table [dbo].[Outbox e-mail]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[Outbox e-mail] (
		[id]           [bigint] IDENTITY(1, 1) NOT NULL,
		[OutboxId]     [bigint] NOT NULL,
		[e-mail]       [nvarchar](255) NOT NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[Outbox e-mail]
	ADD
	CONSTRAINT [PK_Outbox e-mail]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[Outbox e-mail] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[Locking]
Print 'Create Table [dbo].[Locking]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[Locking] (
		[id]           [int] IDENTITY(1, 1) NOT NULL,
		[UserId]       [int] NULL,
		[BlockId]      [bigint] NULL,
		[time]         [datetime] NOT NULL,
		[UserName]     [nvarchar](255) NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[Locking]
	ADD
	CONSTRAINT [PK_Locking]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[Locking]
	ADD
	CONSTRAINT [DF_Locking_time]
	DEFAULT (getdate()) FOR [time]
GO


GO
ALTER TABLE [dbo].[Locking] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[OutboxNews]
Print 'Create Table [dbo].[OutboxNews]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[OutboxNews] (
		[id]              [bigint] NOT NULL,
		[Name]            [nvarchar](255) NOT NULL,
		[EditorId]        [int] NOT NULL,
		[NewsDate]        [datetime] NOT NULL,
		[Description]     [nvarchar](255) NOT NULL,
		[NewsTime]        [bigint] NOT NULL,
		[CalcTime]        [bigint] NOT NULL,
		[TaskTime]        [bigint] NOT NULL,
		[Deleted]         [bit] NOT NULL,
		[ProgramId]       [bigint] NOT NULL,
		[GroupId]         [bigint] NULL,
		[send]            [bit] NOT NULL,
		[Cassete]         [nvarchar](255) NOT NULL,
		[Time_Code]       [bigint] NOT NULL,
		[Duration]        [bigint] NOT NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[OutboxNews]
	ADD
	CONSTRAINT [PK_OutboxNews]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[OutboxNews]
	ADD
	CONSTRAINT [DF_OutboxNews_CalcTime]
	DEFAULT ((0)) FOR [CalcTime]
GO


GO
ALTER TABLE [dbo].[OutboxNews]
	ADD
	CONSTRAINT [DF_OutboxNews_Cassete]
	DEFAULT ('') FOR [Cassete]
GO


GO
ALTER TABLE [dbo].[OutboxNews]
	ADD
	CONSTRAINT [DF_OutboxNews_Deleted]
	DEFAULT ((0)) FOR [Deleted]
GO


GO
ALTER TABLE [dbo].[OutboxNews]
	ADD
	CONSTRAINT [DF_OutboxNews_Description]
	DEFAULT ('') FOR [Description]
GO


GO
ALTER TABLE [dbo].[OutboxNews]
	ADD
	CONSTRAINT [DF_OutboxNews_Duraction]
	DEFAULT ((0)) FOR [Duration]
GO


GO
ALTER TABLE [dbo].[OutboxNews]
	ADD
	CONSTRAINT [DF_OutboxNews_EditorId]
	DEFAULT ((0)) FOR [EditorId]
GO


GO
ALTER TABLE [dbo].[OutboxNews]
	ADD
	CONSTRAINT [DF_OutboxNews_Name]
	DEFAULT ('') FOR [Name]
GO


GO
ALTER TABLE [dbo].[OutboxNews]
	ADD
	CONSTRAINT [DF_OutboxNews_NewsDate]
	DEFAULT (getdate()) FOR [NewsDate]
GO


GO
ALTER TABLE [dbo].[OutboxNews]
	ADD
	CONSTRAINT [DF_OutboxNews_NewsTime]
	DEFAULT ((0)) FOR [NewsTime]
GO


GO
ALTER TABLE [dbo].[OutboxNews]
	ADD
	CONSTRAINT [DF_OutboxNews_ProgramId]
	DEFAULT ((0)) FOR [ProgramId]
GO


GO
ALTER TABLE [dbo].[OutboxNews]
	ADD
	CONSTRAINT [DF_OutboxNews_send]
	DEFAULT ((0)) FOR [send]
GO


GO
ALTER TABLE [dbo].[OutboxNews]
	ADD
	CONSTRAINT [DF_OutboxNews_TaskTime]
	DEFAULT ((0)) FOR [TaskTime]
GO


GO
ALTER TABLE [dbo].[OutboxNews]
	ADD
	CONSTRAINT [DF_OutboxNews_Time_Code]
	DEFAULT ((0)) FOR [Time_Code]
GO


GO
ALTER TABLE [dbo].[OutboxNews] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[PrintTemplates]
Print 'Create Table [dbo].[PrintTemplates]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[PrintTemplates] (
		[id]                 [int] IDENTITY(1, 1) NOT NULL,
		[name]               [nvarchar](255) NOT NULL,
		[news]               [ntext] NOT NULL,
		[block]              [ntext] NOT NULL,
		[block_flag]         [ntext] NOT NULL,
		[depended_block]     [ntext] NOT NULL,
		[description]        [nvarchar](255) NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[PrintTemplates]
	ADD
	CONSTRAINT [PK_PrintTemplates]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[PrintTemplates] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[Programs]
Print 'Create Table [dbo].[Programs]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[Programs] (
		[id]           [int] IDENTITY(1, 1) NOT NULL,
		[Name]         [nvarchar](255) NULL,
		[Director]     [bigint] NOT NULL,
		[Rustv]        [bit] NOT NULL,
		[Deleted]      [bit] NOT NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[Programs]
	ADD
	CONSTRAINT [PK_Programs]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[Programs]
	ADD
	CONSTRAINT [DF_Programs_deleted]
	DEFAULT ((0)) FOR [Deleted]
GO


GO
ALTER TABLE [dbo].[Programs]
	ADD
	CONSTRAINT [DF_Programs_Director]
	DEFAULT ((0)) FOR [Director]
GO


GO
ALTER TABLE [dbo].[Programs]
	ADD
	CONSTRAINT [DF_Programs_Rustv]
	DEFAULT ((1)) FOR [Rustv]
GO


GO
ALTER TABLE [dbo].[Programs] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[NewsGroupsConditions]
Print 'Create Table [dbo].[NewsGroupsConditions]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[NewsGroupsConditions] (
		[id]                 [bigint] NOT NULL,
		[NewsGroupId]        [bigint] NULL,
		[FieldName]          [nvarchar](256) NULL,
		[FieldCondition]     [nvarchar](256) NULL,
		[UserId]             [int] NULL,
		[LinkNext]           [bit] NULL,
		[DateValue]          [datetime] NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[NewsGroupsConditions]
	ADD
	CONSTRAINT [PK_NewsGroupsConditions]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[NewsGroupsConditions] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[Outbox]
Print 'Create Table [dbo].[Outbox]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[Outbox] (
		[id]       [bigint] NOT NULL,
		[name]     [nvarchar](255) NOT NULL,
		[to]       [nvarchar](255) NULL,
		[nitf]     [bit] NOT NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[Outbox]
	ADD
	CONSTRAINT [PK_Outbox]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[Outbox]
	ADD
	CONSTRAINT [DF_Outbox_nitf]
	DEFAULT ((0)) FOR [nitf]
GO


GO
ALTER TABLE [dbo].[Outbox] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[ExchangeNews]
Print 'Create Table [dbo].[ExchangeNews]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[ExchangeNews] (
		[id]              [int] NOT NULL,
		[Name]            [nvarchar](255) NOT NULL,
		[EditorId]        [decimal](18, 0) NOT NULL,
		[NewsDate]        [smalldatetime] NOT NULL,
		[Description]     [nvarchar](255) NOT NULL,
		[NewsTime]        [int] NOT NULL,
		[CalcTime]        [int] NOT NULL,
		[TaskTime]        [int] NOT NULL,
		[Deleted]         [bit] NOT NULL,
		[ProgramId]       [int] NOT NULL,
		[Cassete]         [nvarchar](255) NOT NULL,
		[Time_Code]       [bigint] NOT NULL,
		[Duration]        [bigint] NOT NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[ExchangeNews]
	ADD
	CONSTRAINT [PK_ExchangeNews]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[ExchangeNews]
	ADD
	CONSTRAINT [DF_ExchangeNews_CalcTime]
	DEFAULT ((0)) FOR [CalcTime]
GO


GO
ALTER TABLE [dbo].[ExchangeNews]
	ADD
	CONSTRAINT [DF_ExchangeNews_Cassete]
	DEFAULT ('') FOR [Cassete]
GO


GO
ALTER TABLE [dbo].[ExchangeNews]
	ADD
	CONSTRAINT [DF_ExchangeNews_Deleted]
	DEFAULT ((0)) FOR [Deleted]
GO


GO
ALTER TABLE [dbo].[ExchangeNews]
	ADD
	CONSTRAINT [DF_ExchangeNews_Description]
	DEFAULT ('') FOR [Description]
GO


GO
ALTER TABLE [dbo].[ExchangeNews]
	ADD
	CONSTRAINT [DF_ExchangeNews_Duraction]
	DEFAULT ((0)) FOR [Duration]
GO


GO
ALTER TABLE [dbo].[ExchangeNews]
	ADD
	CONSTRAINT [DF_ExchangeNews_EditorId]
	DEFAULT ((0)) FOR [EditorId]
GO


GO
ALTER TABLE [dbo].[ExchangeNews]
	ADD
	CONSTRAINT [DF_ExchangeNews_id]
	DEFAULT ((0)) FOR [id]
GO


GO
ALTER TABLE [dbo].[ExchangeNews]
	ADD
	CONSTRAINT [DF_ExchangeNews_Name]
	DEFAULT ('') FOR [Name]
GO


GO
ALTER TABLE [dbo].[ExchangeNews]
	ADD
	CONSTRAINT [DF_ExchangeNews_NewsDate]
	DEFAULT (getdate()) FOR [NewsDate]
GO


GO
ALTER TABLE [dbo].[ExchangeNews]
	ADD
	CONSTRAINT [DF_ExchangeNews_NewsTime]
	DEFAULT ((0)) FOR [NewsTime]
GO


GO
ALTER TABLE [dbo].[ExchangeNews]
	ADD
	CONSTRAINT [DF_ExchangeNews_ProgramId]
	DEFAULT ((0)) FOR [ProgramId]
GO


GO
ALTER TABLE [dbo].[ExchangeNews]
	ADD
	CONSTRAINT [DF_ExchangeNews_TaskTime]
	DEFAULT ((0)) FOR [TaskTime]
GO


GO
ALTER TABLE [dbo].[ExchangeNews]
	ADD
	CONSTRAINT [DF_ExchangeNews_Time_Code]
	DEFAULT ((0)) FOR [Time_Code]
GO


GO
ALTER TABLE [dbo].[ExchangeNews] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[EXCGroups Query]
Print 'Create Table [dbo].[EXCGroups Query]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[EXCGroups Query] (
		[id]             [bigint] NOT NULL,
		[name]           [nvarchar](255) NULL,
		[text]           [nvarchar](255) NULL,
		[autor]          [int] NULL,
		[camerman]       [int] NULL,
		[data_start]     [datetime] NOT NULL,
		[data_end]       [datetime] NOT NULL,
		[user id]        [int] NULL,
		[data_query]     [datetime] NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[EXCGroups Query]
	ADD
	CONSTRAINT [PK_EXCGroups Query]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[EXCGroups Query]
	ADD
	CONSTRAINT [DF_EXCGroups Query_dada_end]
	DEFAULT (CONVERT([datetime],CONVERT([int],getdate(),0),0)) FOR [data_end]
GO


GO
ALTER TABLE [dbo].[EXCGroups Query]
	ADD
	CONSTRAINT [DF_EXCGroups Query_data_start]
	DEFAULT (CONVERT([datetime],CONVERT([int],getdate()-(1),0),0)) FOR [data_start]
GO


GO
ALTER TABLE [dbo].[EXCGroups Query] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[ExcangeBlocks]
Print 'Create Table [dbo].[ExcangeBlocks]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[ExcangeBlocks] (
		[Id]              [bigint] IDENTITY(1, 1) NOT NULL,
		[Name]            [nvarchar](256) NOT NULL,
		[NewsId]          [bigint] NOT NULL,
		[ParentId]        [bigint] NOT NULL,
		[BLockType]       [int] NOT NULL,
		[CreatorId]       [int] NOT NULL,
		[OperatorId]      [int] NOT NULL,
		[JockeyId]        [int] NOT NULL,
		[BlockTime]       [int] NOT NULL,
		[TaskTime]        [int] NOT NULL,
		[CalcTime]        [int] NOT NULL,
		[BlockText]       [ntext] NOT NULL,
		[Sort]            [int] NOT NULL,
		[Description]     [nvarchar](255) NOT NULL,
		[Approve]         [bit] NOT NULL,
		[Ready]           [bit] NOT NULL,
		[Deleted]         [bit] NOT NULL,
		[TextLang1]       [ntext] NOT NULL,
		[TextLang2]       [ntext] NOT NULL,
		[TextLang3]       [ntext] NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[ExcangeBlocks]
	ADD
	CONSTRAINT [PK_ExcangeBlocks]
	PRIMARY KEY
	CLUSTERED
	([Id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[ExcangeBlocks]
	ADD
	CONSTRAINT [DF__ExcangeBl__TextL__7BE56230]
	DEFAULT ('') FOR [TextLang1]
GO


GO
ALTER TABLE [dbo].[ExcangeBlocks]
	ADD
	CONSTRAINT [DF__ExcangeBl__TextL__7CD98669]
	DEFAULT ('') FOR [TextLang2]
GO


GO
ALTER TABLE [dbo].[ExcangeBlocks]
	ADD
	CONSTRAINT [DF__ExcangeBl__TextL__7DCDAAA2]
	DEFAULT ('') FOR [TextLang3]
GO


GO
ALTER TABLE [dbo].[ExcangeBlocks]
	ADD
	CONSTRAINT [DF_ExcangeBlocks_Approve]
	DEFAULT ((0)) FOR [Approve]
GO


GO
ALTER TABLE [dbo].[ExcangeBlocks]
	ADD
	CONSTRAINT [DF_ExcangeBlocks_BlockText]
	DEFAULT ('') FOR [BlockText]
GO


GO
ALTER TABLE [dbo].[ExcangeBlocks]
	ADD
	CONSTRAINT [DF_ExcangeBlocks_BlockTime]
	DEFAULT ((0)) FOR [BlockTime]
GO


GO
ALTER TABLE [dbo].[ExcangeBlocks]
	ADD
	CONSTRAINT [DF_ExcangeBlocks_BLockType]
	DEFAULT ((4)) FOR [BLockType]
GO


GO
ALTER TABLE [dbo].[ExcangeBlocks]
	ADD
	CONSTRAINT [DF_ExcangeBlocks_CalcTime]
	DEFAULT ((0)) FOR [CalcTime]
GO


GO
ALTER TABLE [dbo].[ExcangeBlocks]
	ADD
	CONSTRAINT [DF_ExcangeBlocks_CreatorId]
	DEFAULT ((0)) FOR [CreatorId]
GO


GO
ALTER TABLE [dbo].[ExcangeBlocks]
	ADD
	CONSTRAINT [DF_ExcangeBlocks_Deleted]
	DEFAULT ((0)) FOR [Deleted]
GO


GO
ALTER TABLE [dbo].[ExcangeBlocks]
	ADD
	CONSTRAINT [DF_ExcangeBlocks_Description]
	DEFAULT ('') FOR [Description]
GO


GO
ALTER TABLE [dbo].[ExcangeBlocks]
	ADD
	CONSTRAINT [DF_ExcangeBlocks_JockeyId]
	DEFAULT ((0)) FOR [JockeyId]
GO


GO
ALTER TABLE [dbo].[ExcangeBlocks]
	ADD
	CONSTRAINT [DF_ExcangeBlocks_Name]
	DEFAULT ('') FOR [Name]
GO


GO
ALTER TABLE [dbo].[ExcangeBlocks]
	ADD
	CONSTRAINT [DF_ExcangeBlocks_NewsId]
	DEFAULT ((0)) FOR [NewsId]
GO


GO
ALTER TABLE [dbo].[ExcangeBlocks]
	ADD
	CONSTRAINT [DF_ExcangeBlocks_OperatorId]
	DEFAULT ((0)) FOR [OperatorId]
GO


GO
ALTER TABLE [dbo].[ExcangeBlocks]
	ADD
	CONSTRAINT [DF_ExcangeBlocks_ParentId]
	DEFAULT ((0)) FOR [ParentId]
GO


GO
ALTER TABLE [dbo].[ExcangeBlocks]
	ADD
	CONSTRAINT [DF_ExcangeBlocks_Ready]
	DEFAULT ((0)) FOR [Ready]
GO


GO
ALTER TABLE [dbo].[ExcangeBlocks]
	ADD
	CONSTRAINT [DF_ExcangeBlocks_Sort]
	DEFAULT (CONVERT([int], -(((((datepart(year,getdate())-(2000))*(535680)+datepart(month,getdate())*(44640))+datepart(day,getdate())*(1440))+datepart(hour,getdate())*(60))+datepart(minute,getdate())),0)) FOR [Sort]
GO


GO
ALTER TABLE [dbo].[ExcangeBlocks]
	ADD
	CONSTRAINT [DF_ExcangeBlocks_TaskTime]
	DEFAULT ((0)) FOR [TaskTime]
GO


GO
ALTER TABLE [dbo].[ExcangeBlocks] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[CopyNews]
Print 'Create Table [dbo].[CopyNews]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[CopyNews] (
		[id]              [bigint] NOT NULL,
		[Name]            [nvarchar](255) NOT NULL,
		[EditorId]        [int] NOT NULL,
		[NewsDate]        [datetime] NOT NULL,
		[Description]     [nvarchar](255) NOT NULL,
		[NewsTime]        [bigint] NOT NULL,
		[CalcTime]        [bigint] NOT NULL,
		[TaskTime]        [bigint] NOT NULL,
		[Deleted]         [bit] NOT NULL,
		[ProgramId]       [bigint] NOT NULL,
		[GroupID]         [bigint] NOT NULL,
		[Cassete]         [nvarchar](255) NOT NULL,
		[Time_Code]       [bigint] NOT NULL,
		[Duration]        [bigint] NOT NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[CopyNews]
	ADD
	CONSTRAINT [PK_CopyNews]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[CopyNews]
	ADD
	CONSTRAINT [DF_CopyNews_CalcTime]
	DEFAULT ((0)) FOR [CalcTime]
GO


GO
ALTER TABLE [dbo].[CopyNews]
	ADD
	CONSTRAINT [DF_CopyNews_Cassete]
	DEFAULT ('кассета №') FOR [Cassete]
GO


GO
ALTER TABLE [dbo].[CopyNews]
	ADD
	CONSTRAINT [DF_CopyNews_Deleted]
	DEFAULT ((0)) FOR [Deleted]
GO


GO
ALTER TABLE [dbo].[CopyNews]
	ADD
	CONSTRAINT [DF_CopyNews_Description]
	DEFAULT ('') FOR [Description]
GO


GO
ALTER TABLE [dbo].[CopyNews]
	ADD
	CONSTRAINT [DF_CopyNews_Duraction]
	DEFAULT ((0)) FOR [Duration]
GO


GO
ALTER TABLE [dbo].[CopyNews]
	ADD
	CONSTRAINT [DF_CopyNews_EditorId]
	DEFAULT ((0)) FOR [EditorId]
GO


GO
ALTER TABLE [dbo].[CopyNews]
	ADD
	CONSTRAINT [DF_CopyNews_GroupID]
	DEFAULT ((102)) FOR [GroupID]
GO


GO
ALTER TABLE [dbo].[CopyNews]
	ADD
	CONSTRAINT [DF_CopyNews_Name]
	DEFAULT ('') FOR [Name]
GO


GO
ALTER TABLE [dbo].[CopyNews]
	ADD
	CONSTRAINT [DF_CopyNews_NewsDate]
	DEFAULT (getdate()) FOR [NewsDate]
GO


GO
ALTER TABLE [dbo].[CopyNews]
	ADD
	CONSTRAINT [DF_CopyNews_NewsTime]
	DEFAULT ((0)) FOR [NewsTime]
GO


GO
ALTER TABLE [dbo].[CopyNews]
	ADD
	CONSTRAINT [DF_CopyNews_ProgramId]
	DEFAULT ((0)) FOR [ProgramId]
GO


GO
ALTER TABLE [dbo].[CopyNews]
	ADD
	CONSTRAINT [DF_CopyNews_TaskTime]
	DEFAULT ((0)) FOR [TaskTime]
GO


GO
ALTER TABLE [dbo].[CopyNews]
	ADD
	CONSTRAINT [DF_CopyNews_Time_Code]
	DEFAULT ((0)) FOR [Time_Code]
GO


GO
ALTER TABLE [dbo].[CopyNews] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[BlockType]
Print 'Create Table [dbo].[BlockType]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[BlockType] (
		[id]              [int] IDENTITY(1, 1) NOT NULL,
		[TypeName]        [nvarchar](255) NOT NULL,
		[Description]     [nvarchar](255) NOT NULL,
		[Autor]           [bit] NOT NULL,
		[Operator]        [bit] NOT NULL,
		[Jockey]          [bit] NOT NULL,
		[Extern]          [bit] NOT NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[BlockType]
	ADD
	CONSTRAINT [PK_BlockType]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[BlockType]
	ADD
	CONSTRAINT [DF_BlockType_Autor]
	DEFAULT ((1)) FOR [Autor]
GO


GO
ALTER TABLE [dbo].[BlockType]
	ADD
	CONSTRAINT [DF_BlockType_BlockName]
	DEFAULT ('Неизвестный') FOR [TypeName]
GO


GO
ALTER TABLE [dbo].[BlockType]
	ADD
	CONSTRAINT [DF_BlockType_Description]
	DEFAULT ('') FOR [Description]
GO


GO
ALTER TABLE [dbo].[BlockType]
	ADD
	CONSTRAINT [DF_BlockType_Extern]
	DEFAULT ((0)) FOR [Extern]
GO


GO
ALTER TABLE [dbo].[BlockType]
	ADD
	CONSTRAINT [DF_BlockType_Jockey]
	DEFAULT ((1)) FOR [Jockey]
GO


GO
ALTER TABLE [dbo].[BlockType]
	ADD
	CONSTRAINT [DF_BlockType_Operator]
	DEFAULT ((1)) FOR [Operator]
GO


GO
ALTER TABLE [dbo].[BlockType] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[BlockFlag]
Print 'Create Table [dbo].[BlockFlag]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING OFF
GO


GO
CREATE TABLE [dbo].[BlockFlag] (
		[id]          [int] IDENTITY(1, 1) NOT NULL,
		[BlockId]     [bigint] NULL,
		[FlagId]      [int] NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[BlockFlag]
	ADD
	CONSTRAINT [PK_BlockFlag]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[BlockFlag] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[BlockEditTemplates]
Print 'Create Table [dbo].[BlockEditTemplates]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[BlockEditTemplates] (
		[id]              [int] IDENTITY(1, 1) NOT NULL,
		[name]            [nvarchar](255) NOT NULL,
		[description]     [nvarchar](255) NOT NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[BlockEditTemplates]
	ADD
	CONSTRAINT [PK_BlockEditTemplates]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[BlockEditTemplates]
	ADD
	CONSTRAINT [DF_BlockEditTemplates_description]
	DEFAULT (' ') FOR [description]
GO


GO
ALTER TABLE [dbo].[BlockEditTemplates]
	ADD
	CONSTRAINT [DF_BlockEditTemplates_name]
	DEFAULT (' ') FOR [name]
GO


GO
ALTER TABLE [dbo].[BlockEditTemplates] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[ArcNews]
Print 'Create Table [dbo].[ArcNews]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[ArcNews] (
		[id]              [bigint] NOT NULL,
		[Name]            [nvarchar](255) NOT NULL,
		[EditorId]        [int] NOT NULL,
		[NewsDate]        [datetime] NOT NULL,
		[Description]     [nvarchar](255) NOT NULL,
		[NewsTime]        [bigint] NOT NULL,
		[CalcTime]        [bigint] NOT NULL,
		[TaskTime]        [bigint] NOT NULL,
		[Deleted]         [bit] NOT NULL,
		[ProgramId]       [bigint] NOT NULL,
		[Cassete]         [nvarchar](255) NOT NULL,
		[Time_Code]       [bigint] NOT NULL,
		[Duration]        [bigint] NOT NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[ArcNews]
	ADD
	CONSTRAINT [PK_ArcNews]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[ArcNews]
	ADD
	CONSTRAINT [DF_ArcNews_CalcTime]
	DEFAULT ((0)) FOR [CalcTime]
GO


GO
ALTER TABLE [dbo].[ArcNews]
	ADD
	CONSTRAINT [DF_ArcNews_Cassete]
	DEFAULT ('кассета №') FOR [Cassete]
GO


GO
ALTER TABLE [dbo].[ArcNews]
	ADD
	CONSTRAINT [DF_ArcNews_Deleted]
	DEFAULT ((0)) FOR [Deleted]
GO


GO
ALTER TABLE [dbo].[ArcNews]
	ADD
	CONSTRAINT [DF_ArcNews_Description]
	DEFAULT ('') FOR [Description]
GO


GO
ALTER TABLE [dbo].[ArcNews]
	ADD
	CONSTRAINT [DF_ArcNews_Duraction]
	DEFAULT ((0)) FOR [Duration]
GO


GO
ALTER TABLE [dbo].[ArcNews]
	ADD
	CONSTRAINT [DF_ArcNews_EditorId]
	DEFAULT ((0)) FOR [EditorId]
GO


GO
ALTER TABLE [dbo].[ArcNews]
	ADD
	CONSTRAINT [DF_ArcNews_Name]
	DEFAULT ('') FOR [Name]
GO


GO
ALTER TABLE [dbo].[ArcNews]
	ADD
	CONSTRAINT [DF_ArcNews_NewsDate]
	DEFAULT (getdate()) FOR [NewsDate]
GO


GO
ALTER TABLE [dbo].[ArcNews]
	ADD
	CONSTRAINT [DF_ArcNews_NewsTime]
	DEFAULT ((0)) FOR [NewsTime]
GO


GO
ALTER TABLE [dbo].[ArcNews]
	ADD
	CONSTRAINT [DF_ArcNews_ProgramId]
	DEFAULT ((0)) FOR [ProgramId]
GO


GO
ALTER TABLE [dbo].[ArcNews]
	ADD
	CONSTRAINT [DF_ArcNews_TaskTime]
	DEFAULT ((0)) FOR [TaskTime]
GO


GO
ALTER TABLE [dbo].[ArcNews]
	ADD
	CONSTRAINT [DF_ArcNews_Time_Code]
	DEFAULT ((0)) FOR [Time_Code]
GO


GO
ALTER TABLE [dbo].[ArcNews] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[Flags]
Print 'Create Table [dbo].[Flags]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[Flags] (
		[id]              [int] IDENTITY(1, 1) NOT NULL,
		[name]            [nvarchar](255) NULL,
		[done]            [bit] NOT NULL,
		[description]     [nvarchar](255) NOT NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[Flags]
	ADD
	CONSTRAINT [PK_flags]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[Flags]
	ADD
	CONSTRAINT [DF_Flags_description]
	DEFAULT ('-') FOR [description]
GO


GO
ALTER TABLE [dbo].[Flags]
	ADD
	CONSTRAINT [DF_Flags_done]
	DEFAULT ((0)) FOR [done]
GO


GO
ALTER TABLE [dbo].[Flags] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[tMedia_Chunks]
Print 'Create Table [dbo].[tMedia_Chunks]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[tMedia_Chunks] (
		[id]             [bigint] IDENTITY(1, 1) NOT NULL,
		[BytesStart]     [bigint] NOT NULL,
		[BytesEnd]       [bigint] NOT NULL,
		[BytesWrite]     [bigint] NOT NULL,
		[FileGuid]       [nvarchar](255) NOT NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tMedia_Chunks]
	ADD
	CONSTRAINT [PK_tMedia_Chunks]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tMedia_Chunks]
	ADD
	CONSTRAINT [DF_tMedia_Chunks_BytesEnd]
	DEFAULT ((0)) FOR [BytesEnd]
GO


GO
ALTER TABLE [dbo].[tMedia_Chunks]
	ADD
	CONSTRAINT [DF_tMedia_Chunks_BytesStart]
	DEFAULT ((0)) FOR [BytesStart]
GO


GO
ALTER TABLE [dbo].[tMedia_Chunks]
	ADD
	CONSTRAINT [DF_tMedia_Chunks_BytesWrite]
	DEFAULT ((0)) FOR [BytesWrite]
GO


GO
ALTER TABLE [dbo].[tMedia_Chunks] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[Users]
Print 'Create Table [dbo].[Users]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[Users] (
		[UserID]                [int] IDENTITY(1, 1) NOT NULL,
		[UserName]              [nvarchar](255) NOT NULL,
		[pass]                  [nvarchar](255) NOT NULL,
		[Active]                [bit] NOT NULL,
		[Last_time]             [datetime] NOT NULL,
		[ReadRate]              [int] NOT NULL,
		[deleted]               [bit] NOT NULL,
		[PrintTemplateId]       [int] NOT NULL,
		[BlockTypeId]           [int] NOT NULL,
		[AbrigeBlockTypeId]     [int] NOT NULL,
		[OnlyMy]                [bit] NOT NULL,
		[Enter]                 [bit] NOT NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[Users]
	ADD
	CONSTRAINT [PK_Users]
	PRIMARY KEY
	CLUSTERED
	([UserID])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[Users]
	ADD
	CONSTRAINT [DF_Users_AbrigeBlockTypeId]
	DEFAULT ((-1)) FOR [AbrigeBlockTypeId]
GO


GO
ALTER TABLE [dbo].[Users]
	ADD
	CONSTRAINT [DF_Users_Active]
	DEFAULT ((0)) FOR [Active]
GO


GO
ALTER TABLE [dbo].[Users]
	ADD
	CONSTRAINT [DF_Users_BlockTypeId]
	DEFAULT ((0)) FOR [BlockTypeId]
GO


GO
ALTER TABLE [dbo].[Users]
	ADD
	CONSTRAINT [DF_Users_Enter]
	DEFAULT ((0)) FOR [Enter]
GO


GO
ALTER TABLE [dbo].[Users]
	ADD
	CONSTRAINT [DF_Users_name]
	DEFAULT ('новый пользователь') FOR [UserName]
GO


GO
ALTER TABLE [dbo].[Users]
	ADD
	CONSTRAINT [DF_Users_OnlyMy]
	DEFAULT ((0)) FOR [OnlyMy]
GO


GO
ALTER TABLE [dbo].[Users]
	ADD
	CONSTRAINT [DF_Users_pass]
	DEFAULT (' ') FOR [pass]
GO


GO
ALTER TABLE [dbo].[Users]
	ADD
	CONSTRAINT [DF_Users_PrintTemplateId]
	DEFAULT ((1)) FOR [PrintTemplateId]
GO


GO
ALTER TABLE [dbo].[Users]
	ADD
	CONSTRAINT [DF_Users_ReadRate]
	DEFAULT ((17)) FOR [ReadRate]
GO


GO
ALTER TABLE [dbo].[Users]
	ADD
	CONSTRAINT [DF_Users_Undelete]
	DEFAULT ((0)) FOR [deleted]
GO


GO
ALTER TABLE [dbo].[Users]
	ADD
	CONSTRAINT [Users_Last_time]
	DEFAULT (getdate()) FOR [Last_time]
GO


GO
ALTER TABLE [dbo].[Users] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[URoles]
Print 'Create Table [dbo].[URoles]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[URoles] (
		[URoleID]              [int] IDENTITY(1, 1) NOT NULL,
		[URoleName]            [nvarchar](255) NOT NULL,
		[URoleDescription]     [nvarchar](255) NULL,
		[URoleProgDepend]      [bit] NOT NULL,
		[URoleUndelete]        [bit] NOT NULL,
		[URoleGroup]           [smallint] NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[URoles]
	ADD
	CONSTRAINT [PK_UserGroups]
	PRIMARY KEY
	CLUSTERED
	([URoleID])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[URoles]
	ADD
	CONSTRAINT [DF_URoles_URoleGroup]
	DEFAULT ((1)) FOR [URoleGroup]
GO


GO
ALTER TABLE [dbo].[URoles]
	ADD
	CONSTRAINT [DF_URoles_URoleProgDepend]
	DEFAULT ((1)) FOR [URoleProgDepend]
GO


GO
ALTER TABLE [dbo].[URoles]
	ADD
	CONSTRAINT [DF_URoles_URoleUndelete]
	DEFAULT ((0)) FOR [URoleUndelete]
GO


GO
ALTER TABLE [dbo].[URoles]
	ADD
	CONSTRAINT [DF_UserGroups_GroupName]
	DEFAULT ('новая группа') FOR [URoleName]
GO


GO
ALTER TABLE [dbo].[URoles] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[URights]
Print 'Create Table [dbo].[URights]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[URights] (
		[URightID]              [int] NOT NULL,
		[URightName]            [nvarchar](255) NOT NULL,
		[URightGroupName]       [nvarchar](50) NOT NULL,
		[URightProgDepend]      [bit] NOT NULL,
		[URightGroup]           [int] NULL,
		[URightDescription]     [nvarchar](255) NULL,
		[URightCh]              [bit] NOT NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[URights]
	ADD
	CONSTRAINT [PK_Rules]
	PRIMARY KEY
	CLUSTERED
	([URightID])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[URights]
	ADD
	CONSTRAINT [DF_Rules_RuleName]
	DEFAULT ('новое правило') FOR [URightName]
GO


GO
ALTER TABLE [dbo].[URights]
	ADD
	CONSTRAINT [DF_URights_URightCh]
	DEFAULT ((0)) FOR [URightCh]
GO


GO
ALTER TABLE [dbo].[URights]
	ADD
	CONSTRAINT [DF_URights_URightgroup]
	DEFAULT ((1)) FOR [URightGroupName]
GO


GO
ALTER TABLE [dbo].[URights]
	ADD
	CONSTRAINT [DF_URights_URightProgDepend]
	DEFAULT ((0)) FOR [URightProgDepend]
GO


GO
ALTER TABLE [dbo].[URights] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[Update]
Print 'Create Table [dbo].[Update]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[Update] (
		[id]              [int] NOT NULL,
		[Time]            [datetime] NULL,
		[Description]     [nvarchar](255) NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[Update]
	ADD
	CONSTRAINT [PK_Update]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[Update] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[tWeb_TempLink]
Print 'Create Table [dbo].[tWeb_TempLink]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[tWeb_TempLink] (
		[id]                 [int] IDENTITY(1, 1) NOT NULL,
		[BlockId]            [bigint] NOT NULL,
		[UserId]             [int] NOT NULL,
		[GrantDate]          [datetime] NOT NULL,
		[IsExpirience]       [bit] NOT NULL,
		[ExpirienceDate]     [date] NOT NULL,
		[Deleted]            [bit] NOT NULL,
		[URL]                [nvarchar](20) NOT NULL,
		[IsCommentable]      [bit] NOT NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tWeb_TempLink]
	ADD
	CONSTRAINT [PK_tWeb_TempLink]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tWeb_TempLink]
	ADD
	CONSTRAINT [DF__tWeb_Temp__IsCom__33F4B129]
	DEFAULT ((0)) FOR [IsCommentable]
GO


GO
ALTER TABLE [dbo].[tWeb_TempLink]
	ADD
	CONSTRAINT [DF_Table_1_GarntDate]
	DEFAULT (getdate()) FOR [GrantDate]
GO


GO
ALTER TABLE [dbo].[tWeb_TempLink]
	ADD
	CONSTRAINT [DF_tWeb_TempLink_Deleted]
	DEFAULT ((0)) FOR [Deleted]
GO


GO
ALTER TABLE [dbo].[tWeb_TempLink]
	ADD
	CONSTRAINT [DF_tWeb_TempLink_ExpirienceDate]
	DEFAULT (getdate()) FOR [ExpirienceDate]
GO


GO
ALTER TABLE [dbo].[tWeb_TempLink]
	ADD
	CONSTRAINT [DF_tWeb_TempLink_IsExpirience]
	DEFAULT ((1)) FOR [IsExpirience]
GO


GO
ALTER TABLE [dbo].[tWeb_TempLink]
	ADD
	CONSTRAINT [DF_tWeb_TempLink_URL]
	DEFAULT ('') FOR [URL]
GO


GO
ALTER TABLE [dbo].[tWeb_TempLink] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[tWeb_Settings]
Print 'Create Table [dbo].[tWeb_Settings]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[tWeb_Settings] (
		[id]              [int] IDENTITY(1, 1) NOT NULL,
		[Key]             [nvarchar](254) NOT NULL,
		[value]           [nvarchar](254) NOT NULL,
		[Description]     [nvarchar](254) NOT NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tWeb_Settings]
	ADD
	CONSTRAINT [PK_tWeb_Settings]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tWeb_Settings]
	ADD
	CONSTRAINT [DF_tWeb_Settings_Description]
	DEFAULT ('') FOR [Description]
GO


GO
ALTER TABLE [dbo].[tWeb_Settings] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[tWeb_SessionGuid]
Print 'Create Table [dbo].[tWeb_SessionGuid]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING OFF
GO


GO
CREATE TABLE [dbo].[tWeb_SessionGuid] (
		[id]           [bigint] IDENTITY(1, 1) NOT NULL,
		[UserId]       [int] NOT NULL,
		[Cookie]       [int] NOT NULL,
		[LastTime]     [datetime] NOT NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tWeb_SessionGuid]
	ADD
	CONSTRAINT [PK_tWeb_SessionGuid]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tWeb_SessionGuid]
	ADD
	CONSTRAINT [DF_tWeb_SessionGuid_LastTime]
	DEFAULT (getdate()) FOR [LastTime]
GO


GO
ALTER TABLE [dbo].[tWeb_SessionGuid] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[tWeb_SavedStates]
Print 'Create Table [dbo].[tWeb_SavedStates]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[tWeb_SavedStates] (
		[id]              [int] IDENTITY(1, 1) NOT NULL,
		[Data]            [image] NULL,
		[Descriotion]     [nvarchar](255) NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tWeb_SavedStates]
	ADD
	CONSTRAINT [PK_tWeb_SavedStates]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tWeb_SavedStates] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[tWeb_RssSources]
Print 'Create Table [dbo].[tWeb_RssSources]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[tWeb_RssSources] (
		[id]              [int] IDENTITY(1, 1) NOT NULL,
		[Name]            [nvarchar](255) NOT NULL,
		[URL]             [nvarchar](255) NULL,
		[Active]          [bit] NOT NULL,
		[LastGetTime]     [datetime] NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tWeb_RssSources]
	ADD
	CONSTRAINT [PK_tWeb_RssSources]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tWeb_RssSources]
	ADD
	CONSTRAINT [DF_tWeb_RssSources_Active]
	DEFAULT ((1)) FOR [Active]
GO


GO
ALTER TABLE [dbo].[tWeb_RssSources]
	ADD
	CONSTRAINT [DF_tWeb_RssSources_Name]
	DEFAULT ('') FOR [Name]
GO


GO
ALTER TABLE [dbo].[tWeb_RssSources] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[tCleanUpTasks]
Print 'Create Table [dbo].[tCleanUpTasks]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[tCleanUpTasks] (
		[id]                [int] IDENTITY(1, 1) NOT NULL,
		[Name]              [nvarchar](255) NOT NULL,
		[Command]           [varchar](8000) NOT NULL,
		[LastDateRun]       [datetime] NOT NULL,
		[LasrRunStatus]     [int] NOT NULL,
		[Active]            [int] NOT NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tCleanUpTasks]
	ADD
	CONSTRAINT [PK_tCleanUpTasks]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tCleanUpTasks]
	ADD
	CONSTRAINT [DF_tCleanUpTasks_Active]
	DEFAULT ((1)) FOR [Active]
GO


GO
ALTER TABLE [dbo].[tCleanUpTasks]
	ADD
	CONSTRAINT [DF_tCleanUpTasks_Command]
	DEFAULT ('') FOR [Command]
GO


GO
ALTER TABLE [dbo].[tCleanUpTasks]
	ADD
	CONSTRAINT [DF_tCleanUpTasks_LasrRunStatus]
	DEFAULT ((0)) FOR [LasrRunStatus]
GO


GO
ALTER TABLE [dbo].[tCleanUpTasks]
	ADD
	CONSTRAINT [DF_tCleanUpTasks_LastDateRun]
	DEFAULT (CONVERT([datetime],(0),0)) FOR [LastDateRun]
GO


GO
ALTER TABLE [dbo].[tCleanUpTasks]
	ADD
	CONSTRAINT [DF_tCleanUpTasks_Name]
	DEFAULT ('') FOR [Name]
GO


GO
ALTER TABLE [dbo].[tCleanUpTasks] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[tWeb_MediaTask]
Print 'Create Table [dbo].[tWeb_MediaTask]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[tWeb_MediaTask] (
		[id]                  [int] IDENTITY(1, 1) NOT NULL,
		[MediaId]             [bigint] NOT NULL,
		[DateAdd]             [datetime] NULL,
		[DateAddComplite]     [datetime] NULL,
		[LRVStatus]           [int] NOT NULL,
		[LRVCount]            [int] NOT NULL,
		[LRVMessage]          [nvarchar](255) NOT NULL,
		[LRVLastDate]         [datetime] NOT NULL,
		[PICStatus]           [int] NOT NULL,
		[PICCount]            [int] NOT NULL,
		[PICMessage]          [nvarchar](255) NOT NULL,
		[PICLastDate]         [datetime] NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tWeb_MediaTask]
	ADD
	CONSTRAINT [DF_tWeb_MediaTask_DateAdd]
	DEFAULT (getdate()) FOR [DateAdd]
GO


GO
ALTER TABLE [dbo].[tWeb_MediaTask]
	ADD
	CONSTRAINT [DF_tWeb_MediaTask_LRVCount]
	DEFAULT ((0)) FOR [LRVCount]
GO


GO
ALTER TABLE [dbo].[tWeb_MediaTask]
	ADD
	CONSTRAINT [DF_tWeb_MediaTask_LRVLastDate]
	DEFAULT (getdate()) FOR [LRVLastDate]
GO


GO
ALTER TABLE [dbo].[tWeb_MediaTask]
	ADD
	CONSTRAINT [DF_tWeb_MediaTask_LRVMessage]
	DEFAULT ('') FOR [LRVMessage]
GO


GO
ALTER TABLE [dbo].[tWeb_MediaTask]
	ADD
	CONSTRAINT [DF_tWeb_MediaTask_LRVSatus]
	DEFAULT ((0)) FOR [LRVStatus]
GO


GO
ALTER TABLE [dbo].[tWeb_MediaTask]
	ADD
	CONSTRAINT [DF_tWeb_MediaTask_PICCount]
	DEFAULT ((0)) FOR [PICCount]
GO


GO
ALTER TABLE [dbo].[tWeb_MediaTask]
	ADD
	CONSTRAINT [DF_tWeb_MediaTask_PICLastDate]
	DEFAULT (getdate()) FOR [PICLastDate]
GO


GO
ALTER TABLE [dbo].[tWeb_MediaTask]
	ADD
	CONSTRAINT [DF_tWeb_MediaTask_PICMessage]
	DEFAULT ('') FOR [PICMessage]
GO


GO
ALTER TABLE [dbo].[tWeb_MediaTask]
	ADD
	CONSTRAINT [DF_tWeb_MediaTask_PICStatus]
	DEFAULT ((0)) FOR [PICStatus]
GO


GO
ALTER TABLE [dbo].[tWeb_MediaTask] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[tWeb_BlockHistory]
Print 'Create Table [dbo].[tWeb_BlockHistory]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[tWeb_BlockHistory] (
		[id]               [nvarchar](90) NOT NULL,
		[date]             [datetime] NOT NULL,
		[userId]           [int] NOT NULL,
		[blockZipText]     [image] NOT NULL,
		[blockId]          [bigint] NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tWeb_BlockHistory]
	ADD
	CONSTRAINT [PK_tWeb_BlockHistory]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tWeb_BlockHistory] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[tWeb_ArchiveBlockHistory]
Print 'Create Table [dbo].[tWeb_ArchiveBlockHistory]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[tWeb_ArchiveBlockHistory] (
		[id]               [nvarchar](90) NOT NULL,
		[date]             [datetime] NOT NULL,
		[userId]           [int] NOT NULL,
		[blockZipText]     [image] NOT NULL,
		[blockId]          [bigint] NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tWeb_ArchiveBlockHistory]
	ADD
	CONSTRAINT [PK_tWeb_ArchiveBlockHistory]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tWeb_ArchiveBlockHistory] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[tMedia_Thumbnails]
Print 'Create Table [dbo].[tMedia_Thumbnails]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[tMedia_Thumbnails] (
		[id]           [int] IDENTITY(1, 1) NOT NULL,
		[DateAdd]      [datetime] NOT NULL,
		[Number]       [int] NOT NULL,
		[image]        [image] NOT NULL,
		[FileGuid]     [nvarchar](255) NOT NULL,
		[size640]      [image] NULL,
		[size32]       [image] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tMedia_Thumbnails]
	ADD
	CONSTRAINT [PK_tMedia_Thumbnails]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tMedia_Thumbnails]
	ADD
	CONSTRAINT [DF_tMedia_Thumbnails_DateAdd]
	DEFAULT (getdate()) FOR [DateAdd]
GO


GO
ALTER TABLE [dbo].[tMedia_Thumbnails]
	ADD
	CONSTRAINT [DF_tMedia_Thumbnails_Timecode]
	DEFAULT ((0)) FOR [Number]
GO


GO
ALTER TABLE [dbo].[tMedia_Thumbnails] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[tMedia_Folders]
Print 'Create Table [dbo].[tMedia_Folders]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[tMedia_Folders] (
		[id]              [bigint] IDENTITY(1, 1) NOT NULL,
		[sFolderName]     [nvarchar](255) NOT NULL,
		[FolderGuid]      [nvarchar](255) NOT NULL,
		[Ready]           [bit] NOT NULL,
		[sPath]           [nvarchar](255) NOT NULL,
		[iFilesCount]     [int] NOT NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tMedia_Folders]
	ADD
	CONSTRAINT [PK_tMedia_Folders]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tMedia_Folders]
	ADD
	CONSTRAINT [DF_tMedia_Folders_bReady]
	DEFAULT ((0)) FOR [Ready]
GO


GO
ALTER TABLE [dbo].[tMedia_Folders]
	ADD
	CONSTRAINT [DF_tMedia_Folders_iFilesCount]
	DEFAULT ((0)) FOR [iFilesCount]
GO


GO
ALTER TABLE [dbo].[tMedia_Folders]
	ADD
	CONSTRAINT [DF_tMedia_Folders_sFolderName]
	DEFAULT ('') FOR [sFolderName]
GO


GO
ALTER TABLE [dbo].[tMedia_Folders]
	ADD
	CONSTRAINT [DF_tMedia_Folders_sPath]
	DEFAULT ('') FOR [sPath]
GO


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_tMedia_Folders]
	ON [dbo].[tMedia_Folders] ([FolderGuid])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tMedia_Folders] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[tMedia_Files]
Print 'Create Table [dbo].[tMedia_Files]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[tMedia_Files] (
		[id]                    [bigint] IDENTITY(1, 1) NOT NULL,
		[FileGuid]              [nvarchar](255) NULL,
		[FolderGuid]            [nvarchar](255) NOT NULL,
		[FileName]              [nvarchar](255) NULL,
		[Ready]                 [bit] NULL,
		[NumberInFolder]        [int] NULL,
		[Size]                  [bigint] NULL,
		[BytesWrite]            [bigint] NOT NULL,
		[sSourceIp]             [nvarchar](255) NULL,
		[StartDate]             [datetime] NULL,
		[EndDate]               [datetime] NULL,
		[BlockType]             [int] NULL,
		[LRVFileName]           [nvarchar](255) NULL,
		[LRVPath]               [nvarchar](255) NULL,
		[LRVReady]              [bit] NOT NULL,
		[LRVDateLastUpdate]     [datetime] NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tMedia_Files]
	ADD
	CONSTRAINT [PK_tMedia_Files]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tMedia_Files]
	ADD
	CONSTRAINT [DF_tMedia_Files_BytesWrite]
	DEFAULT ((0)) FOR [BytesWrite]
GO


GO
ALTER TABLE [dbo].[tMedia_Files]
	ADD
	CONSTRAINT [DF_tMedia_Files_LRVReady]
	DEFAULT ((0)) FOR [LRVReady]
GO


GO
ALTER TABLE [dbo].[tMedia_Files]
	ADD
	CONSTRAINT [DF_tMedia_Files_Ready]
	DEFAULT ((0)) FOR [Ready]
GO


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_tMedia_Files]
	ON [dbo].[tMedia_Files] ([FileGuid])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tMedia_Files] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[tMedia_EncoderTasks]
Print 'Create Table [dbo].[tMedia_EncoderTasks]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[tMedia_EncoderTasks] (
		[id]                [bigint] IDENTITY(1, 1) NOT NULL,
		[FileGuid]          [nvarchar](255) NOT NULL,
		[EncoderGuid]       [nvarchar](255) NULL,
		[DateAdd]           [datetime] NOT NULL,
		[DateLastStart]     [datetime] NULL,
		[DateLastEnd]       [datetime] NULL,
		[IsActive]          [bit] NOT NULL,
		[ErrorCount]        [int] NOT NULL,
		[IsComplite]        [bit] NOT NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tMedia_EncoderTasks]
	ADD
	CONSTRAINT [PK_tMedia_EncoderTasks]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tMedia_EncoderTasks]
	ADD
	CONSTRAINT [DF_tMedia_EncoderTasks_DateAdd]
	DEFAULT (getdate()) FOR [DateAdd]
GO


GO
ALTER TABLE [dbo].[tMedia_EncoderTasks]
	ADD
	CONSTRAINT [DF_tMedia_EncoderTasks_ErrorCount]
	DEFAULT ((0)) FOR [ErrorCount]
GO


GO
ALTER TABLE [dbo].[tMedia_EncoderTasks]
	ADD
	CONSTRAINT [DF_tMedia_EncoderTasks_IsActive]
	DEFAULT ((0)) FOR [IsActive]
GO


GO
ALTER TABLE [dbo].[tMedia_EncoderTasks]
	ADD
	CONSTRAINT [DF_tMedia_EncoderTasks_IsComplite]
	DEFAULT ((0)) FOR [IsComplite]
GO


GO
ALTER TABLE [dbo].[tMedia_EncoderTasks] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[ArcGroups Query]
Print 'Create Table [dbo].[ArcGroups Query]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[ArcGroups Query] (
		[id]             [bigint] NOT NULL,
		[Name]           [nvarchar](255) NULL,
		[text]           [nvarchar](255) NULL,
		[autor]          [int] NOT NULL,
		[camerman]       [int] NOT NULL,
		[data_start]     [datetime] NULL,
		[data_end]       [datetime] NULL,
		[user id]        [int] NOT NULL,
		[data_query]     [datetime] NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[ArcGroups Query]
	ADD
	CONSTRAINT [PK_ArcGroups Query]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[ArcGroups Query]
	ADD
	CONSTRAINT [DF_ArcGroups Query_autor]
	DEFAULT ((0)) FOR [autor]
GO


GO
ALTER TABLE [dbo].[ArcGroups Query]
	ADD
	CONSTRAINT [DF_ArcGroups Query_camerman]
	DEFAULT ((0)) FOR [camerman]
GO


GO
ALTER TABLE [dbo].[ArcGroups Query]
	ADD
	CONSTRAINT [DF_ArcGroups Query_data_end]
	DEFAULT ((0)) FOR [data_end]
GO


GO
ALTER TABLE [dbo].[ArcGroups Query]
	ADD
	CONSTRAINT [DF_ArcGroups Query_data_start]
	DEFAULT ((0)) FOR [data_start]
GO


GO
ALTER TABLE [dbo].[ArcGroups Query] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[Timeouts]
Print 'Create Table [dbo].[Timeouts]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[Timeouts] (
		[id]              [int] NOT NULL,
		[val]             [int] NOT NULL,
		[name]            [nvarchar](255) NOT NULL,
		[description]     [nvarchar](255) NULL,
		[timepart]        [nvarchar](2) NOT NULL,
		[Min1]            [int] NULL,
		[Max1]            [int] NULL,
		[Val1]            [int] NULL,
		[operation]       [nvarchar](255) NULL,
		[RunString]       [varchar](255) NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[Timeouts]
	ADD
	CONSTRAINT [PK_Timeouts_]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[Timeouts] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Procedure [dbo].[AAA_toUpdate]
Print 'Create Procedure [dbo].[AAA_toUpdate]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[AAA_toUpdate]
	
AS
BEGIN
-- dbo.pWeb_log
--dbo.ArchBlocks
-- dbo.Blocks

--fWeb_ListUsersTOBlockEditorsList
--dbo.sp_ArchiveToNews
-- dbo.sp_BlockFromTemplate 
-- dbo.sp_BlockToCopybox
--dbo.vWeb_BlockForPrintTemplate
-- INSERT INTO dbo.TemplateVariables(id, Name, Description,Depend, Type ) VALUES(381,'$BlockCutter', 'монтажер блока',2,0 )

-- dbo.sp_NewsToArchive
--dbo.sp_NewsToCopybox
--dbo.pWeb_CopyBlockTONewNews
--dbo.pWeb_CopyBlockTONewNewsWITHnoSORT

/*
USE [NewsFactory]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[AAA_toUpdate] 
	-- Add the parameters for the stored procedure here
	@userId int,
	@sect int, -- 0 - News 2 - Archive
	@itemId bigint,
	@event int --- 3 del news 4 del block
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	INSERT INTO log( Userid, ComputerName , ItemID, Sect, EventDate, Event)
	values(@userId, 'NF WEB', @itemId, @sect, GETDATE(),@event)
END

GO


ALTER TABLE [dbo].[ArchBlocks]
ADD  [CutterId] int NOT NULL DEFAULT 0
GO

ALTER TABLE [dbo].[Blocks]
ADD  [CutterId] int NOT NULL DEFAULT 0
GO

USE [NewsFactory]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
ALTER FUNCTION [dbo].[fWeb_ListUsersTOBlockEditorsList] 
(	
	-- Add the parameters for the function here
	@BlockId bigint
)
RETURNS TABLE 
AS
RETURN 
(
	Select ProgramID, RightID, UserID, UserName, UserRate From vWeb_UserRight WHERE (RightID IN (32,33,34,57))AND ProgramID=dbo.fWeb_ProgramIdFromBlockId(@BlockId)
)
GO
USE [NewsFactory]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

----------------------------------------------
----------------------------------------------
ALTER PROCEDURE [dbo].[sp_ArchiveToNews] 
@id  Bigint

AS

-- ???????? ?????? ?? ?????? ? ?????????? ???????? ??????? ??? ????? ? ????????
-- ???? - id ???????
-- ????? - 0- ??, 1- ??????

-- Archive_to_news

DECLARE @Error_Num int
DECLARE @Error_Count int

Declare @News_id bigint
Declare @New_News_id bigint
Declare @Block_id bigint
Declare @New_Block_id bigint
Declare @Subblock_id bigint
Declare @New_Subblock_id bigint

IF (SELECT count([id]) FROM ArcNews WHERE [id] = @id) < 1 RETURN 1
SET @News_id  = @id

BEGIN TRANSACTION ArchiveToNews

SET @Error_Num=2627
SET @Error_Count=0
WHILE (@Error_Num=2627) and (@Error_Count <10) 
BEGIN
	SET @New_News_id = (convert(bigint,rand()*1000000000000000))
	SET @Error_Count=@Error_Count+1
	INSERT INTO News ([id], [Name], EditorId, NewsDate, [Description], NewsTime, 
				CalcTime, TaskTime, ProgramId, Deleted, Cassete, Time_Code, Duration)
	SELECT @New_News_id, [Name], EditorId, NewsDate, [Description], NewsTime, CalcTime, 
		TaskTime, ProgramId, Deleted, Cassete, Time_Code, Duration
	FROM ArcNews WHERE [id]=@News_id
             SET @Error_Num=@@ERROR
END
IF  @Error_Num <> 0 
BEGIN
	ROLLBACK TRANSACTION ArchiveToNews
	RETURN 1
END

DECLARE st cursor FOR SELECT [id] FROM ArchBlocks where newsid = @News_id  AND ParentId=0
OPEN st
FETCH NEXT FROM st INTO @Block_id
WHILE @@fetch_status=0
BEGIN
	SET @Error_Num=2627
	SET @Error_Count=0
	WHILE (@Error_Num=2627) AND (@Error_Count <10) 
		BEGIN
			SET @Error_Count=@Error_Count+1
			SET @New_Block_id=(convert(bigint,rand()*1000000000000000))
			INSERT INTO Blocks ([Id], [Name], NewsId, ParentId, BLockType, CreatorId, 
						OperatorId, JockeyId,CutterId, BlockTime, TaskTime, CalcTime, 
						BlockText, Sort, [Description], Ready, Approve,TextLang1,TextLang2,TextLang3 )
			SELECT @New_Block_id, [Name], @New_News_id, ParentId, BLockType, CreatorId, 
				OperatorId, JockeyId, CutterId, BlockTime, TaskTime, CalcTime, BlockText, Sort, 
				[Description], Ready, Approve, TextLang1,TextLang2,TextLang3
			FROM  ArchBlocks where id=@Block_id
		        SET @Error_Num=@@ERROR
		END
		IF  @Error_Num <> 0 
		BEGIN
			CLOSE st
			DEALLOCATE st			
			ROLLBACK TRANSACTION ArchiveToNews
			RETURN 1
		END

	IF(SELECT count([id]) FROM ArchBlocks WHERE ParentId=@Block_id) > 0
	BEGIN
		DECLARE st1 cursor FOR SELECT [id] FROM ArchBlocks WHERE  ParentId=@Block_id
		OPEN st1
		FETCH NEXT FROM st1 INTO @Subblock_id
		WHILE @@fetch_status=0
    		BEGIN
			SET @Error_Num=2627
			SET @Error_Count=0
			WHILE (@Error_Num=2627) AND (@Error_Count <10) 
				BEGIN
					SET @Error_Count=@Error_Count+1
					SET @New_Subblock_id= (convert(bigint,rand()*1000000000000000))
					INSERT INTO Blocks ([Id], [Name], ParentId, NewsId, BLockType, CreatorId, 
								OperatorId, JockeyId, BlockTime, TaskTime, CalcTime, 
								BlockText, Sort, [Description], Ready, Approve)
					SELECT @New_Subblock_id, [Name], @New_Block_id, @New_News_id, BLockType, 
						CreatorId, OperatorId, JockeyId, BlockTime, TaskTime, CalcTime, 
						BlockText, Sort, [Description], Ready, Approve
                       			FROM  ArchBlocks WHERE [id]=@Subblock_id
		             		SET @Error_Num=@@ERROR
				END
			IF  @Error_Num <> 0 
				BEGIN
					CLOSE st
					DEALLOCATE st
					CLOSE st1
					DEALLOCATE st1		
					ROLLBACK TRANSACTION ArchiveToNews
					RETURN 1
				END
			FETCH NEXT FROM st1 INTO @Subblock_id
		END
		CLOSE st1
		DEALLOCATE st1
	END
	FETCH NEXT FROM st INTO @Block_id
END
CLOSE st
DEALLOCATE st
COMMIT TRANSACTION ArchiveToNews
RETURN 0


GO


USE [NewsFactory]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



----------------------------------------------
ALTER PROCEDURE [dbo].[sp_BlockFromTemplate]
@BlockId bigint,
@NewsId bigint,
@AfterBlockId bigint
AS

-- BlockFromTemplate

DECLARE @New_Block_id bigint
DECLARE @Error_Num int
DECLARE @Error_Count int

IF ((SELECT CopyNews.GroupID FROM Blocks INNER JOIN CopyNews ON Blocks.NewsId = CopyNews.[id] WHERE Blocks.[Id] = @BlockId)>=100)
BEGIN
	SET @Error_Num=2627
	SET @Error_Count=0
	WHILE (@Error_Num=2627) AND (@Error_Count <10) 
	BEGIN
		SET @Error_Count=@Error_Count+1
		SET @New_Block_id=(convert(bigint,rand()*1000000000000000))
		INSERT INTO Blocks ([Id], [Name], NewsId, ParentId, BLockType, CreatorId, 
				OperatorId, JockeyId,CutterId, BlockTime, TaskTime, CalcTime, BlockText, 
				Sort, [Description], Ready, Approve, deleted, TextLang1,TextLang2,TextLang3)
		SELECT @New_Block_id, [Name], @NewsId, ParentId, BLockType, CreatorId, OperatorId, 
			JockeyId,CutterId, BlockTime, TaskTime, CalcTime, BlockText, Sort, [Description], 
			Ready, Approve, deleted, TextLang1,TextLang2,TextLang3 
		FROM blocks WHERE [id]=@BlockId
		SET @Error_Num=@@ERROR
	END
	IF  @Error_Num <> 0 RETURN 1
END
ELSE
BEGIN
	UPDATE Blocks SET NewsId =@NewsId WHERE [id]=@BlockId
	SET @Error_Num=@@ERROR
	IF  @Error_Num <> 0 RETURN 1
END
	UPDATE Blocks SET Sort=(SELECT     Sort+5 FROM    Blocks WHERE [Id]=@AfterBlockId ) WHERE  [id]=@New_Block_id
RETURN 0


GO

USE [NewsFactory]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

----------------------------------------------
----------------------------------------------
ALTER PROCEDURE [dbo].[sp_BlockToCopybox]
@in  Bigint,
@TemplateId  Bigint,
@NewId Bigint
AS

-- ???????? ???? ? ?????????? ?? ??????? ? ?????????? ? ???????
-- ???? @in - id ??????????? ?????, @TemplateId - id ??????? ? ??????? ???? ??????????, @NewId - ????? id ?????
-- ???? 0- ??, 1 - ??????

-- BlocksCopyToTemplate

DECLARE @in_Id Bigint
DECLARE @New_subblock_id bigint
DECLARE @Subblock_id bigint

DECLARE @Error_Num int
DECLARE @Error_Count int

SET @in_Id = @in

BEGIN TRANSACTION BlockToCopybox

INSERT INTO Blocks  ([Id], NewsId, Blocktext, parentid, [Name], BLockType, CreatorId, OperatorId, JockeyId,CutterId,
			[Description], BlockTime, TaskTime, CalcTime, Sort , TextLang1,TextLang2,TextLang3 )
SELECT @NewId, @TemplateId, Blocktext, 0, [Name], BLockType, CreatorId, OperatorId, JockeyId,CutterId,[Description], 
	BlockTime, TaskTime, CalcTime,0, TextLang1,TextLang2,TextLang3  
FROM Blocks WHERE [id]=@in_Id
SET @Error_Num=@@ERROR
IF  @Error_Num <> 0 
BEGIN
	ROLLBACK TRANSACTION BlockToCopybox
	RETURN 1
END

IF(SELECT count([id]) FROM Blocks WHERE ParentId=@in_Id) > 0
BEGIN
	DECLARE st1 cursor FOR SELECT [id] FROM Blocks WHERE ParentId=@in_Id
	OPEN st1
	FETCH NEXT FROM st1 INTO @Subblock_id
	WHILE @@fetch_status=0
	BEGIN
		SET @Error_Num=2627
		SET @Error_Count=0
		WHILE (@Error_Num=2627) AND (@Error_Count <10) 
		BEGIN
			SET @Error_Count=@Error_Count+1
			SET @New_subblock_id= convert(bigint,rand()*1000000000000000) 
			INSERT INTO Blocks ([Id], [Name], NewsId, ParentId, BLockType, CreatorId, OperatorId, 
						JockeyId, BlockTime, TaskTime, CalcTime, BlockText, Sort, [Description], 
						Ready, Approve)
			SELECT @New_subblock_id, [Name], @TemplateId, @NewId, BLockType, CreatorId, OperatorId, 
				JockeyId, BlockTime, TaskTime, CalcTime, BlockText, Sort, [Description], Ready, Approve
			FROM  Blocks WHERE [id]=@Subblock_id
			SET @Error_Num=@@ERROR
		END
		IF  @Error_Num <> 0 
		BEGIN
			CLOSE st1
			DEALLOCATE st1		
			ROLLBACK TRANSACTION BlockToCopybox
			RETURN 1
		END
		FETCH NEXT FROM st1 INTO @Subblock_id
	END
	CLOSE st1
	DEALLOCATE st1
END
COMMIT TRANSACTION BlockToCopybox
RETURN 0

GO

USE [NewsFactory]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

ALTER VIEW [dbo].[vWeb_BlockForPrintTemplate]
AS
SELECT     dbo.Blocks.Id, dbo.Blocks.Name, dbo.Blocks.NewsId, dbo.Blocks.ParentId, dbo.Blocks.CreatorId, dbo.Blocks.OperatorId, dbo.Blocks.JockeyId, dbo.Blocks.BlockTime, dbo.Blocks.TaskTime, 
                      dbo.Blocks.CalcTime, dbo.Blocks.BlockText, dbo.Blocks.Sort, dbo.Blocks.Description, dbo.Blocks.Ready, dbo.Blocks.Approve, dbo.Blocks.BLockType, dbo.BlockType.TypeName, 
                      dbo.Blocks.CutterId
FROM         dbo.Blocks INNER JOIN
                      dbo.BlockType ON dbo.Blocks.BLockType = dbo.BlockType.id

GO


INSERT INTO dbo.TemplateVariables(id, Name, Description,Depend, Type ) VALUES(381,'$BlockCutter', 'монтажер блока',2,0 )
GO

USE [NewsFactory]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


----------------------------------------------
----------------------------------------------
ALTER PROCEDURE [dbo].[sp_NewsToArchive] 
@News_id  Bigint

AS

-- ????????? ?????? ? ????? ??????? ????????? ???? ???? ? ??????? ??????
-- ??????? ???????? @News_id  - id ???????
-- ?????  RETURN ??? ?????? ??? 0 ???? ??????? ??? 2 ???? 

-- News_To_Archive

DECLARE @rustv_err_status int
DECLARE @err_status int

IF ((SELECT rustv FROM programs WHERE [id] IN (SELECT programid FROM news WHERE [id]=@News_id))>0)
EXECUTE @rustv_err_status = sp_NewsToOutbox 0, @News_id
IF (@rustv_err_status <> 0) SET @rustv_err_status = @rustv_err_status*10

BEGIN TRANSACTION NewsToArchive

INSERT INTO ArcNews  ([id], [Name], EditorId, NewsDate, [Description], NewsTime, CalcTime, TaskTime, ProgramId, 
			Cassete, Time_Code, Duration, Deleted)
SELECT [id], [Name], EditorId, NewsDate, [Description], NewsTime, CalcTime, TaskTime, 
	ProgramId, Cassete, Time_Code, Duration, Deleted
FROM News WHERE [id]=@News_id
SET @err_status = @@ERROR
IF (@err_status <> 0)
BEGIN
	ROLLBACK TRANSACTION NewsToArchive
	RETURN @rustv_err_status+1
END

INSERT INTO ArchBlocks ([Id], [Name], NewsId, ParentId, BLockType, CreatorId, OperatorId, JockeyId,CutterId, BlockTime, 
			TaskTime, CalcTime, BlockText, Sort, [Description], Ready, Approve, TextLang1,TextLang2,TextLang3)
SELECT [Id], [Name], NewsId, ParentId, BLockType, CreatorId, OperatorId, JockeyId, CutterId, BlockTime, TaskTime, 
	CalcTime, BlockText, Sort, [Description], Ready, Approve, TextLang1,TextLang2,TextLang3
FROM  Blocks WHERE NewsId=@News_id and deleted=0
----------------------------------

                      
---------------------------------
SET @err_status = @@ERROR
IF (@err_status <> 0)
BEGIN
	ROLLBACK TRANSACTION NewsToArchive
	RETURN @rustv_err_status+1
END



DELETE FROM news WHERE [id]=@News_id
SET @err_status = @@ERROR
IF (@err_status <> 0)
BEGIN
	ROLLBACK TRANSACTION NewsToArchive
	RETURN @rustv_err_status+1
END

COMMIT TRANSACTION NewsToArchive


RETURN @rustv_err_status

GO

USE [NewsFactory]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

----------------------------------------------
----------------------------------------------
ALTER PROCEDURE [dbo].[sp_NewsToCopybox]
@News_id  Bigint,
@GroupId Bigint,
@UserId Bigint

AS

-- ????????? ??????????? ??????? ?? ?????????? ???????? ? ??????? ??? ???????
-- ???????? ????????? @News_id - ????? ?????? ???????? @GroupId - ????????? ? ????? ?????? ?????????? ??? ??? ??? ?????? ? 
-- ????????, @UserId - ? ?????? ?????? ??????? ????????? ? ??? ?????? ??????? ??????????
-- ????????? ???????? RETURN - ??? ?????? - ???? 0 ?? ???????

-- News_to_copyBox

DECLARE @New_CopyNews_id bigint
DECLARE @Block_id bigint
DECLARE @New_Block_id bigint
DECLARE @New_Subblock_id bigint
DECLARE @Subblock_id bigint

DECLARE @Error_Num int
DECLARE @Error_Count int


BEGIN TRANSACTION NewsToCopyNews

SET @Error_Num=2627
SET @Error_Count=0
WHILE (@Error_Num=2627) and (@Error_Count <10) 
BEGIN
        SET @New_CopyNews_id = (convert(bigint,rand()*1000000000000000))
	SET @Error_Count=@Error_Count+1
	INSERT INTO CopyNews ([id], [Name], EditorId, NewsDate, [Description], NewsTime, CalcTime, TaskTime, 
				ProgramId, Deleted, Cassete, Time_Code, Duration, GroupID)
	SELECT @New_CopyNews_id, [Name], @UserId, NewsDate, [Description], NewsTime, CalcTime, 
		TaskTime, ProgramId, Deleted, Cassete, Time_Code, Duration,@GroupId 
	FROM News WHERE ([id] = @News_id)
	SET @Error_Num=@@ERROR
END
if  @Error_Num <> 0 
BEGIN
	ROLLBACK TRANSACTION NewsToCopyNews
	RETURN 1
END
-- ???? ?? ??????? ???? ?????? ???????
DECLARE st cursor FOR SELECT [id] FROM Blocks where newsid = @News_id  AND ParentId=0 AND deleted=0
OPEN st
FETCH NEXT FROM st INTO @Block_id
WHILE @@fetch_status=0
BEGIN

	SET @Error_Num=2627
	SET @Error_Count=0
	WHILE (@Error_Num=2627) AND (@Error_Count <10) 
		BEGIN
			SET @Error_Count=@Error_Count+1
			SET @New_Block_id=(convert(bigint,rand()*1000000000000000))
     			INSERT INTO Blocks  ([Id], [Name], NewsId, ParentId, BLockType, CreatorId, OperatorId, 
						JockeyId,CutterId, BlockTime, TaskTime, CalcTime, BlockText, Sort, [Description], Ready,  Approve, TextLang1,TextLang2,TextLang3)
			SELECT @New_Block_id, [Name], @New_CopyNews_id, ParentId, BLockType, CreatorId, OperatorId, 
				JockeyId,CutterId, BlockTime, TaskTime, CalcTime, BlockText, Sort, [Description], Ready, Approve, TextLang1,TextLang2,TextLang3
			FROM  Blocks where id=@Block_id
			SET @Error_Num=@@ERROR
		END
		IF  @Error_Num <> 0 
		BEGIN
			CLOSE st
			DEALLOCATE st			
			ROLLBACK TRANSACTION NewsToCopyNews
			RETURN 1
		END
-- ???? ?? ??????? ???? ??????????? ?????? ?????
	IF(SELECT count([id]) FROM blocks WHERE ParentId=@Block_id) > 0
	BEGIN
		DECLARE st1 cursor FOR SELECT [id] FROM Blocks WHERE  ParentId=@Block_id
		OPEN st1
		FETCH NEXT FROM st1 INTO @Subblock_id
		WHILE @@fetch_status=0
    		BEGIN

			SET @Error_Num=2627
			SET @Error_Count=0
			WHILE (@Error_Num=2627) AND (@Error_Count <10) 
				BEGIN
					SET @Error_Count=@Error_Count+1
					SET @New_Subblock_id= (convert(bigint,rand()*1000000000000000))
					INSERT INTO Blocks ([Id], [Name], ParentId, NewsId, BLockType, CreatorId, 
								OperatorId, JockeyId, BlockTime, TaskTime, CalcTime, 
								BlockText, Sort, [Description], Ready, Approve)
					SELECT @New_Subblock_id, [Name], @New_Block_id, @New_CopyNews_id, BLockType, 
						CreatorId, OperatorId, JockeyId, BlockTime, TaskTime, CalcTime, 
						BlockText, Sort, [Description], Ready, Approve
					FROM  Blocks WHERE [id]=@Subblock_id
					SET @Error_Num=@@ERROR
				END
			IF  @Error_Num <> 0 
				BEGIN
					CLOSE st

					DEALLOCATE st

					CLOSE st1

					DEALLOCATE st1

					ROLLBACK TRANSACTION NewsToCopyNews
					RETURN 1
				END
			FETCH NEXT FROM st1 INTO @Subblock_id
		END
		CLOSE st1
		DEALLOCATE st1
	END
	FETCH NEXT FROM st INTO @Block_id
END                 
CLOSE st
DEALLOCATE st
COMMIT TRANSACTION NewsToCopyNews
RETURN 0

GO

USE [NewsFactory]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
ALTER PROCEDURE [dbo].[pWeb_CopyBlockTONewNews]
 
	@BlocksId bigint,
	@NewNewsId bigint
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
DECLARE @NewBlockId bigint 
DECLARE @Subblock_id bigint 
DECLARE @Error_Num int

SELECT @NewBlockId=ABS(CHECKSUM(NEWID())) % 99999999999

	INSERT INTO Blocks 
	( Id, Name, NewsId, ParentId, BLockType, CreatorId, OperatorId, JockeyId,CutterId, BlockTime, TaskTime, CalcTime, BlockText, Sort, Description, Ready, Approve, deleted, TextLang1, TextLang2, TextLang3)
	SELECT (@NewBlockId), Name + ' - copy', @NewNewsId, ParentId, BLockType, CreatorId, OperatorId, JockeyId,CutterId, BlockTime, TaskTime, CalcTime, BlockText, Sort, Description, Ready, Approve, deleted, TextLang1, TextLang2, TextLang3
FROM BLOCKS
	WHERE Id=@BlocksId AND ParentId=0
	
	IF(SELECT count([id]) FROM Blocks WHERE ParentId=@NewBlockId) > 0
BEGIN
	DECLARE st1 cursor FOR SELECT [id] FROM Blocks WHERE ParentId=@NewBlockId
	OPEN st1
	FETCH NEXT FROM st1 INTO @Subblock_id
	WHILE @@fetch_status=0
	BEGIN
		
			INSERT INTO Blocks ([Id], [Name], NewsId, ParentId, BLockType, CreatorId, OperatorId, 
						JockeyId,CutterId, BlockTime, TaskTime, CalcTime, BlockText, Sort, [Description], 
						Ready, Approve)
			SELECT convert(bigint,ABS(CHECKSUM(NEWID())) % 99999999999), [Name], @NewNewsId, @NewBlockId, BLockType, CreatorId, OperatorId, 
				JockeyId, CutterId, BlockTime, TaskTime, CalcTime, BlockText, Sort, [Description], Ready, Approve
			FROM  Blocks WHERE [id]=@Subblock_id
			
		
			
		FETCH NEXT FROM st1 INTO @Subblock_id
	END
	CLOSE st1
	DEALLOCATE st1
	
	EXECUTE [sp_SortBlocks] @NewnewsId
END


END

GO

USE [NewsFactory]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
ALTER PROCEDURE [dbo].[pWeb_CopyBlockTONewNewsWITHnoSORT]
 
	@BlocksId bigint,
	@NewNewsId bigint,
	@SortOrder int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
DECLARE @NewBlockId bigint 
DECLARE @Subblock_id bigint 
DECLARE @Error_Num int

SELECT @NewBlockId=ABS(CHECKSUM(NEWID())) % 99999999999

	INSERT INTO Blocks 
	( Id, Name, NewsId, ParentId, BLockType, CreatorId, OperatorId, JockeyId, CutterId, BlockTime, TaskTime, CalcTime, BlockText, Sort, Description, Ready, Approve, deleted, TextLang1, TextLang2, TextLang3)
	SELECT (@NewBlockId), Name, @NewNewsId, ParentId, BLockType, CreatorId, OperatorId, JockeyId, CutterId, BlockTime, TaskTime, CalcTime, BlockText, @SortOrder, Description, Ready, Approve, deleted, TextLang1, TextLang2, TextLang3
FROM BLOCKS
	WHERE Id=@BlocksId AND ParentId=0
	
	IF(SELECT count([id]) FROM Blocks WHERE ParentId=@NewBlockId) > 0
BEGIN
	DECLARE st1 cursor FOR SELECT [id] FROM Blocks WHERE ParentId=@NewBlockId
	OPEN st1
	FETCH NEXT FROM st1 INTO @Subblock_id
	WHILE @@fetch_status=0
	BEGIN
		
			INSERT INTO Blocks ([Id], [Name], NewsId, ParentId, BLockType, CreatorId, OperatorId, 
						JockeyId, CutterId, BlockTime, TaskTime, CalcTime, BlockText, Sort, [Description], 
						Ready, Approve)
			SELECT convert(bigint,ABS(CHECKSUM(NEWID())) % 99999999999), [Name], @NewNewsId, @NewBlockId, BLockType, CreatorId, OperatorId, 
				JockeyId, CutterId, BlockTime, TaskTime, CalcTime, BlockText, Sort, [Description], Ready, Approve
			FROM  Blocks WHERE [id]=@Subblock_id
			
		
			
		FETCH NEXT FROM st1 INTO @Subblock_id
	END
	CLOSE st1
	DEALLOCATE st1
	
	--EXECUTE [sp_SortBlocks] @NewnewsId
END


END

GO
USE [NewsFactory]
GO



SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
ALTER PROCEDURE [dbo].[pWeb_CopyBlockTONewNews]
 
	@BlocksId bigint,
	@NewNewsId bigint
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
DECLARE @NewBlockId bigint 
DECLARE @Subblock_id bigint 
DECLARE @Error_Num int

SELECT @NewBlockId=ABS(CHECKSUM(NEWID())) % 99999999999

	INSERT INTO Blocks 
	( Id, Name, NewsId, ParentId, BLockType, CreatorId, OperatorId, JockeyId,CutterId, BlockTime, TaskTime, CalcTime, BlockText, Sort, Description, Ready, Approve, deleted, TextLang1, TextLang2, TextLang3)
	SELECT (@NewBlockId), Name + ' - copy', @NewNewsId, ParentId, BLockType, CreatorId, OperatorId, JockeyId,CutterId, BlockTime, TaskTime, CalcTime, BlockText, Sort, Description, Ready, Approve, deleted, TextLang1, TextLang2, TextLang3
FROM BLOCKS
	WHERE Id=@BlocksId AND ParentId=0
	
	IF(SELECT count([id]) FROM Blocks WHERE ParentId=@BlocksId) > 0
BEGIN
	DECLARE st1 cursor FOR SELECT [id] FROM Blocks WHERE ParentId=@BlocksId
	OPEN st1
	FETCH NEXT FROM st1 INTO @Subblock_id
	WHILE @@fetch_status=0
	BEGIN
		
			INSERT INTO Blocks ([Id], [Name], NewsId, ParentId, BLockType, CreatorId, OperatorId, 
						JockeyId,CutterId, BlockTime, TaskTime, CalcTime, BlockText, Sort, [Description], 
						Ready, Approve, TextLang1,TextLang2,TextLang3)
			SELECT convert(bigint,ABS(CHECKSUM(NEWID())) % 99999999999), [Name], @NewNewsId, @NewBlockId, BLockType, CreatorId, OperatorId, 
				JockeyId, CutterId, BlockTime, TaskTime, CalcTime, BlockText, Sort, [Description], Ready, Approve, TextLang1,TextLang2,TextLang3
			FROM  Blocks WHERE [id]=@Subblock_id
			
		
			
		FETCH NEXT FROM st1 INTO @Subblock_id
	END
	CLOSE st1
	DEALLOCATE st1
	
	EXECUTE [sp_SortBlocks] @NewnewsId
END


END


GO

USE [NewsFactory]
GO




-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
ALTER PROCEDURE [dbo].[pWeb_CopyBlockTONewNewsWITHnoSORT]
 
	@BlocksId bigint,
	@NewNewsId bigint,
	@SortOrder int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
DECLARE @NewBlockId bigint 
DECLARE @Subblock_id bigint 
DECLARE @Error_Num int

SELECT @NewBlockId=ABS(CHECKSUM(NEWID())) % 99999999999

	INSERT INTO Blocks 
	( Id, Name, NewsId, ParentId, BLockType, CreatorId, OperatorId, JockeyId, CutterId, BlockTime, TaskTime, CalcTime, BlockText, Sort, Description, Ready, Approve, deleted, TextLang1, TextLang2, TextLang3)
	SELECT (@NewBlockId), Name, @NewNewsId, ParentId, BLockType, CreatorId, OperatorId, JockeyId, CutterId, BlockTime, TaskTime, CalcTime, BlockText, @SortOrder, Description, Ready, Approve, deleted, TextLang1, TextLang2, TextLang3
FROM BLOCKS
	WHERE Id=@BlocksId AND ParentId=0
	
	IF(SELECT count([id]) FROM Blocks WHERE ParentId=@BlocksId) > 0
BEGIN
	DECLARE st1 cursor FOR SELECT [id] FROM Blocks WHERE ParentId=@BlocksId
	OPEN st1
	FETCH NEXT FROM st1 INTO @Subblock_id
	WHILE @@fetch_status=0
	BEGIN
		
			INSERT INTO Blocks ([Id], [Name], NewsId, ParentId, BLockType, CreatorId, OperatorId, 
						JockeyId, CutterId, BlockTime, TaskTime, CalcTime, BlockText, Sort, [Description], 
						Ready, Approve, TextLang1, TextLang2, TextLang3)
			SELECT convert(bigint,ABS(CHECKSUM(NEWID())) % 99999999999), [Name], @NewNewsId, @NewBlockId, BLockType, CreatorId, OperatorId, 
				JockeyId, CutterId, BlockTime, TaskTime, CalcTime, BlockText, Sort, [Description], Ready, Approve, TextLang1, TextLang2, TextLang3
			FROM  Blocks WHERE [id]=@Subblock_id
			
		
			
		FETCH NEXT FROM st1 INTO @Subblock_id
	END
	CLOSE st1
	DEALLOCATE st1
	
	--EXECUTE [sp_SortBlocks] @NewnewsId
END


END


GO



*/
	select 1
END
GO


GO
-- Create Function [dbo].[fWeb_GetUserName]
Print 'Create Function [dbo].[fWeb_GetUserName]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date, ,>
-- Description:	<Description, ,>
-- =============================================
CREATE FUNCTION [dbo].[fWeb_GetUserName]
(
	@UserId bigint
)
RETURNS nvarchar(255)
AS
BEGIN
	DECLARE @ret nvarchar(255)
	SELECT @ret=UserName FROM Users WHERE UserId=@UserId
	IF @ret IS NULL
	BEGIN
		SET @ret=''
	END
	
	RETURN @ret

END
GO


GO
-- Create Function [dbo].[fWeb_BlockIdGetFromBlockGuid]
Print 'Create Function [dbo].[fWeb_BlockIdGetFromBlockGuid]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date, ,>
-- Description:	<Description, ,>
-- =============================================
CREATE FUNCTION dbo.fWeb_BlockIdGetFromBlockGuid
(
	@BlockGuid NVARCHAR(255)
)
RETURNS bigint
AS
BEGIN
	
	DECLARE @ret bigint
	SELECT @ret=BlockId FROM  dbo.tWeb_TempLink WHERE URL=@BlockGuid
	
	RETURN  @ret

END
GO


GO
-- Create Function [dbo].[fWeb_GetLockUserName]
Print 'Create Function [dbo].[fWeb_GetLockUserName]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date, ,>
-- Description:	<Description, ,>
-- =============================================
CREATE FUNCTION [dbo].[fWeb_GetLockUserName]
(
	@BlockId bigint
)
RETURNS nvarchar(255)
AS
BEGIN
	
	DECLARE @UserName nvarchar(255)
	SELECT    top (1)  @UserName=UserName
                            FROM          dbo.Locking
                            WHERE      (BlockId = @BlockId) AND dateadd(n, -2, GETDATE())<time
                            
     return ISNULL(@Username,'')

END
GO


GO
-- Create Function [dbo].[fWeb_GetUserIdFromCoockie]
Print 'Create Function [dbo].[fWeb_GetUserIdFromCoockie]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date, ,>
-- Description:	<Description, ,>
-- =============================================
CREATE FUNCTION dbo.fWeb_GetUserIdFromCoockie 
(
	@Cookie int
)
RETURNS int
AS
BEGIN
	DECLARE @ret int
	SELECT top 1 @ret=UserId FROM  dbo.tWeb_SessionGuid WHERE Cookie=@Cookie
	RETURN @ret
END
GO


GO
-- Create Function [dbo].[GetTypeName]
Print 'Create Function [dbo].[GetTypeName]'
GO
SET ANSI_NULLS OFF
SET QUOTED_IDENTIFIER OFF
GO


GO

CREATE FUNCTION dbo.GetTypeName(@in int)  
RETURNS nvarchar(255) AS  
BEGIN
Declare @out nvarchar(255) 
Select @out=typename from blocktype where id=@in
if (@out is NULL)
begin
	Set @out ='Неизвестный тип' 
end
return @out
END
GO


GO
-- Create Table [dbo].[ArchBlocks]
Print 'Create Table [dbo].[ArchBlocks]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[ArchBlocks] (
		[Id]              [bigint] NOT NULL,
		[Name]            [nvarchar](255) NOT NULL,
		[NewsId]          [bigint] NOT NULL,
		[ParentId]        [bigint] NOT NULL,
		[BLockType]       [int] NOT NULL,
		[CreatorId]       [int] NOT NULL,
		[OperatorId]      [int] NOT NULL,
		[JockeyId]        [int] NOT NULL,
		[CutterId]        [int] NOT NULL,
		[BlockTime]       [int] NOT NULL,
		[TaskTime]        [int] NOT NULL,
		[CalcTime]        [int] NOT NULL,
		[BlockText]       [ntext] NOT NULL,
		[Sort]            [int] NOT NULL,
		[Description]     [nvarchar](255) NOT NULL,
		[Approve]         [bit] NOT NULL,
		[Ready]           [bit] NOT NULL,
		[Deleted]         [bit] NOT NULL,
		[TextLang1]       [ntext] NOT NULL,
		[TextLang2]       [ntext] NOT NULL,
		[TextLang3]       [ntext] NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[ArchBlocks]
	ADD
	CONSTRAINT [PK_ArchBlocks]
	PRIMARY KEY
	CLUSTERED
	([Id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[ArchBlocks]
	ADD
	CONSTRAINT [DF__ArchBlock__TextL__7908F585]
	DEFAULT ('') FOR [TextLang1]
GO


GO
ALTER TABLE [dbo].[ArchBlocks]
	ADD
	CONSTRAINT [DF__ArchBlock__TextL__79FD19BE]
	DEFAULT ('') FOR [TextLang2]
GO


GO
ALTER TABLE [dbo].[ArchBlocks]
	ADD
	CONSTRAINT [DF__ArchBlock__TextL__7AF13DF7]
	DEFAULT ('') FOR [TextLang3]
GO


GO
ALTER TABLE [dbo].[ArchBlocks]
	ADD
	CONSTRAINT [DF_ArchBlocks_Approve]
	DEFAULT ((0)) FOR [Approve]
GO


GO
ALTER TABLE [dbo].[ArchBlocks]
	ADD
	CONSTRAINT [DF_ArchBlocks_BlockText]
	DEFAULT ('') FOR [BlockText]
GO


GO
ALTER TABLE [dbo].[ArchBlocks]
	ADD
	CONSTRAINT [DF_ArchBlocks_BlockTime]
	DEFAULT ((0)) FOR [BlockTime]
GO


GO
ALTER TABLE [dbo].[ArchBlocks]
	ADD
	CONSTRAINT [DF_ArchBlocks_BLockType]
	DEFAULT ((0)) FOR [BLockType]
GO


GO
ALTER TABLE [dbo].[ArchBlocks]
	ADD
	CONSTRAINT [DF_ArchBlocks_CalcTime]
	DEFAULT ((0)) FOR [CalcTime]
GO


GO
ALTER TABLE [dbo].[ArchBlocks]
	ADD
	CONSTRAINT [DF_ArchBlocks_CreatorId]
	DEFAULT ((0)) FOR [CreatorId]
GO


GO
ALTER TABLE [dbo].[ArchBlocks]
	ADD
	CONSTRAINT [DF_ArchBlocks_CutterId]
	DEFAULT ((0)) FOR [CutterId]
GO


GO
ALTER TABLE [dbo].[ArchBlocks]
	ADD
	CONSTRAINT [DF_ArchBlocks_Deleted]
	DEFAULT ((0)) FOR [Deleted]
GO


GO
ALTER TABLE [dbo].[ArchBlocks]
	ADD
	CONSTRAINT [DF_ArchBlocks_Description]
	DEFAULT ('') FOR [Description]
GO


GO
ALTER TABLE [dbo].[ArchBlocks]
	ADD
	CONSTRAINT [DF_ArchBlocks_JockeyId]
	DEFAULT ((0)) FOR [JockeyId]
GO


GO
ALTER TABLE [dbo].[ArchBlocks]
	ADD
	CONSTRAINT [DF_ArchBlocks_Name]
	DEFAULT ('') FOR [Name]
GO


GO
ALTER TABLE [dbo].[ArchBlocks]
	ADD
	CONSTRAINT [DF_ArchBlocks_NewsId]
	DEFAULT ((0)) FOR [NewsId]
GO


GO
ALTER TABLE [dbo].[ArchBlocks]
	ADD
	CONSTRAINT [DF_ArchBlocks_OperatorId]
	DEFAULT ((0)) FOR [OperatorId]
GO


GO
ALTER TABLE [dbo].[ArchBlocks]
	ADD
	CONSTRAINT [DF_ArchBlocks_ParentId]
	DEFAULT ((0)) FOR [ParentId]
GO


GO
ALTER TABLE [dbo].[ArchBlocks]
	ADD
	CONSTRAINT [DF_ArchBlocks_Ready]
	DEFAULT ((0)) FOR [Ready]
GO


GO
ALTER TABLE [dbo].[ArchBlocks]
	ADD
	CONSTRAINT [DF_ArchBlocks_Sort]
	DEFAULT ((0)) FOR [Sort]
GO


GO
ALTER TABLE [dbo].[ArchBlocks]
	ADD
	CONSTRAINT [DF_ArchBlocks_TaskTime]
	DEFAULT ((0)) FOR [TaskTime]
GO


GO
ALTER TABLE [dbo].[ArchBlocks] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[UUserToProgram]
Print 'Create Table [dbo].[UUserToProgram]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING OFF
GO


GO
CREATE TABLE [dbo].[UUserToProgram] (
		[UUserToProgramID]     [int] IDENTITY(1, 1) NOT NULL,
		[UserID]               [int] NOT NULL,
		[ProgramID]            [int] NOT NULL,
		[URoleID]              [int] NOT NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[UUserToProgram]
	ADD
	CONSTRAINT [PK_UUserToProgram]
	PRIMARY KEY
	CLUSTERED
	([UUserToProgramID])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[UUserToProgram]
	ADD
	CONSTRAINT [DF_UUserToProgram_ProgramID]
	DEFAULT ((0)) FOR [ProgramID]
GO


GO
ALTER TABLE [dbo].[UUserToProgram] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[tWeb_IncomingRssMessages]
Print 'Create Table [dbo].[tWeb_IncomingRssMessages]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[tWeb_IncomingRssMessages] (
		[id]              [int] IDENTITY(1, 1) NOT NULL,
		[exsternalId]     [bigint] NULL,
		[Name]            [nvarchar](255) NULL,
		[Lid]             [ntext] NULL,
		[Date]            [datetime] NULL,
		[SourceId]        [int] NOT NULL,
		[Link]            [nvarchar](255) NULL,
		[ImgLink]         [nvarchar](255) NULL,
		[GUID]            [nvarchar](255) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tWeb_IncomingRssMessages]
	ADD
	CONSTRAINT [PK_tWeb_IncomingRssMessages]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tWeb_IncomingRssMessages]
	ADD
	CONSTRAINT [DF_tWeb_IncomingRssMessages_Date]
	DEFAULT (getdate()) FOR [Date]
GO


GO
ALTER TABLE [dbo].[tWeb_IncomingRssMessages]
	ADD
	CONSTRAINT [DF_tWeb_IncomingRssMessages_exsternalId]
	DEFAULT ('') FOR [exsternalId]
GO


GO
ALTER TABLE [dbo].[tWeb_IncomingRssMessages]
	ADD
	CONSTRAINT [DF_tWeb_IncomingRssMessages_ImgLink]
	DEFAULT ('') FOR [ImgLink]
GO


GO
ALTER TABLE [dbo].[tWeb_IncomingRssMessages]
	ADD
	CONSTRAINT [DF_tWeb_IncomingRssMessages_Lid]
	DEFAULT ('') FOR [Lid]
GO


GO
ALTER TABLE [dbo].[tWeb_IncomingRssMessages]
	ADD
	CONSTRAINT [DF_tWeb_IncomingRssMessages_Link]
	DEFAULT ('') FOR [Link]
GO


GO
ALTER TABLE [dbo].[tWeb_IncomingRssMessages]
	ADD
	CONSTRAINT [DF_tWeb_IncomingRssMessages_Name]
	DEFAULT ('') FOR [Name]
GO


GO
ALTER TABLE [dbo].[tWeb_IncomingRssMessages]
	ADD
	CONSTRAINT [DF_tWeb_IncomingRssMessages_Source]
	DEFAULT ('') FOR [SourceId]
GO


GO
ALTER TABLE [dbo].[tWeb_IncomingRssMessages] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[URightsToRole]
Print 'Create Table [dbo].[URightsToRole]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING OFF
GO


GO
CREATE TABLE [dbo].[URightsToRole] (
		[URoleID]      [int] NOT NULL,
		[URightID]     [int] NOT NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[URightsToRole]
	ADD
	CONSTRAINT [PK_URulesToGroup]
	PRIMARY KEY
	CLUSTERED
	([URoleID], [URightID])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[URightsToRole] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[FlagsToBlockTypes]
Print 'Create Table [dbo].[FlagsToBlockTypes]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING OFF
GO


GO
CREATE TABLE [dbo].[FlagsToBlockTypes] (
		[BlockTypeID]     [int] NOT NULL,
		[FlagID]          [int] NOT NULL,
		[SortOrder]       [int] NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[FlagsToBlockTypes]
	ADD
	CONSTRAINT [PK_FlagsToBlockTypes]
	PRIMARY KEY
	CLUSTERED
	([BlockTypeID], [FlagID])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[FlagsToBlockTypes]
	ADD
	CONSTRAINT [DF_FlagsToBlockTypes_SortOrder]
	DEFAULT ((1)) FOR [SortOrder]
GO


GO
ALTER TABLE [dbo].[FlagsToBlockTypes] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[News]
Print 'Create Table [dbo].[News]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[News] (
		[id]              [bigint] NOT NULL,
		[Name]            [nvarchar](255) NOT NULL,
		[EditorId]        [int] NOT NULL,
		[NewsDate]        [datetime] NOT NULL,
		[Description]     [nvarchar](255) NOT NULL,
		[NewsTime]        [bigint] NOT NULL,
		[CalcTime]        [bigint] NOT NULL,
		[TaskTime]        [bigint] NOT NULL,
		[Deleted]         [bit] NOT NULL,
		[ProgramId]       [int] NOT NULL,
		[Cassete]         [nvarchar](255) NOT NULL,
		[Time_Code]       [bigint] NOT NULL,
		[Duration]        [bigint] NOT NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[News]
	ADD
	CONSTRAINT [PK_News]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[News]
	ADD
	CONSTRAINT [DF_News_CalcTime]
	DEFAULT ((0)) FOR [CalcTime]
GO


GO
ALTER TABLE [dbo].[News]
	ADD
	CONSTRAINT [DF_News_Cassete]
	DEFAULT ('Кассета №') FOR [Cassete]
GO


GO
ALTER TABLE [dbo].[News]
	ADD
	CONSTRAINT [DF_News_Deleted]
	DEFAULT ((0)) FOR [Deleted]
GO


GO
ALTER TABLE [dbo].[News]
	ADD
	CONSTRAINT [DF_News_Description]
	DEFAULT ('') FOR [Description]
GO


GO
ALTER TABLE [dbo].[News]
	ADD
	CONSTRAINT [DF_News_Duraction]
	DEFAULT ((0)) FOR [Duration]
GO


GO
ALTER TABLE [dbo].[News]
	ADD
	CONSTRAINT [DF_News_EditorId]
	DEFAULT ((0)) FOR [EditorId]
GO


GO
ALTER TABLE [dbo].[News]
	ADD
	CONSTRAINT [DF_News_Name]
	DEFAULT ('') FOR [Name]
GO


GO
ALTER TABLE [dbo].[News]
	ADD
	CONSTRAINT [DF_News_NewsDate]
	DEFAULT (getdate()) FOR [NewsDate]
GO


GO
ALTER TABLE [dbo].[News]
	ADD
	CONSTRAINT [DF_News_NewsTime]
	DEFAULT ((0)) FOR [NewsTime]
GO


GO
ALTER TABLE [dbo].[News]
	ADD
	CONSTRAINT [DF_News_ProgramId]
	DEFAULT ((0)) FOR [ProgramId]
GO


GO
ALTER TABLE [dbo].[News]
	ADD
	CONSTRAINT [DF_News_TaskTime]
	DEFAULT ((0)) FOR [TaskTime]
GO


GO
ALTER TABLE [dbo].[News]
	ADD
	CONSTRAINT [DF_News_Time_Code]
	DEFAULT ((0)) FOR [Time_Code]
GO


GO
ALTER TABLE [dbo].[News] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create View [dbo].[vOutboxEmail]
Print 'Create View [dbo].[vOutboxEmail]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

CREATE VIEW dbo.vOutboxEmail
AS
SELECT     dbo.[Outbox e-mail].[e-mail], dbo.Outbox.id
FROM         dbo.Outbox INNER JOIN
                      dbo.[Outbox e-mail] ON dbo.Outbox.id = dbo.[Outbox e-mail].OutboxId

GO


GO
-- Create View [dbo].[vOutbox_Blocks]
Print 'Create View [dbo].[vOutbox_Blocks]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO



-----

CREATE VIEW dbo.vOutbox_Blocks
AS
SELECT     TOP 100 PERCENT dbo.OutboxBlocks.Id, dbo.OutboxBlocks.BlockText AS text, dbo.OutboxBlocks.Name,CASE  WHEN (dbo.Users.UserName is NULL) THEN '--NO AUTOR--' ELSE dbo.Users.UserName END  AS autor, 
                      dbo.OutboxBlocks.NewsId, dbo.OutboxBlocks.Sort AS [order], dbo.OutboxNews.Name AS NewsName
FROM         dbo.OutboxBlocks INNER JOIN
                      dbo.OutboxNews ON dbo.OutboxBlocks.NewsId = dbo.OutboxNews.id LEFT OUTER JOIN
                      dbo.Users ON dbo.OutboxBlocks.CreatorId = dbo.Users.UserID
WHERE     (dbo.OutboxBlocks.deleted = 0)
ORDER BY dbo.OutboxBlocks.Sort

GO


GO
-- Create View [dbo].[vMessages-Name]
Print 'Create View [dbo].[vMessages-Name]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

CREATE VIEW dbo.[vMessages-Name]
AS
SELECT     dbo.Messages.id, dbo.Messages.[from], dbo.Messages.[to], dbo.Messages.text, dbo.Messages.data, dbo.Users.UserName AS from_name, 
                      Users_1.UserName AS to_name
FROM         dbo.Messages INNER JOIN
                      dbo.Users ON dbo.Messages.[from] = dbo.Users.UserID INNER JOIN
                      dbo.Users Users_1 ON dbo.Messages.[to] = Users_1.UserID

GO


GO
-- Create View [dbo].[vMedia_ThumbnailsForList]
Print 'Create View [dbo].[vMedia_ThumbnailsForList]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
CREATE VIEW dbo.vMedia_ThumbnailsForList
AS
SELECT     TOP (100) PERCENT id, DateAdd, Number, image, FileGuid
FROM         dbo.tMedia_Thumbnails
ORDER BY Number
GO


GO
-- Create View [dbo].[vMedia_EncoderTask]
Print 'Create View [dbo].[vMedia_EncoderTask]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
CREATE VIEW dbo.vMedia_EncoderTask
AS
SELECT     dbo.tMedia_EncoderTasks.id, dbo.tMedia_EncoderTasks.EncoderGuid, dbo.tMedia_EncoderTasks.DateLastStart, dbo.tMedia_EncoderTasks.IsActive, dbo.tMedia_EncoderTasks.ErrorCount, 
                      dbo.tMedia_EncoderTasks.IsComplite, dbo.tMedia_EncoderTasks.FileGuid, dbo.tMedia_Files.FileName, dbo.tMedia_Files.LRVFileName, dbo.tMedia_Files.LRVPath
FROM         dbo.tMedia_EncoderTasks INNER JOIN
                      dbo.tMedia_Files ON dbo.tMedia_EncoderTasks.FileGuid = dbo.tMedia_Files.FileGuid
GO


GO
-- Create View [dbo].[vMedia_FileWIthFolderToLIst]
Print 'Create View [dbo].[vMedia_FileWIthFolderToLIst]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
CREATE VIEW dbo.vMedia_FileWIthFolderToLIst
AS
SELECT     TOP (100) PERCENT dbo.tMedia_Folders.FolderGuid, dbo.tMedia_Folders.id AS FolderId, dbo.tMedia_Folders.sFolderName AS FolderREady, dbo.tMedia_Folders.Ready, 
                      dbo.tMedia_Folders.sPath AS FolderPAth, dbo.tMedia_Folders.iFilesCount AS FileCountInFOlder, dbo.tMedia_Files.id AS FIleId, dbo.tMedia_Files.FileGuid, dbo.tMedia_Files.FileName, 
                      dbo.tMedia_Files.Ready AS FIleREady, dbo.tMedia_Files.NumberInFolder, dbo.tMedia_Files.Size AS FileSize, dbo.tMedia_Files.sSourceIp, dbo.tMedia_Files.StartDate, dbo.tMedia_Files.EndDate, 
                      dbo.tMedia_Files.BlockType
FROM         dbo.tMedia_Files INNER JOIN
                      dbo.tMedia_Folders ON dbo.tMedia_Files.FolderGuid = dbo.tMedia_Folders.FolderGuid
ORDER BY dbo.tMedia_Files.NumberInFolder
GO


GO
-- Create View [dbo].[vExcNewsBlock]
Print 'Create View [dbo].[vExcNewsBlock]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

CREATE VIEW dbo.vExcNewsBlock
AS
SELECT     TOP 100 PERCENT dbo.ExcangeBlocks.Id, dbo.ExcangeBlocks.BLockType, dbo.ExcangeBlocks.CreatorId, dbo.ExcangeBlocks.OperatorId, 
                      dbo.ExcangeBlocks.JockeyId, dbo.ExchangeNews.Name, dbo.ExcangeBlocks.Name AS Description, dbo.ExcangeBlocks.BlockTime, 
                      dbo.ExcangeBlocks.TaskTime, dbo.ExcangeBlocks.CalcTime, dbo.ExcangeBlocks.BlockText, dbo.ExcangeBlocks.NewsId, 
                      dbo.ExcangeBlocks.ParentId, dbo.ExcangeBlocks.Sort, dbo.ExcangeBlocks.Approve, dbo.ExcangeBlocks.Ready
FROM         dbo.ExcangeBlocks INNER JOIN
                      dbo.ExchangeNews ON dbo.ExcangeBlocks.NewsId = dbo.ExchangeNews.id
WHERE     (dbo.ExcangeBlocks.Deleted = 0)
ORDER BY CONVERT(int, dbo.ExchangeNews.NewsDate) DESC, dbo.ExchangeNews.Name

GO


GO
-- Create View [dbo].[vExchangeNewsBlock]
Print 'Create View [dbo].[vExchangeNewsBlock]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

CREATE VIEW dbo.vExchangeNewsBlock
AS
SELECT     TOP 100 PERCENT dbo.ExcangeBlocks.Id, dbo.ExcangeBlocks.BLockType, dbo.ExcangeBlocks.CreatorId, dbo.ExcangeBlocks.OperatorId, 
                      dbo.ExcangeBlocks.JockeyId, dbo.ExchangeNews.Name, dbo.ExcangeBlocks.Name AS Description, dbo.ExcangeBlocks.BlockTime, CONVERT(int, 
                      dbo.ExchangeNews.NewsDate) + 1 AS TaskTime, dbo.ExcangeBlocks.CalcTime, dbo.ExcangeBlocks.BlockText, dbo.ExcangeBlocks.NewsId, 
                      dbo.ExcangeBlocks.ParentId, dbo.ExcangeBlocks.Sort, dbo.ExcangeBlocks.Ready, dbo.ExcangeBlocks.Approve
FROM         dbo.ExcangeBlocks INNER JOIN
                      dbo.ExchangeNews ON dbo.ExcangeBlocks.NewsId = dbo.ExchangeNews.id
WHERE     (dbo.ExcangeBlocks.Deleted = 0)
ORDER BY CONVERT(int, dbo.ExchangeNews.NewsDate) DESC, dbo.ExchangeNews.Name

GO


GO
-- Create View [dbo].[va_Timeouts]
Print 'Create View [dbo].[va_Timeouts]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

CREATE VIEW dbo.va_Timeouts
AS
SELECT     [name],
                   val1,
                   timepartstr = CASE WHEN timepart = 's' THEN 'sec'
                                                  WHEN timepart = 'm' THEN 'min'
                                                  WHEN timepart = 'h' THEN 'hour'
                                                  WHEN timepart = 'd' THEN 'day' 
                                                  ELSE '-' END, 
                   MinMax = cast(Min1 as varchar) + ' - ' +  cast(Max1 as varchar) ,  
                   [description], 
                   [id], 
                   val,
                   timepart, 
                   Min1, 
                   Max1,
operation,
runstring
FROM         dbo.Timeouts







GO


GO
-- Create View [dbo].[vWEB_ExtLinkToList]
Print 'Create View [dbo].[vWEB_ExtLinkToList]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
CREATE VIEW dbo.vWEB_ExtLinkToList
AS
SELECT     dbo.tWeb_TempLink.UserId, dbo.Users.UserName, dbo.tWeb_TempLink.BlockId, dbo.tWeb_TempLink.GrantDate, dbo.tWeb_TempLink.IsExpirience, dbo.tWeb_TempLink.ExpirienceDate, 
                      dbo.tWeb_TempLink.Deleted, dbo.tWeb_TempLink.URL, dbo.tWeb_TempLink.IsCommentable
FROM         dbo.tWeb_TempLink INNER JOIN
                      dbo.Users ON dbo.tWeb_TempLink.UserId = dbo.Users.UserID
GO


GO
-- Create View [dbo].[vWeb_Users]
Print 'Create View [dbo].[vWeb_Users]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
CREATE VIEW dbo.vWeb_Users
AS
SELECT     TOP (100) PERCENT UserID, UserName, Active
FROM         dbo.Users
ORDER BY UserName
GO


GO
-- Create View [dbo].[v_ProgramsToList]
Print 'Create View [dbo].[v_ProgramsToList]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
CREATE VIEW dbo.v_ProgramsToList
AS
SELECT     id, Name, Director, Rustv, Deleted
FROM         dbo.Programs
GO


GO
-- Create View [dbo].[vWeb_Timeouts]
Print 'Create View [dbo].[vWeb_Timeouts]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
CREATE VIEW dbo.vWeb_Timeouts
AS
SELECT     id, val, name, description, timepart, Min1, Max1, Val1, operation, RunString
FROM         dbo.Timeouts
GO


GO
-- Create View [dbo].[vWeb_BlockDeleteUser]
Print 'Create View [dbo].[vWeb_BlockDeleteUser]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
CREATE VIEW dbo.vWeb_BlockDeleteUser
AS
SELECT     dbo.[log].id, dbo.[log].ItemID, dbo.Users.UserName, dbo.[log].EventDate
FROM         dbo.[log] INNER JOIN
                      dbo.Users ON dbo.[log].Userid = dbo.Users.UserID
GO


GO
-- Create View [dbo].[vWeb_Settings]
Print 'Create View [dbo].[vWeb_Settings]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
CREATE VIEW dbo.vWeb_Settings
AS
SELECT     id, [Key], value, Description
FROM         dbo.tWeb_Settings
GO


GO
-- Create View [dbo].[vWeb_SavedStates]
Print 'Create View [dbo].[vWeb_SavedStates]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
CREATE VIEW dbo.vWeb_SavedStates
AS
SELECT     id, Data, Descriotion
FROM         dbo.tWeb_SavedStates
GO


GO
-- Create View [dbo].[vPrintTemlates]
Print 'Create View [dbo].[vPrintTemlates]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

CREATE VIEW dbo.vPrintTemlates
AS
SELECT     TOP 100 PERCENT PrintTemplateId AS ProgramID, CONVERT(char(1), Enter) AS ProgramName, BlockTypeId AS RightID, UserID, UserName, 
                      CONVERT(char(1), OnlyMy) AS UserPass, AbrigeBlockTypeId AS UserRate
FROM         dbo.Users

GO


GO
-- Create View [dbo].[tMedia_FilseWithFoldersToList]
Print 'Create View [dbo].[tMedia_FilseWithFoldersToList]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
CREATE VIEW dbo.tMedia_FilseWithFoldersToList
AS
SELECT     TOP (100) PERCENT dbo.tMedia_Folders.id AS FolderId, dbo.tMedia_Folders.sFolderName AS FolderName, dbo.tMedia_Folders.FolderGuid, dbo.tMedia_Folders.Ready AS FolderReady, 
                      dbo.tMedia_Folders.sPath AS Path, dbo.tMedia_Files.FileGuid, dbo.tMedia_Files.FileName, dbo.tMedia_Files.Ready AS FileReady, dbo.tMedia_Files.Size, 
                      dbo.tMedia_Files.NumberInFolder AS FileNumberInFolders, dbo.tMedia_Files.sSourceIp, dbo.tMedia_Files.StartDate, dbo.tMedia_Files.EndDate, dbo.tMedia_Files.BlockType, 
                      dbo.tMedia_Files.id AS FileId
FROM         dbo.tMedia_Files INNER JOIN
                      dbo.tMedia_Folders ON dbo.tMedia_Files.FolderGuid = dbo.tMedia_Folders.FolderGuid
ORDER BY FileNumberInFolders
GO


GO
-- Create View [dbo].[vWeb_InMsg]
Print 'Create View [dbo].[vWeb_InMsg]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
CREATE VIEW dbo.vWeb_InMsg
AS
SELECT     TOP (100) PERCENT dbo.Users.UserName AS FromName, dbo.Messages.id AS Id, dbo.Messages.text, dbo.Messages.[to], dbo.Messages.data, dbo.Messages.[from]
FROM         dbo.Messages INNER JOIN
                      dbo.Users ON dbo.Messages.[from] = dbo.Users.UserID
ORDER BY dbo.Messages.data DESC
GO


GO
-- Create View [dbo].[va_MailLog]
Print 'Create View [dbo].[va_MailLog]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO



CREATE VIEW dbo.va_MailLog
AS
SELECT    MailLog.[Date] as MailEventDate ,
                   MailLog.type as MailEventTypeD, MailLog.error  as
MailEventErrorD,
                   MailEventType = CASE WHEN MailLog.type = 1 THEN 
'ACTION:send' ELSE 'ACTION:receive' END,
                   MailEventError = CASE WHEN MailLog.error = 0 THEN
'STATUS:successfully' ELSE 'STATUS:error'  END,
       MailLog.[msg] as MailEventMessage,
                    CONVERT ( char (8 ) , MailLog.[Date]  , 4 ) as
MailEventDateDate,
                    CONVERT( int, MailLog.[Date]) as MailEventDateForSort
FROM         MailLog


GO


GO
-- Create Procedure [dbo].[spa_UpdateUser]
Print 'Create Procedure [dbo].[spa_UpdateUser]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO


----------------------------------------------
----------------------------------------------
CREATE PROCEDURE [dbo].[spa_UpdateUser]
@UserId  int,
@UserName  nvarchar(255),
@UserPass nvarchar(255),
@UserReadRate  int

AS

-- NFAdmin
-- инсертит или апдейтит табличку тагов
-- входные параметры - новые значения полей, при этом если @UserId = -1 то это инсерт
-- выходной параметр UserId - норма, -1 - ошибка

DECLARE @err_status int
DECLARE @New_ID int

BEGIN TRANSACTION UpdateUser
IF @UserId = -1
BEGIN
	INSERT INTO Users  (UserName, pass, ReadRate) VALUES ( @UserName, @UserPass, @UserReadRate)
	SET @err_status = @@ERROR                 
	IF (@err_status <> 0)
	BEGIN 
		ROLLBACK TRANSACTION UpdateUser
		RETURN -1
	END
	SET @New_ID = @@IDENTITY
	IF @New_ID > 0
	BEGIN
		COMMIT TRANSACTION UpdateUser
		RETURN @New_ID
	END
	ELSE
	BEGIN 
		ROLLBACK TRANSACTION UpdateUser
		RETURN -1
	END
END
ELSE
BEGIN
	IF (SELECT Count(UserID) FROM users WHERE UserID = @UserId) > 0 
	BEGIN 
		UPDATE Users SET UserName=@UserName, pass=@UserPass, ReadRate=@UserReadRate WHERE UserID = @UserId
		SET @err_status = @@ERROR                 
		IF (@err_status <> 0)
		BEGIN 
			ROLLBACK TRANSACTION UpdateUser
			RETURN -1
		END
		ELSE	
		BEGIN
			COMMIT TRANSACTION UpdateUser
			RETURN @UserId
		END
	END
END
ROLLBACK TRANSACTION UpdateUser
RETURN -1

GO


GO
-- Create Procedure [dbo].[pMedia_FilesUpdate]
Print 'Create Procedure [dbo].[pMedia_FilesUpdate]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[pMedia_FilesUpdate]
	-- Add the parameters for the stored procedure here
	@FileGuid nvarchar(255),
	@BytesWrite bigint,	             
    @EndDate  datetime        
                    
                   
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @PreWrite bigint
	DECLARE @ready bit
	DECLARE @Size bigint
	DECLARE @FolderGuid nvarchar(255)
	
	SET @ready=0
	SELECT @PreWrite=BytesWrite, @Size=Size , @FolderGuid=FolderGuid  FROM dbo.tMedia_Files WHERE FileGuid=@FileGuid
	
	if(@PreWrite+@BytesWrite)=@Size
	BEGIN
		SET @ready=1
	END
	
    UPDATE dbo.tMedia_Files
		SET BytesWrite=@PreWrite+@BytesWrite, EndDate=@EndDate, Ready=@ready
    WHERE FileGuid=@FileGuid
    
    DECLARE @count int
    DECLARE @count1 int
    
  
    SELECT @count=COUNT(Id) FROM dbo.tMedia_Files WHERE Ready=1 AND FolderGuid=@FolderGuid
	SELECT @count1=iFilesCount FROM dbo.tMedia_Folders WHERE FolderGuid=@FolderGuid
	IF @count=@count1
	BEGIN
		UPDATE dbo.tMedia_Folders SET Ready=1 WHERE FolderGuid=@FolderGuid
	END
	
	
END
GO


GO
-- Create Procedure [dbo].[pMedia_FoldersAdd]
Print 'Create Procedure [dbo].[pMedia_FoldersAdd]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[pMedia_FoldersAdd]
	
	@sFolderGuid nvarchar(255) ,
	@bReady bit,
	@sPath nvarchar(255) ,
	@iFilesCount int 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @FolderId int
	SELECT @FolderId =COUNT(id) FROM dbo.tMedia_Folders WHERE FolderGuid=@sFolderGuid
	if @FolderId =0
	BEGIN
		-- Insert statements for procedure here
		INSERT INTO dbo.tMedia_Folders (FolderGuid,Ready, sPath,iFilesCount )
		VALUES(@sFolderGuid,@bReady, @sPath,@iFilesCount)
	END 
END
GO


GO
-- Create Procedure [dbo].[pMedia_ThumbnailInsertFromImage]
Print 'Create Procedure [dbo].[pMedia_ThumbnailInsertFromImage]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE dbo.pMedia_ThumbnailInsertFromImage
	-- Add the parameters for the stored procedure here
	@FileGuid nvarchar(255),
	@Img image,
	@Th1 image,
	@th2 image
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

   DECLARE @Count int
   SELECT @Count=COUNT(id) FROM dbo.tMedia_Thumbnails WHERE FileGuid=@FileGuid
   
   INSERT INTO dbo.tMedia_Thumbnails
   ( FileGuid, DateAdd,Number ,[image],size640, size32 )
   VALUES
   (@FileGuid, GETDATE(), @Count,@Img,@Th1, @th2)
END
GO


GO
-- Create Procedure [dbo].[AddToArchNewsFromNF1]
Print 'Create Procedure [dbo].[AddToArchNewsFromNF1]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO

CREATE proc dbo.AddToArchNewsFromNF1
@id bigint,
@name nvarchar(255),
@editor varchar(255),
@date nvarchar(255),
@hrono bigint,
@description nvarchar(255)
as

Declare @userid int
Select @userid=userid from users where username like @editor
if( @userid is  NULL)
begin
	Set @userid=0
end
INSERT INTO ArcNews
                      (id, Name, EditorId, NewsDate, Description, NewsTime, CalcTime, TaskTime, Deleted, ProgramId)
VALUES     (@id,@name,@userid,convert(datetime,@date),@description,@hrono,0,0,0,1)
GO


GO
-- Create Procedure [dbo].[pMedia_FoldersUpdate]
Print 'Create Procedure [dbo].[pMedia_FoldersUpdate]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE dbo.pMedia_FoldersUpdate 
	-- Add the parameters for the stored procedure here
	@FolderGuid nvarchar(255),
	@Ready bit
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	UPDATE dbo.tMedia_Folders SET Ready=@Ready WHERE FolderGuid=@FolderGuid
END
GO


GO
-- Create Procedure [dbo].[pMedia_SetEncoderTaskActiveDELETE]
Print 'Create Procedure [dbo].[pMedia_SetEncoderTaskActiveDELETE]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE dbo.pMedia_SetEncoderTaskActiveDELETE
	-- Add the parameters for the stored procedure here
	@TaskId int,
	@EncoderGuid nvarchar(255)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @ErrorCount int
	SELECT @ErrorCount=ErrorCount FROM dbo.tMedia_EncoderTasks WHERE id=@TaskId
	UPDATE dbo.tMedia_EncoderTasks SET IsActive=1, DateLastStart=GETDATE(), EncoderGuid=@EncoderGuid WHERE id=@TaskId
END
GO


GO
-- Create Procedure [dbo].[pWeb_First_UpdateBlockLooking]
Print 'Create Procedure [dbo].[pWeb_First_UpdateBlockLooking]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE dbo.pWeb_First_UpdateBlockLooking
	@UserId int,
	@BlockID bigint
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    IF ((SELECT COUNT (ID) FROM dbo.Locking WHERE UserId=@UserId AND BlockId=@BlockID)>0)
    BEGIN
	 UPDATE dbo.Locking SET time=GETDATE()WHERE BlockId=@BlockID
    END
    ELSE
    BEGIN
		INSERT INTO dbo.Locking(UserId,BlockId, time,UserName )
		VALUES (@UserId, @BlockID, GETDATE(), (SELECT UserName FROM Users WHERE UserID=@UserId))
    END
END
GO


GO
-- Create Procedure [dbo].[pWEB_DeleteTempLink]
Print 'Create Procedure [dbo].[pWEB_DeleteTempLink]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE dbo.pWEB_DeleteTempLink 
	-- Add the parameters for the stored procedure here
	@BlockId bigint
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	Update dbo.tWeb_TempLink SET Deleted=1 WHERE BlockId=@BlockId
END
GO


GO
-- Create Procedure [dbo].[pWeb_ChekUserCookie]
Print 'Create Procedure [dbo].[pWeb_ChekUserCookie]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE dbo.pWeb_ChekUserCookie 
	@Coockie int
	AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @USERID int
	DECLARE @Timediff int
	
SELECT @USERID=UserId,@Timediff=DATEDIFF(SECOND,  LastTime,GETDATE()) FROM dbo.tWeb_SessionGuid WHERE Cookie=@Coockie 
    IF (@USERID = NULL)
    BEGIN
		return -1;
    END
    IF (@Timediff = NULL)
    BEGIN
		return -1;
    END
    IF (@Timediff >60)
    BEGIN
    DELETE FROM tWeb_SessionGuid WHERE UserId=@USERID
		return -1;
    END
    UPDATE tWeb_SessionGuid SET LastTime=GETDATE() WHERE UserId=@USERID
    
    RETURN @USERID
    
    
END
GO


GO
-- Create Procedure [dbo].[pWeb_ExtListAdd]
Print 'Create Procedure [dbo].[pWeb_ExtListAdd]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE dbo.pWeb_ExtListAdd
	-- Add the parameters for the stored procedure here
	@BlockId bigint
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	INSERT INTO dbo.tWeb_TempLink (BlockId,UserId ,GrantDate,IsExpirience,ExpirienceDate,Deleted,URL )
	VALUES(@BlockId,0,GETDATE(),1,GETDATE(),1,'');
END
GO


GO
-- Create Procedure [dbo].[pWeb_ExtLinkUpdate]
Print 'Create Procedure [dbo].[pWeb_ExtLinkUpdate]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE dbo.pWeb_ExtLinkUpdate
	-- Add the parameters for the stored procedure here
	@BlockId bigint,
	@UserId int,
	@Expr bit,
	@ExprDate Date,
	@url nvarchar(20),
	@IsCommentable bit
	AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	UPDATE dbo.tWeb_TempLink SET
	 UserId=@UserId,GrantDate=GETDATE(),IsExpirience=@Expr,
	ExpirienceDate=@ExprDate, Deleted=0 , URL=@URL, IsCommentable=@IsCommentable
	WHERE BlockId=@BlockId
END
GO


GO
-- Create Procedure [dbo].[pMedia_SetEncoderTaskUnActiveDELETE]
Print 'Create Procedure [dbo].[pMedia_SetEncoderTaskUnActiveDELETE]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
Create PROCEDURE [dbo].[pMedia_SetEncoderTaskUnActiveDELETE]
	-- Add the parameters for the stored procedure here
	
	@EncoderGuid nvarchar(255)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	UPDATE dbo.tMedia_EncoderTasks SET IsActive=0,  EncoderGuid=''  WHERE EncoderGuid=@EncoderGuid
END
GO


GO
-- Create Procedure [dbo].[pWeb_CheckUserActive]
Print 'Create Procedure [dbo].[pWeb_CheckUserActive]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[pWeb_CheckUserActive]
	-- Add the parameters for the stored procedure here
	@UserId int
AS
BEGIN
	DECLARE @diff int
SELECT @diff=DATEDIFF(SECOND,  Last_Time,GETDATE()) FROM Users WHERE UserId=@UserId
DECLARE @difmax int
SELECT @difmax=val FROM dbo.Timeouts WHERE id=2
IF (@diff>@difmax)
BEGIN
	UPDATE dbo.USERS SET Active=0 WHERE UserID=@UserId
	DELETE FROM dbo.tWeb_SessionGuid WHERE UserID=@UserId
END
DECLARE @Active bit
SELECT @Active=Active FROM USERS WHERE UserID=@UserId
RETURN @Active

END
GO


GO
-- Create Procedure [dbo].[spa_UpdateTag]
Print 'Create Procedure [dbo].[spa_UpdateTag]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO


----------------------------------------------
----------------------------------------------
CREATE PROCEDURE [dbo].[spa_UpdateTag]
@TagID int,
@TagName  nvarchar(255),
@TagDescription nvarchar(255)

AS

-- NFAdmin
-- инсертит или апдейтит табличку тагов
-- входные параметры - новые значения полей, при этом если @TagID = -1 то это инсерт
-- выходной параметр TagID - норма, -1 - ошибка

DECLARE @err_status int
DECLARE @New_ID int

BEGIN TRANSACTION UpdateTag
IF @TagID = -1
BEGIN
	INSERT INTO BlockEditTemplates  ([Name], [Description]) VALUES ( @TagName, @TagDescription)
	SET @err_status = @@ERROR                 
	IF (@err_status <> 0)
	BEGIN 
		ROLLBACK TRANSACTION UpdateTag
		RETURN -1
	END
	SET @New_ID = @@IDENTITY
	IF @New_ID > 0
	BEGIN
		COMMIT TRANSACTION UpdateTag
		RETURN @New_ID
	END
	ELSE
	BEGIN 
		ROLLBACK TRANSACTION UpdateTag
		RETURN -1
	END
END
ELSE
BEGIN
	IF (SELECT Count([ID]) FROM BlockEditTemplates WHERE [ID] = @TagID) > 0 
	BEGIN 
		UPDATE BlockEditTemplates SET [Name]=@TagName, [Description]=@TagDescription  WHERE [ID] =  @TagID
		SET @err_status = @@ERROR                 
		IF (@err_status <> 0)
		BEGIN 
			ROLLBACK TRANSACTION UpdateTag
			RETURN -1
		END
		ELSE	
		BEGIN
			COMMIT TRANSACTION UpdateTag
			RETURN @TagID
		END
	END
END
ROLLBACK TRANSACTION UpdateTag
RETURN -1

GO


GO
-- Create Procedure [dbo].[spa_UpdateProgram]
Print 'Create Procedure [dbo].[spa_UpdateProgram]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO


----------------------------------------------
----------------------------------------------
CREATE PROCEDURE [dbo].[spa_UpdateProgram]
@ProgramId  int,
@ProgramName  nvarchar(255),
@rustv bit

AS

-- NFAdmin
-- инсертит или апдейтит табличку программ
-- входные параметры - новые значения полей, при этом если @ProgramId = -1 то это инсерт
-- выходной параметр ProgramId - норма, -1 - ошибка

DECLARE @err_status int
DECLARE @New_ID int

BEGIN TRANSACTION UpdateProgram
IF @ProgramId = -1
BEGIN
	INSERT INTO Programs  ([Name], rustv) values ( @ProgramName, @rustv)
	SET @err_status = @@ERROR                 
	IF (@err_status <> 0)
	BEGIN 
		ROLLBACK TRANSACTION UpdateProgram
		RETURN -1
	END
	SET @New_ID = @@IDENTITY
	IF @New_ID > 0
	BEGIN
		COMMIT TRANSACTION UpdateProgram
		RETURN @New_ID
	END
	ELSE
	BEGIN 
		ROLLBACK TRANSACTION UpdateProgram
		RETURN -1
	END
END
ELSE
BEGIN
	IF (SELECT Count(@ProgramId) from Programs where [ID] = @ProgramId) > 0 
	BEGIN 
		UPDATE Programs set [Name]=@ProgramName, rustv=@rustv WHERE [ID] = @ProgramId
		SET @err_status = @@ERROR                 
		IF (@err_status <> 0)
		BEGIN 
			ROLLBACK TRANSACTION UpdateProgram
			RETURN -1
		END
		ELSE	
		BEGIN
			COMMIT TRANSACTION UpdateProgram
			RETURN @ProgramId
		END
	END
END
ROLLBACK TRANSACTION UpdateProgram
RETURN -1

GO


GO
-- Create Procedure [dbo].[pWeb_log]
Print 'Create Procedure [dbo].[pWeb_log]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE dbo.pWeb_log 
	-- Add the parameters for the stored procedure here
	@userId int,
	@sect int, -- 0 - News 2 - Archive
	@itemId bigint,
	@event int --- 3 del news 4 del block
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	INSERT INTO log( Userid, ComputerName , ItemID, Sect, EventDate, Event)
	values(@userId, 'NF WEB', @itemId, @sect, GETDATE(),@event)
END
GO


GO
-- Create Procedure [dbo].[pWeb_ReplyMessage]
Print 'Create Procedure [dbo].[pWeb_ReplyMessage]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE dbo.pWeb_ReplyMessage
	-- Add the parameters for the stored procedure here
	@FromUserId int,
	@MessageId int,
	@Text text
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
DECLARE @ToUserId int

DECLARE @textlen bigint 
 SELECT @textlen= DATALENGTH(@Text)
 IF @textlen>0
 BEGIN
	 SELECT @ToUserId=[from] FROM dbo.Messages WHERE ID=@MessageId
	 INSERT INTO dbo.Messages([FROM], [to], text, [data]) VALUES
	 (@FromUserId,@ToUserId, @Text, GETDATE())
 END
 DELETE FROM dbo.Messages WHERE ID=@MessageId

END
GO


GO
-- Create Procedure [dbo].[pWeb_SendMessage]
Print 'Create Procedure [dbo].[pWeb_SendMessage]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE dbo.pWeb_SendMessage
	
	@UserFrom int,
	@UserTo int,
	@text text
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	INSERT INTO Messages([from],[to],[text],data) 
	VALUES (@UserFrom,@UserTo,@text, GETDATE());
END
GO


GO
-- Create Procedure [dbo].[pWeb_StateSave]
Print 'Create Procedure [dbo].[pWeb_StateSave]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE dbo.pWeb_StateSave
	-- Add the parameters for the stored procedure here
	@StateId int,
	@Data image
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	UPDATE dbo.tWeb_SavedStates SET Data=@Data WHERE ID=@StateId
END
GO


GO
-- Create Procedure [dbo].[pWeb_UnlookBlock]
Print 'Create Procedure [dbo].[pWeb_UnlookBlock]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[pWeb_UnlookBlock]
	@CookieId int
AS
BEGIN

	DELETE FROM dbo.Locking WHERE UserId IN (SELECT UserId FROM dbo.tWeb_SessionGuid WHERE Cookie=@CookieId)
END
GO


GO
-- Create Procedure [dbo].[pWeb_UnlookBlockFromUser]
Print 'Create Procedure [dbo].[pWeb_UnlookBlockFromUser]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[pWeb_UnlookBlockFromUser]
	@UserId int
AS
BEGIN

	DELETE FROM dbo.Locking WHERE UserId=@UserId
END
GO


GO
-- Create Procedure [dbo].[pWeb_UpdateLookingFromCookie]
Print 'Create Procedure [dbo].[pWeb_UpdateLookingFromCookie]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE dbo.pWeb_UpdateLookingFromCookie
	-- Add the parameters for the stored procedure here
	@CookieId int,
	@BlockId Bigint
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    DECLARE @UserId int
	SELECT @UserId=UserID FROM dbo.tWeb_SessionGuid where Cookie=@CookieId
	IF (@UserId IS NOT NULL)
	BEGIN
	
	UPDATE dbo.tWeb_SessionGuid SET LastTime=GETDATE() WHERE Cookie=@CookieId
	IF ((SELECT COUNT (ID) FROM dbo.Locking WHERE UserId=@UserId AND BlockId=@BlockID)>0)
    BEGIN
	 UPDATE dbo.Locking SET time=GETDATE()WHERE BlockId=@BlockID
    END
    ELSE
    BEGIN
		INSERT INTO dbo.Locking(UserId,BlockId, time,UserName )
		VALUES (@UserId, @BlockID, GETDATE(), (SELECT UserName FROM Users WHERE UserID=@UserId))
    END
	
	END
	
END
GO


GO
-- Create Procedure [dbo].[pWeb_UpdateLookingFromUser]
Print 'Create Procedure [dbo].[pWeb_UpdateLookingFromUser]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[pWeb_UpdateLookingFromUser]
	-- Add the parameters for the stored procedure here
	@UserId int,
	@BlockId Bigint
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	IF ((SELECT COUNT (ID) FROM dbo.Locking WHERE UserId=@UserId AND BlockId=@BlockID)>0)
    BEGIN
	 UPDATE dbo.Locking SET time=GETDATE()WHERE BlockId=@BlockID
    END
    ELSE
    BEGIN
		INSERT INTO dbo.Locking(UserId,BlockId, time,UserName )
		VALUES (@UserId, @BlockID, GETDATE(), (SELECT UserName FROM Users WHERE UserID=@UserId))
    END
	
	
	
END
GO


GO
-- Create Procedure [dbo].[pWEB_UpdateUserCoockie]
Print 'Create Procedure [dbo].[pWEB_UpdateUserCoockie]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE dbo.pWEB_UpdateUserCoockie 
	-- Add the parameters for the stored procedure here
	@Cookie int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	UPDATE dbo.tWeb_SessionGuid SET LastTime=GETDATE() WHERE Cookie=@Cookie
	DECLARE @RET int
	SELECT @RET=UserId FROM tWeb_SessionGuid  WHERE Cookie=@Cookie
	RETURN @RET
END
GO


GO
-- Create Procedure [dbo].[sp_CheckUserTimeout]
Print 'Create Procedure [dbo].[sp_CheckUserTimeout]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO


----------------------------------------------
----------------------------------------------
CREATE PROCEDURE [dbo].[sp_CheckUserTimeout]
AS

-- check_user_timeout

DECLARE @user_timeout int
DECLARE @lock_id int
DECLARE @lock_time datetime
DECLARE @a bit
DECLARE @err int
DECLARE @ch int
DECLARE @err_status int

SELECT top 1 @user_timeout=val FROM timeouts WHERE [id]=2

SET @err = 1
SET @ch = 1

DECLARE st cursor FOR SELECT userid,last_time,active FROM users
OPEN st
FETCH NEXT FROM st INTO @lock_id,@lock_time,@a
WHILE @@fetch_status=0
BEGIN      
	IF (getdate() >=  DATEADD(second, @user_timeout, @lock_time)) and (@a = 1)
	BEGIN          
		UPDATE users SET active=0 WHERE userid = @lock_id
		SET @err_status = @@ERROR
		IF @err_status <> 0 SET @err=@err+1
		SET @ch=@ch+1
	END 
	FETCH NEXT FROM st INTO @lock_id,@lock_time,@a
END
CLOSE st
DEALLOCATE st

IF (@ch = @err) and (@err > 1) RETURN @err

DELETE FROM Locking where userid in (select userid from users where active=0)
SET @err_status = @@ERROR
IF @err_status <> 0 RETURN 1

IF @err > 1 RETURN @err

RETURN 0

GO


GO
-- Create Procedure [dbo].[pMedia_ChunkAdd]
Print 'Create Procedure [dbo].[pMedia_ChunkAdd]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE dbo.pMedia_ChunkAdd 
	@BytesStart bigint,
	@BytesEnd bigint,
	@BytesWrite bigint, 
	@FileGuid  nvarchar(255)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	INSERT INTO dbo.tMedia_Chunks 
	(BytesStart,BytesEnd,BytesWrite, FileGuid  )
	 VALUES
	 (@BytesStart,@BytesEnd,@BytesWrite, @FileGuid  )
	 
END
GO


GO
-- Create Procedure [dbo].[pMedia_EncoderSetTaskActive]
Print 'Create Procedure [dbo].[pMedia_EncoderSetTaskActive]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[pMedia_EncoderSetTaskActive]
	-- Add the parameters for the stored procedure here
	@TaskId int,
	@EncoderGuid nvarchar(255)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @ErrorCount int
	SELECT @ErrorCount=ErrorCount+1 FROM dbo.tMedia_EncoderTasks WHERE id=@TaskId
	
	UPDATE dbo.tMedia_EncoderTasks SET ErrorCount=@ErrorCount, IsActive=1, DateLastStart=GETDATE(), EncoderGuid=@EncoderGuid WHERE id=@TaskId

	UPDATE dbo.tMedia_EncoderTasks SET  IsActive=1 WHERE IsComplite=0 AND IsActive=1 AND((DateLastEnd IS NULL) OR (DateLastEnd<DateLastStart)) AND DateLastStart > DATEADD(hour, 1,GetDate() )

END
GO


GO
-- Create Procedure [dbo].[pMedia_EncoderSetTaskDisActive]
Print 'Create Procedure [dbo].[pMedia_EncoderSetTaskDisActive]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[pMedia_EncoderSetTaskDisActive]
	-- Add the parameters for the stored procedure here
	@EncoderGuid nvarchar(255)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	UPDATE dbo.tMedia_EncoderTasks SET IsActive=0,  EncoderGuid=''  WHERE EncoderGuid=@EncoderGuid

END
GO


GO
-- Create Procedure [dbo].[pMedia_EncoderSetTaskError]
Print 'Create Procedure [dbo].[pMedia_EncoderSetTaskError]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[pMedia_EncoderSetTaskError]
	-- Add the parameters for the stored procedure here
	@EncoderGuid nvarchar(255)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	UPDATE dbo.tMedia_EncoderTasks SET  IsActive=0, IsComplite=0, EncoderGuid='' WHERE EncoderGuid=@EncoderGuid

END
GO


GO
-- Create Procedure [dbo].[pMedia_FilesAdd]
Print 'Create Procedure [dbo].[pMedia_FilesAdd]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[pMedia_FilesAdd]
	-- Add the parameters for the stored procedure here
	@FileGuid nvarchar(255),
	@FolderGuid nvarchar(255),
	@FileName nvarchar(255),
	@Ready bit,
	@NumberInFolder int,
    @Size bigint,          
    @sSourceIp nvarchar(255),               
    @StartDate  datetime,            
    @BlockType int                  
                   
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	 DECLARE @FileId int
	 SELECT @FileId =COUNT(ID) FROM dbo.tMedia_Files WHERE @FileGuid=dbo.tMedia_Files.FileGuid
	 IF @FileId =0
	 BEGIN
			INSERT INTO dbo.tMedia_Files (FileGuid,FolderGuid ,[FileName],Ready,NumberInFolder,Size,sSourceIp,StartDate,BlockType    )
			VALUES (@FileGuid ,@FolderGuid,@FileName,@Ready,@NumberInFolder,@Size,@sSourceIp,@StartDate,@BlockType)
			IF @BlockType=2
			BEGIN
				INSERT INTO dbo.tMedia_EncoderTasks(FileGuid) VALUES (@FileGuid)
			END
	END
	
	
END
GO


GO
-- Create Procedure [dbo].[pMedia_FilesLrvUpdate]
Print 'Create Procedure [dbo].[pMedia_FilesLrvUpdate]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[pMedia_FilesLrvUpdate] 
	-- Add the parameters for the stored procedure here
	@EncoderGuid nvarchar(255),
	@LrvFileName nvarchar(255),
	@LrvFilePath nvarchar(255),
	@LrvStatus bit,
	@EncoderIsActive bit
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	DECLARE @FileGuid nvarchar(255)
	DECLARE @EncoderTAskId int
	SET NOCOUNT ON;

	DECLARE @id bigint
   
   SELECT @EncoderTAskId=ID, @FileGuid=FileGuid FROM dbo.tMedia_EncoderTasks WHERE EncoderGuid=@EncoderGuid
   
   
   UPDATE dbo.tMedia_Files SET
   LRVFileName=@LrvFileName,
   LRVPath=@LrvFilePath,
   LRVReady=@LrvStatus,
   LRVDateLastUpdate=GETDATE()
   WHERE FileGuid=@FileGuid
   
   UPDATE  dbo.tMedia_EncoderTasks SET IsActive=@EncoderIsActive, DateLastEnd=GETDATE()  WHERE EncoderGuid=@EncoderGuid
   IF @EncoderIsActive=0
   BEGIN
	  UPDATE  dbo.tMedia_EncoderTasks SET EncoderGuid='', IsComplite=1  WHERE EncoderGuid=@EncoderGuid
   END
   
   RETURN @Id
END
GO


GO
-- Create Procedure [dbo].[sp_NFWCleanup]
Print 'Create Procedure [dbo].[sp_NFWCleanup]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO

CREATE PROCEDURE dbo.[sp_NFWCleanup] AS
DECLARE @TaskId int

DECLARE stw cursor FOR SELECT  id  FROM         tCleanUpTasks WHERE Active=1 AND convert(int, LastDateRun)<  convert(int, GetDate())
OPEN stw
FETCH NEXT FROM stw INTO @TaskId
WHILE @@fetch_status=0
BEGIN
	DECLARE @command varchar(8000)
	DECLARE @error int
	SELECT @command=command from tCleanUpTasks WHERE id=@TaskId
	UPDATE tCleanUpTasks SET  LastDateRun=GetDate(), LasrRunStatus=1 WHERE id=@TaskId

	BEGIN TRANSACTION
	exec (@command)
	SET @error=@@ERROR
	IF (@error>1) 
	BEGIN
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
		COMMIT TRANSACTION
	END
	UPDATE tCleanUpTasks SET  LastDateRun=GetDate(), LasrRunStatus=@error WHERE id=@TaskId
	FETCH NEXT FROM stw INTO @TaskId
END
CLOSE stw
DEALLOCATE stw
GO


GO
-- Create Procedure [dbo].[pMedia_ThumbnailInsert]
Print 'Create Procedure [dbo].[pMedia_ThumbnailInsert]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[pMedia_ThumbnailInsert]
	-- Add the parameters for the stored procedure here
	 @EncoderGuid nvarchar(255),
	 @Img image,
	 @number int,
	 @Th1 image,
	 @Th2 image
AS
BEGIN

	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.

	SET NOCOUNT ON;
	
	DECLARE @FileGuid nvarchar(255)
	DECLARE @EncoderTaskId int

	
	SELECT @FileGuid=FileGuid, @EncoderTaskId=id FROM  dbo.tMedia_EncoderTasks WHERE EncoderGuid=@EncoderGuid
	UPDATE dbo.tMedia_EncoderTasks SET IsActive=1
	
	INSERT INTO dbo.tMedia_Thumbnails(FileGuid, Number, [image],size640, size32 )
	VALUES
	(@FileGuid, @number, @Img,@Th1,@Th2 )
	RETURN 1
END
GO


GO
-- Create Procedure [dbo].[sp_SetUserActive]
Print 'Create Procedure [dbo].[sp_SetUserActive]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO


----------------------------------------------
----------------------------------------------
CREATE PROCEDURE [dbo].[sp_SetUserActive]
@UserId bigint
AS

DECLARE @err_status int

IF (SELECT Active FROM users WHERE userid=@UserId) < 1
BEGIN
	UPDATE Users SET Last_time=GetDate(), Active=1 WHERE UserID =@UserId
	SET @err_status = @@ERROR                 
	IF (@err_status <> 0) RETURN 1
END
RETURN 0

GO


GO
-- Create Procedure [dbo].[spa_UpdateBlockType]
Print 'Create Procedure [dbo].[spa_UpdateBlockType]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO


----------------------------------------------
----------------------------------------------
CREATE PROCEDURE [dbo].[spa_UpdateBlockType]
@TypeID int,
@TypeName  nvarchar(255),
@TypeDescription nvarchar(255),
@Autor bit,
@Operator bit,
@Jockey bit

AS

-- NFAdmin
-- инсертит или апдейтит табличку типов блоков
-- входные параметры - новые значения полей, при этом если @TypeID = -1 то это инсерт
-- выходной параметр TypeID - норма, -1 - ошибка

DECLARE @err_status int
DECLARE @New_ID int

BEGIN TRANSACTION UpdateBlockType
IF @TypeID = -1
BEGIN
	INSERT INTO BlockType  (TypeName, [Description], Autor, Operator, Jockey) 
	VALUES ( @TypeName, @TypeDescription, @Autor, @Operator, @Jockey)
	SET @err_status = @@ERROR                 
	IF (@err_status <> 0)
	BEGIN 
		ROLLBACK TRANSACTION UpdateBlockType
		RETURN -1
	END
	SET @New_ID = @@IDENTITY
	IF @New_ID > 0
	BEGIN
		COMMIT TRANSACTION UpdateBlockType
		RETURN @New_ID
	END
	ELSE
	BEGIN 
		ROLLBACK TRANSACTION UpdateBlockType
		RETURN -1
	END
END
ELSE
BEGIN
	IF (SELECT Count([ID]) FROM BlockType  WHERE [ID] = @TypeID) > 0 
	BEGIN 
		UPDATE BlockType set TypeName=@TypeName, [Description]=@TypeDescription, 
					Autor=@Autor, Operator=@Operator, Jockey=@Jockey 
		WHERE [ID] = @TypeID
		SET @err_status = @@ERROR                 
		IF (@err_status <> 0)
		BEGIN 
			ROLLBACK TRANSACTION UpdateBlockType
			RETURN -1
		END
		ELSE	
		BEGIN
			COMMIT TRANSACTION UpdateBlockType
			RETURN @TypeID
		END
	END
END
ROLLBACK TRANSACTION UpdateBlockType
RETURN -1

GO


GO
-- Create Procedure [dbo].[spa_UpdateFlag]
Print 'Create Procedure [dbo].[spa_UpdateFlag]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO


----------------------------------------------
----------------------------------------------
CREATE PROCEDURE [dbo].[spa_UpdateFlag]
@FlagID int,
@FlagName  nvarchar(255),
@FlagDescription nvarchar(255)

AS

-- NFAdmin
-- инсертит или апдейтит табличку флагов
-- входные параметры - новые значения полей, при этом если @FlagID = -1 то это инсерт
-- выходной параметр FlagID - норма, -1 - ошибка

DECLARE @err_status int
DECLARE @New_ID int

BEGIN TRANSACTION UpdateFlag
IF @FlagID = -1
BEGIN
	INSERT INTO Flags  ([Name], [Description]) values ( @FlagName, @FlagDescription)
	SET @err_status = @@ERROR                 
	IF (@err_status <> 0)
	BEGIN 
		ROLLBACK TRANSACTION UpdateFlag
		RETURN -1
	END
	SET @New_ID = @@IDENTITY
	IF @New_ID > 0
	BEGIN
		COMMIT TRANSACTION UpdateFlag
		RETURN @New_ID
	END
	ELSE
	BEGIN 
		ROLLBACK TRANSACTION UpdateFlag
		RETURN -1
	END
END
ELSE
BEGIN
	IF (SELECT Count([ID]) from Flags where [ID] = @FlagID) > 0 
	BEGIN 
	UPDATE Flags set [Name]=@FlagName, [Description]=@FlagDescription  WHERE [ID] =  @FlagID
		SET @err_status = @@ERROR                 
		IF (@err_status <> 0)
		BEGIN 
			ROLLBACK TRANSACTION UpdateFlag
			RETURN -1
		END
		ELSE	
		BEGIN
			COMMIT TRANSACTION UpdateFlag
			RETURN @FlagID
		END
	END
END
ROLLBACK TRANSACTION UpdateFlag
RETURN -1

GO


GO
-- Create Procedure [dbo].[spa_UpdateRole]
Print 'Create Procedure [dbo].[spa_UpdateRole]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO


----------------------------------------------
----------------------------------------------
CREATE PROCEDURE [dbo].[spa_UpdateRole]
@RoleID int,
@RoleName  nvarchar(255),
@RoleDescription nvarchar(255)
AS

-- NFAdmin
-- инсертит или апдейтит табличку ролей
-- входные параметры - новые значения полей, при этом если @RoleID = -1 то это инсерт
-- выходной параметр RoleID - норма, -1 - ошибка

DECLARE @err_status int
DECLARE @New_ID int

BEGIN TRANSACTION UpdateRole
IF @RoleID = -1
BEGIN
	INSERT INTO URoles  (URoleName, URoleDescription) values ( @RoleName, @RoleDescription)
	SET @err_status = @@ERROR                 
	IF (@err_status <> 0)
	BEGIN 
		ROLLBACK TRANSACTION UpdateRole
		RETURN -1
	END
	SET @New_ID = @@IDENTITY
	IF @New_ID > 0
	BEGIN
		COMMIT TRANSACTION UpdateRole
		RETURN @New_ID
	END
	ELSE
	BEGIN 
		ROLLBACK TRANSACTION UpdateRole
		RETURN -1
	END
END
ELSE
BEGIN
	IF (SELECT Count(URoleID) from URoles where URoleID = @RoleID) > 0 
	BEGIN 
	UPDATE URoles SET URoleName=@RoleName, URoleDescription=@RoleDescription  WHERE URoleID =  @RoleID
		SET @err_status = @@ERROR                 
		IF (@err_status <> 0)
		BEGIN 
			ROLLBACK TRANSACTION UpdateRole
			RETURN -1
		END
		ELSE	
		BEGIN
			COMMIT TRANSACTION UpdateRole
			RETURN @RoleID
		END
	END
END
ROLLBACK TRANSACTION UpdateRole
RETURN -1

GO


GO
-- Create Procedure [dbo].[pMedia_SetTaskUploadComplite]
Print 'Create Procedure [dbo].[pMedia_SetTaskUploadComplite]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE dbo.pMedia_SetTaskUploadComplite
	@taskId  int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    UPDATE dbo.tWeb_MediaTask SET DateAddComplite=GETDATE() WHERE ID=@taskId
END
GO


GO
-- Create Table [dbo].[Blocks]
Print 'Create Table [dbo].[Blocks]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[Blocks] (
		[Id]              [bigint] NOT NULL,
		[Name]            [nvarchar](256) NOT NULL,
		[NewsId]          [bigint] NOT NULL,
		[ParentId]        [bigint] NOT NULL,
		[BLockType]       [int] NOT NULL,
		[CreatorId]       [bigint] NOT NULL,
		[OperatorId]      [bigint] NOT NULL,
		[JockeyId]        [bigint] NOT NULL,
		[CutterId]        [int] NOT NULL,
		[BlockTime]       [bigint] NOT NULL,
		[TaskTime]        [bigint] NOT NULL,
		[CalcTime]        [bigint] NOT NULL,
		[BlockText]       [ntext] NOT NULL,
		[Sort]            [int] NOT NULL,
		[Description]     [nvarchar](255) NOT NULL,
		[Ready]           [bit] NOT NULL,
		[Approve]         [bit] NOT NULL,
		[deleted]         [bit] NOT NULL,
		[TextLang1]       [ntext] NOT NULL,
		[TextLang2]       [ntext] NOT NULL,
		[TextLang3]       [ntext] NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[Blocks]
	ADD
	CONSTRAINT [PK_Blocks]
	PRIMARY KEY
	CLUSTERED
	([Id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[Blocks]
	ADD
	CONSTRAINT [DF__Blocks__TextLang__762C88DA]
	DEFAULT ('') FOR [TextLang1]
GO


GO
ALTER TABLE [dbo].[Blocks]
	ADD
	CONSTRAINT [DF__Blocks__TextLang__7720AD13]
	DEFAULT ('') FOR [TextLang2]
GO


GO
ALTER TABLE [dbo].[Blocks]
	ADD
	CONSTRAINT [DF__Blocks__TextLang__7814D14C]
	DEFAULT ('') FOR [TextLang3]
GO


GO
ALTER TABLE [dbo].[Blocks]
	ADD
	CONSTRAINT [DF_Blocks_Approve]
	DEFAULT ((0)) FOR [Approve]
GO


GO
ALTER TABLE [dbo].[Blocks]
	ADD
	CONSTRAINT [DF_Blocks_BlockText]
	DEFAULT ('') FOR [BlockText]
GO


GO
ALTER TABLE [dbo].[Blocks]
	ADD
	CONSTRAINT [DF_Blocks_BlockTime]
	DEFAULT ((0)) FOR [BlockTime]
GO


GO
ALTER TABLE [dbo].[Blocks]
	ADD
	CONSTRAINT [DF_Blocks_BLockType]
	DEFAULT ((0)) FOR [BLockType]
GO


GO
ALTER TABLE [dbo].[Blocks]
	ADD
	CONSTRAINT [DF_Blocks_CalcTime]
	DEFAULT ((0)) FOR [CalcTime]
GO


GO
ALTER TABLE [dbo].[Blocks]
	ADD
	CONSTRAINT [DF_Blocks_CreatorId]
	DEFAULT ((0)) FOR [CreatorId]
GO


GO
ALTER TABLE [dbo].[Blocks]
	ADD
	CONSTRAINT [DF_Blocks_CutterId]
	DEFAULT ((0)) FOR [CutterId]
GO


GO
ALTER TABLE [dbo].[Blocks]
	ADD
	CONSTRAINT [DF_Blocks_deleted]
	DEFAULT ((0)) FOR [deleted]
GO


GO
ALTER TABLE [dbo].[Blocks]
	ADD
	CONSTRAINT [DF_Blocks_Description]
	DEFAULT ('') FOR [Description]
GO


GO
ALTER TABLE [dbo].[Blocks]
	ADD
	CONSTRAINT [DF_Blocks_JockeyId]
	DEFAULT ((0)) FOR [JockeyId]
GO


GO
ALTER TABLE [dbo].[Blocks]
	ADD
	CONSTRAINT [DF_Blocks_Name]
	DEFAULT ('') FOR [Name]
GO


GO
ALTER TABLE [dbo].[Blocks]
	ADD
	CONSTRAINT [DF_Blocks_NewsId]
	DEFAULT ((0)) FOR [NewsId]
GO


GO
ALTER TABLE [dbo].[Blocks]
	ADD
	CONSTRAINT [DF_Blocks_OperatorId]
	DEFAULT ((0)) FOR [OperatorId]
GO


GO
ALTER TABLE [dbo].[Blocks]
	ADD
	CONSTRAINT [DF_Blocks_ParentId]
	DEFAULT ((0)) FOR [ParentId]
GO


GO
ALTER TABLE [dbo].[Blocks]
	ADD
	CONSTRAINT [DF_Blocks_Ready]
	DEFAULT ((0)) FOR [Ready]
GO


GO
ALTER TABLE [dbo].[Blocks]
	ADD
	CONSTRAINT [DF_Blocks_Sort]
	DEFAULT ((0)) FOR [Sort]
GO


GO
ALTER TABLE [dbo].[Blocks]
	ADD
	CONSTRAINT [DF_Blocks_TaskTime]
	DEFAULT ((0)) FOR [TaskTime]
GO


GO
ALTER TABLE [dbo].[Blocks] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create View [dbo].[vExcangeBlock_for_list]
Print 'Create View [dbo].[vExcangeBlock_for_list]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

CREATE VIEW dbo.vExcangeBlock_for_list
AS
SELECT     TOP 100 PERCENT dbo.ExcangeBlocks.Id, dbo.ExcangeBlocks.Name, dbo.GetTypeName(dbo.BlockType.id) AS TypeName, 
                      dbo.ConvertIntToCharTime(dbo.ExcangeBlocks.BlockTime) AS BlockTime, dbo.ConvertIntToCharTime(dbo.ExcangeBlocks.TaskTime) AS TaskTime, 
                      dbo.ConvertIntToCharTime(dbo.ExcangeBlocks.CalcTime) AS CalcTime, dbo.ExcangeBlocks.NewsId, dbo.ExcangeBlocks.ParentId, 
                      dbo.ExcangeBlocks.CreatorId, dbo.ExcangeBlocks.Ready, dbo.ExcangeBlocks.Approve, dbo.ExcangeBlocks.Sort
FROM         dbo.ExcangeBlocks LEFT OUTER JOIN
                      dbo.BlockType ON dbo.ExcangeBlocks.BLockType = dbo.BlockType.id
WHERE     (dbo.ExcangeBlocks.Deleted = 0)

GO


GO
-- Create View [dbo].[va_News]
Print 'Create View [dbo].[va_News]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO



CREATE VIEW dbo.va_News
AS
SELECT     News.id, CAST(News.id AS varchar(50)) AS NewsId, News.Name AS 
NewsName, Users.UserName AS NewsOwner, CONVERT(varchar,
                      News.NewsDate, 4) + '  ' + CONVERT(varchar, 
News.NewsDate, 8) AS NewsDate, News.NewsTime AS NewsCronoReal,
                      News.CalcTime AS NewsCronoCalk, News.TaskTime AS 
NewsCronoTask, News.Cassete AS NewsSourceLabel,
                      News.Time_Code AS NewsTimeCode, News.Duration AS 
NewsDuration, '--current NFW user--' as CurrUser
FROM         News LEFT OUTER JOIN
                      Users ON News.EditorId = Users.UserID
WHERE     (News.Deleted = 0)


GO


GO
-- Create View [dbo].[vWeb_UserRight]
Print 'Create View [dbo].[vWeb_UserRight]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
CREATE VIEW dbo.vWeb_UserRight
AS
SELECT     TOP (100) PERCENT dbo.Programs.id AS ProgramID, '-' AS ProgramName, dbo.URights.URightID AS RightID, dbo.Users.UserID, '-' AS UserPass, dbo.Users.ReadRate AS UserRate, 
                      dbo.Users.UserName
FROM         dbo.UUserToProgram INNER JOIN
                      dbo.Users ON dbo.UUserToProgram.UserID = dbo.Users.UserID INNER JOIN
                      dbo.URoles ON dbo.UUserToProgram.URoleID = dbo.URoles.URoleID INNER JOIN
                      dbo.URightsToRole ON dbo.URoles.URoleID = dbo.URightsToRole.URoleID INNER JOIN
                      dbo.URights ON dbo.URightsToRole.URightID = dbo.URights.URightID INNER JOIN
                      dbo.Programs ON dbo.UUserToProgram.ProgramID = dbo.Programs.id
WHERE     (dbo.Users.deleted = 0)
GROUP BY dbo.Users.UserID, dbo.Programs.id, dbo.URights.URightID, dbo.Users.UserName, dbo.Users.ReadRate
HAVING      (NOT (dbo.URights.URightID IN (1, 510)))
ORDER BY dbo.Users.UserName, dbo.Users.UserID, ProgramID, RightID
GO


GO
-- Create View [dbo].[vWeb_RssFeed]
Print 'Create View [dbo].[vWeb_RssFeed]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
CREATE VIEW dbo.vWeb_RssFeed
AS
SELECT     TOP (100) PERCENT dbo.tWeb_IncomingRssMessages.id, dbo.tWeb_IncomingRssMessages.exsternalId, dbo.tWeb_IncomingRssMessages.Name, dbo.tWeb_IncomingRssMessages.Lid, 
                      dbo.tWeb_IncomingRssMessages.Date, dbo.tWeb_IncomingRssMessages.SourceId, dbo.tWeb_IncomingRssMessages.Link, dbo.tWeb_IncomingRssMessages.ImgLink, 
                      dbo.tWeb_IncomingRssMessages.GUID, dbo.tWeb_RssSources.Name AS Expr1, dbo.tWeb_RssSources.Active
FROM         dbo.tWeb_IncomingRssMessages INNER JOIN
                      dbo.tWeb_RssSources ON dbo.tWeb_IncomingRssMessages.SourceId = dbo.tWeb_RssSources.id
WHERE     (dbo.tWeb_RssSources.Active = 1)
ORDER BY dbo.tWeb_IncomingRssMessages.Date DESC
GO


GO
-- Create View [dbo].[vWeb_ProgramsFromCookie]
Print 'Create View [dbo].[vWeb_ProgramsFromCookie]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
CREATE VIEW dbo.vWeb_ProgramsFromCookie
AS
SELECT     TOP (100) PERCENT dbo.UUserToProgram.ProgramID, dbo.Users.UserName, dbo.Users.UserID, dbo.tWeb_SessionGuid.Cookie, dbo.Programs.Name
FROM         dbo.Users INNER JOIN
                      dbo.UUserToProgram ON dbo.Users.UserID = dbo.UUserToProgram.UserID INNER JOIN
                      dbo.tWeb_SessionGuid ON dbo.Users.UserID = dbo.tWeb_SessionGuid.UserId INNER JOIN
                      dbo.Programs ON dbo.UUserToProgram.ProgramID = dbo.Programs.id
GROUP BY dbo.Users.UserID, dbo.UUserToProgram.ProgramID, dbo.Users.UserName, dbo.tWeb_SessionGuid.Cookie, dbo.Programs.Name
HAVING      (dbo.UUserToProgram.ProgramID <> 0)
ORDER BY dbo.Users.UserID
GO


GO
-- Create View [dbo].[vWeb_ListUserToLoginMessager]
Print 'Create View [dbo].[vWeb_ListUserToLoginMessager]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
CREATE VIEW dbo.vWeb_ListUserToLoginMessager
AS
SELECT     TOP (100) PERCENT 0 AS ProgramID, '-' AS ProgramName, 0 AS RightID, dbo.Users.UserID, dbo.Users.UserName, '-' AS UserPass, dbo.Users.Active AS UserRate
FROM         dbo.Users INNER JOIN
                      dbo.UUserToProgram ON dbo.Users.UserID = dbo.UUserToProgram.UserID INNER JOIN
                      dbo.URoles ON dbo.UUserToProgram.URoleID = dbo.URoles.URoleID INNER JOIN
                      dbo.URightsToRole ON dbo.URoles.URoleID = dbo.URightsToRole.URoleID INNER JOIN
                      dbo.URights ON dbo.URightsToRole.URightID = dbo.URights.URightID
WHERE     (dbo.URights.URightID = 49) AND (dbo.Users.deleted = 0)
GROUP BY dbo.Users.UserID, dbo.Users.UserName, dbo.Users.Active
ORDER BY dbo.Users.UserName, dbo.Users.UserID
GO


GO
-- Create View [dbo].[vWeb_ArchiveSearch]
Print 'Create View [dbo].[vWeb_ArchiveSearch]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
CREATE VIEW dbo.vWeb_ArchiveSearch
AS
SELECT     TOP (100) PERCENT dbo.ArcNews.id AS NewsId, dbo.ArcNews.Name AS NewsName, dbo.ArcNews.NewsDate, dbo.ArcNews.Description AS NewsDescription, dbo.ArcNews.ProgramId, 
                      dbo.ArchBlocks.Id AS BlockId, dbo.ArchBlocks.CreatorId, dbo.ArchBlocks.BlockText, dbo.ArchBlocks.Description, dbo.ArchBlocks.Name AS BlockName, dbo.ArchBlocks.ParentId, 
                      dbo.ArchBlocks.NewsId AS Expr1
FROM         dbo.ArcNews INNER JOIN
                      dbo.ArchBlocks ON dbo.ArcNews.id = dbo.ArchBlocks.NewsId
WHERE     (dbo.ArcNews.Deleted = 0) AND (dbo.ArchBlocks.ParentId = 0) AND (dbo.ArchBlocks.Deleted = 0)
ORDER BY dbo.ArcNews.NewsDate DESC
GO


GO
-- Create View [dbo].[vWeb_ArchiveMediaForList]
Print 'Create View [dbo].[vWeb_ArchiveMediaForList]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

/****** Object:  View [dbo].[vWeb_MediaForList]    Script Date: 03/17/2017 14:03:11 ******/


CREATE VIEW [dbo].[vWeb_ArchiveMediaForList]
AS
SELECT     TOP (100) PERCENT Id, Name, BLockType, CreatorId, OperatorId, JockeyId, BlockTime, TaskTime, CalcTime, BlockText, Ready, Approve, TextLang1, TextLang2, TextLang3, ParentId, Sort, 
                      Description
FROM         dbo.ArchBlocks
WHERE     (deleted = 0) AND (ParentId > 0)
ORDER BY Description

GO


GO
-- Create View [dbo].[vWeb_ArchiveFindBlocks]
Print 'Create View [dbo].[vWeb_ArchiveFindBlocks]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
CREATE VIEW dbo.vWeb_ArchiveFindBlocks
AS
SELECT     TOP (100) PERCENT dbo.BlockType.TypeName, dbo.fWeb_GetUserName(dbo.ArchBlocks.CreatorId) AS Autor, dbo.ArchBlocks.Id, dbo.ArchBlocks.Name, 
                      dbo.fWeb_GetUserName(dbo.ArchBlocks.OperatorId) AS Expr1, dbo.ArchBlocks.BlockTime, dbo.ArchBlocks.TaskTime, dbo.ArchBlocks.BlockText, dbo.ArchBlocks.Approve, dbo.ArchBlocks.Ready, 
                      dbo.fWeb_GetUserName(dbo.ArchBlocks.OperatorId) AS Operator
FROM         dbo.ArchBlocks INNER JOIN
                      dbo.BlockType ON dbo.ArchBlocks.BLockType = dbo.BlockType.id
WHERE     (dbo.ArchBlocks.ParentId = 0) AND (dbo.ArchBlocks.Deleted = 0)
ORDER BY dbo.ArchBlocks.Sort
GO


GO
-- Create View [dbo].[vUsertoLists]
Print 'Create View [dbo].[vUsertoLists]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO


CREATE VIEW dbo.vUsertoLists
AS
SELECT     TOP 100 PERCENT dbo.Programs.id AS ProgramID, '-' AS ProgramName, dbo.URights.URightID AS RightID, dbo.Users.UserID, dbo.Users.UserName, 
                      '0' AS UserPass, 0 AS UserRate
FROM         dbo.URightsToRole INNER JOIN
                      dbo.URights ON dbo.URightsToRole.URightID = dbo.URights.URightID INNER JOIN
                      dbo.URoles ON dbo.URightsToRole.URoleID = dbo.URoles.URoleID INNER JOIN
                      dbo.UUserToProgram ON dbo.URoles.URoleID = dbo.UUserToProgram.URoleID INNER JOIN
                      dbo.Programs ON dbo.UUserToProgram.ProgramID = dbo.Programs.id INNER JOIN
                      dbo.Users ON dbo.UUserToProgram.UserID = dbo.Users.UserID
WHERE     (dbo.URights.URightID IN (340, 330, 320, 180, 170))
ORDER BY dbo.URights.URightID, dbo.Users.UserName


GO


GO
-- Create View [dbo].[vUsersRightsAdminList]
Print 'Create View [dbo].[vUsersRightsAdminList]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

CREATE VIEW dbo.vUsersRightsAdminList
AS
SELECT     dbo.Users.UserID, dbo.Users.UserName, dbo.Users.pass
FROM         dbo.UUserToProgram INNER JOIN
                      dbo.Users ON dbo.UUserToProgram.UserID = dbo.Users.UserID
WHERE     (dbo.UUserToProgram.URoleID = 1) OR
                      (dbo.UUserToProgram.URoleID = 4)
GROUP BY dbo.Users.UserID, dbo.Users.UserName, dbo.Users.pass

GO


GO
-- Create View [dbo].[vUsersRights]
Print 'Create View [dbo].[vUsersRights]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO


CREATE VIEW dbo.vUsersRights
AS
SELECT     TOP 100 PERCENT dbo.Programs.id AS ProgramID, '-' AS ProgramName, dbo.URights.URightID AS RightID, dbo.Users.UserID, '-' AS UserPass, 
                      0 AS UserRate, dbo.Users.UserName
FROM         dbo.UUserToProgram INNER JOIN
                      dbo.Users ON dbo.UUserToProgram.UserID = dbo.Users.UserID INNER JOIN
                      dbo.URoles ON dbo.UUserToProgram.URoleID = dbo.URoles.URoleID INNER JOIN
                      dbo.URightsToRole ON dbo.URoles.URoleID = dbo.URightsToRole.URoleID INNER JOIN
                      dbo.URights ON dbo.URightsToRole.URightID = dbo.URights.URightID INNER JOIN
                      dbo.Programs ON dbo.UUserToProgram.ProgramID = dbo.Programs.id
GROUP BY dbo.Users.UserID, dbo.Programs.id, dbo.URights.URightID, dbo.Users.UserName
HAVING      (NOT (dbo.URights.URightID IN (1, 510)))
ORDER BY dbo.Users.UserName, dbo.Users.UserID, dbo.Programs.id, dbo.URights.URightID


GO


GO
-- Create View [dbo].[vUsersProgramList]
Print 'Create View [dbo].[vUsersProgramList]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

CREATE VIEW dbo.vUsersProgramList
AS
SELECT     TOP 100 PERCENT dbo.Programs.id AS ProgramID, dbo.Programs.Name AS ProgramName, dbo.Programs.Rustv AS RightID, dbo.Users.UserID, 
                      dbo.Users.UserName, dbo.Programs.Deleted AS UserPass, dbo.Users.ReadRate AS UserRate
FROM         dbo.Users INNER JOIN
                      dbo.UUserToProgram ON dbo.Users.UserID = dbo.UUserToProgram.UserID INNER JOIN
                      dbo.Programs ON dbo.UUserToProgram.ProgramID = dbo.Programs.id INNER JOIN
                      dbo.URoles ON dbo.UUserToProgram.URoleID = dbo.URoles.URoleID
GROUP BY dbo.Users.ReadRate, dbo.Users.UserName, dbo.Users.UserID, dbo.UUserToProgram.ProgramID, dbo.Programs.id, dbo.Programs.Rustv, 
                      dbo.Programs.Name, dbo.Programs.Deleted
HAVING      (dbo.UUserToProgram.ProgramID <> 0)
ORDER BY dbo.Users.UserID, dbo.Users.UserName, dbo.UUserToProgram.ProgramID

GO


GO
-- Create View [dbo].[vUsersMessagerList]
Print 'Create View [dbo].[vUsersMessagerList]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

CREATE VIEW dbo.vUsersMessagerList
AS
SELECT     TOP 100 PERCENT 0 AS ProgramID, '-' AS ProgramName, 0 AS RightID, dbo.Users.UserID, dbo.Users.UserName, '-' AS UserPass, 
                      dbo.Users.Active AS UserRate
FROM         dbo.Users INNER JOIN
                      dbo.UUserToProgram ON dbo.Users.UserID = dbo.UUserToProgram.UserID INNER JOIN
                      dbo.URoles ON dbo.UUserToProgram.URoleID = dbo.URoles.URoleID INNER JOIN
                      dbo.URightsToRole ON dbo.URoles.URoleID = dbo.URightsToRole.URoleID INNER JOIN
                      dbo.URights ON dbo.URightsToRole.URightID = dbo.URights.URightID
WHERE     (dbo.URights.URightID = 50) AND (dbo.Users.deleted = 0)
GROUP BY dbo.Users.UserID, dbo.Users.UserName, dbo.Users.Active
ORDER BY dbo.Users.UserName, dbo.Users.UserID

GO


GO
-- Create View [dbo].[va_FlagsToBlockTypes]
Print 'Create View [dbo].[va_FlagsToBlockTypes]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

CREATE VIEW dbo.va_FlagsToBlockTypes
AS
SELECT     TOP 100 PERCENT dbo.FlagsToBlockTypes.FlagID, dbo.Flags.name AS FlagName, dbo.FlagsToBlockTypes.BlockTypeID, dbo.BlockType.TypeName, 
                      dbo.FlagsToBlockTypes.SortOrder
FROM         dbo.FlagsToBlockTypes INNER JOIN
                      dbo.BlockType ON dbo.FlagsToBlockTypes.BlockTypeID = dbo.BlockType.id INNER JOIN
                      dbo.Flags ON dbo.FlagsToBlockTypes.FlagID = dbo.Flags.id
ORDER BY dbo.FlagsToBlockTypes.BlockTypeID, dbo.FlagsToBlockTypes.SortOrder

GO


GO
-- Create View [dbo].[vUsersLoginListForLenta]
Print 'Create View [dbo].[vUsersLoginListForLenta]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

CREATE VIEW dbo.vUsersLoginListForLenta
AS
/*SELECT     UserID AS ID, UserName AS Name, UserPass AS Pass
FROM         NewsFactory.dbo.vUsersLoginListForLenta*/
SELECT     TOP 100 PERCENT 0 AS ProgramID, '-' AS ProgramName, NewsFactory.dbo.Users.Active AS RightID, NewsFactory.dbo.Users.UserID AS UserID, NewsFactory.dbo.Users.UserName AS UserName, 
                      NewsFactory.dbo.Users.pass  AS UserPass, NewsFactory.dbo.Users.ReadRate AS UserRate
FROM         NewsFactory.dbo.URightsToRole INNER JOIN
                      NewsFactory.dbo.URights ON NewsFactory.dbo.URightsToRole.URightID = NewsFactory.dbo.URights.URightID INNER JOIN
                      NewsFactory.dbo.URoles ON NewsFactory.dbo.URightsToRole.URoleID = NewsFactory.dbo.URoles.URoleID INNER JOIN
                      NewsFactory.dbo.UUserToProgram ON NewsFactory.dbo.URoles.URoleID = NewsFactory.dbo.UUserToProgram.URoleID INNER JOIN
                      NewsFactory.dbo.Users ON NewsFactory.dbo.UUserToProgram.UserID = NewsFactory.dbo.Users.UserID
WHERE     (NewsFactory.dbo.URights.URightID = 43) OR
                      (NewsFactory.dbo.URights.URightID = 44)
GROUP BY NewsFactory.dbo.Users.Active, NewsFactory.dbo.Users.UserID, NewsFactory.dbo.Users.UserName, NewsFactory.dbo.Users.pass, NewsFactory.dbo.Users.ReadRate
ORDER BY NewsFactory.dbo.Users.UserName, NewsFactory.dbo.Users.UserID



GO


GO
-- Create View [dbo].[vUsersLoginList]
Print 'Create View [dbo].[vUsersLoginList]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
CREATE VIEW dbo.vUsersLoginList
AS
SELECT     TOP (100) PERCENT 0 AS ProgramID, '-' AS ProgramName, dbo.Users.Active AS RightID, dbo.Users.UserID, dbo.Users.UserName, dbo.Users.pass AS UserPass, 
                      dbo.Users.ReadRate AS UserRate
FROM         dbo.URightsToRole INNER JOIN
                      dbo.URights ON dbo.URightsToRole.URightID = dbo.URights.URightID INNER JOIN
                      dbo.URoles ON dbo.URightsToRole.URoleID = dbo.URoles.URoleID INNER JOIN
                      dbo.UUserToProgram ON dbo.URoles.URoleID = dbo.UUserToProgram.URoleID INNER JOIN
                      dbo.Users ON dbo.UUserToProgram.UserID = dbo.Users.UserID
WHERE     (dbo.URights.URightID = 1) AND (dbo.Users.deleted = 0)
GROUP BY dbo.Users.Active, dbo.Users.UserID, dbo.Users.UserName, dbo.Users.pass, dbo.Users.ReadRate
ORDER BY dbo.Users.UserName, dbo.Users.UserID
GO


GO
-- Create View [dbo].[vUsersListAll]
Print 'Create View [dbo].[vUsersListAll]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

CREATE VIEW dbo.vUsersListAll
AS
SELECT     TOP 100 PERCENT '-' AS ProgramID, '-' AS ProgramName, dbo.URights.URightID AS RightID, dbo.Users.UserID, dbo.Users.UserName, 
                      '0' AS UserPass, 0 AS UserRate
FROM         dbo.URightsToRole INNER JOIN
                      dbo.URights ON dbo.URightsToRole.URightID = dbo.URights.URightID INNER JOIN
                      dbo.URoles ON dbo.URightsToRole.URoleID = dbo.URoles.URoleID INNER JOIN
                      dbo.UUserToProgram ON dbo.URoles.URoleID = dbo.UUserToProgram.URoleID INNER JOIN
                      dbo.Programs ON dbo.UUserToProgram.ProgramID = dbo.Programs.id INNER JOIN
                      dbo.Users ON dbo.UUserToProgram.UserID = dbo.Users.UserID
GROUP BY dbo.URights.URightID, dbo.Users.UserID, dbo.Users.UserName
HAVING      (dbo.URights.URightID IN (340, 330, 320, 180, 170))
ORDER BY dbo.Users.UserName

GO


GO
-- Create View [dbo].[vLite_ProgramsFromUser]
Print 'Create View [dbo].[vLite_ProgramsFromUser]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
CREATE VIEW dbo.vLite_ProgramsFromUser
AS
SELECT     TOP (100) PERCENT dbo.UUserToProgram.ProgramID, dbo.Users.UserName, dbo.Users.UserID, dbo.Programs.Name
FROM         dbo.Users INNER JOIN
                      dbo.UUserToProgram ON dbo.Users.UserID = dbo.UUserToProgram.UserID INNER JOIN
                      dbo.Programs ON dbo.UUserToProgram.ProgramID = dbo.Programs.id
GROUP BY dbo.Users.UserID, dbo.UUserToProgram.ProgramID, dbo.Users.UserName, dbo.Programs.Name
HAVING      (dbo.UUserToProgram.ProgramID <> 0)
ORDER BY dbo.Users.UserID
GO


GO
-- Create View [dbo].[vLite_NewsToList]
Print 'Create View [dbo].[vLite_NewsToList]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
CREATE VIEW dbo.vLite_NewsToList
AS
SELECT     id, Name, EditorId, NewsDate, Description, NewsTime, CalcTime, TaskTime, ProgramId, Cassete, Time_Code, Duration
FROM         dbo.News
WHERE     (Deleted = 0)
GO


GO
-- Create View [dbo].[vFlagToBlockType]
Print 'Create View [dbo].[vFlagToBlockType]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

CREATE VIEW dbo.vFlagToBlockType
AS
SELECT     TOP 100 PERCENT dbo.Flags.name, dbo.Flags.id, dbo.FlagsToBlockTypes.BlockTypeID AS Block_type
FROM         dbo.Flags INNER JOIN
                      dbo.FlagsToBlockTypes ON dbo.Flags.id = dbo.FlagsToBlockTypes.FlagID
ORDER BY dbo.FlagsToBlockTypes.SortOrder

GO


GO
-- Create View [dbo].[vArchNewsBlock]
Print 'Create View [dbo].[vArchNewsBlock]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

CREATE VIEW dbo.vArchNewsBlock
AS
SELECT     TOP 100 PERCENT dbo.ArchBlocks.Id, dbo.ArchBlocks.BLockType, dbo.ArchBlocks.CreatorId, dbo.ArchBlocks.OperatorId, dbo.ArchBlocks.JockeyId, 
                      dbo.ArchBlocks.Name, dbo.ArcNews.Cassete AS Description, dbo.ArchBlocks.BlockTime, CONVERT(int, dbo.ArcNews.NewsDate) + 1 AS TaskTime, 
                      dbo.ArchBlocks.CalcTime, dbo.ArchBlocks.BlockText, dbo.ArchBlocks.NewsId, dbo.ArchBlocks.ParentId, dbo.ArchBlocks.Sort, dbo.ArchBlocks.Approve, 
                      dbo.ArchBlocks.Ready
FROM         dbo.ArchBlocks INNER JOIN
                      dbo.ArcNews ON dbo.ArchBlocks.NewsId = dbo.ArcNews.id
ORDER BY CONVERT(int, dbo.ArcNews.NewsDate) DESC, dbo.ArchBlocks.Name

GO


GO
-- Create View [dbo].[vArchBlock_for_list]
Print 'Create View [dbo].[vArchBlock_for_list]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

CREATE VIEW [dbo].[vArchBlock_for_list]
AS
SELECT     TOP (100) PERCENT dbo.ArchBlocks.Id, dbo.ArchBlocks.Name, dbo.GetTypeName(dbo.BlockType.id) AS TypeName, dbo.ConvertIntToCharTime(dbo.ArchBlocks.BlockTime) AS BlockTime, 
                      dbo.ConvertIntToCharTime(dbo.ArchBlocks.TaskTime) AS TaskTime, dbo.ConvertIntToCharTime(dbo.ArchBlocks.CalcTime) AS CalcTime, dbo.ArchBlocks.NewsId, dbo.ArchBlocks.ParentId, 
                      dbo.ArchBlocks.CreatorId, dbo.ArchBlocks.Ready, dbo.ArchBlocks.Approve, dbo.ArchBlocks.Sort, dbo.ArchBlocks.OperatorId, dbo.ArchBlocks.JockeyId, dbo.ArchBlocks.CutterId
FROM         dbo.ArchBlocks LEFT OUTER JOIN
                      dbo.BlockType ON dbo.ArchBlocks.BLockType = dbo.BlockType.id
WHERE     (dbo.ArchBlocks.Deleted = 0)
ORDER BY dbo.ArchBlocks.Sort

GO


GO
-- Create View [dbo].[va_UsersProgram]
Print 'Create View [dbo].[va_UsersProgram]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

CREATE VIEW dbo.va_UsersProgram
AS
SELECT     TOP 100 PERCENT dbo.Users.UserID, dbo.UUserToProgram.ProgramID, dbo.Users.UserName
FROM         dbo.Users INNER JOIN
                      dbo.UUserToProgram ON dbo.Users.UserID = dbo.UUserToProgram.UserID
GROUP BY dbo.Users.UserID, dbo.UUserToProgram.ProgramID, dbo.Users.UserName
HAVING      (dbo.UUserToProgram.ProgramID <> 0)
ORDER BY dbo.Users.UserID

GO


GO
-- Create View [dbo].[va_UserRoles]
Print 'Create View [dbo].[va_UserRoles]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

CREATE VIEW dbo.va_UserRoles
AS
SELECT     TOP 100 PERCENT dbo.UUserToProgram.UserID, dbo.UUserToProgram.ProgramID, dbo.URoles.URoleName, dbo.URoles.URoleID, 
                      dbo.URoles.URoleGroup
FROM         dbo.URightsToRole INNER JOIN
                      dbo.URoles ON dbo.URightsToRole.URoleID = dbo.URoles.URoleID INNER JOIN
                      dbo.UUserToProgram ON dbo.URoles.URoleID = dbo.UUserToProgram.URoleID
GROUP BY dbo.UUserToProgram.UserID, dbo.UUserToProgram.ProgramID, dbo.URoles.URoleName, dbo.URoles.URoleID, dbo.URoles.URoleGroup
ORDER BY dbo.URoles.URoleID

GO


GO
-- Create View [dbo].[vWeb_UsersLoginList]
Print 'Create View [dbo].[vWeb_UsersLoginList]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
CREATE VIEW dbo.vWeb_UsersLoginList
AS
SELECT     TOP (100) PERCENT 0 AS ProgramID, '-' AS ProgramName, dbo.Users.Active, dbo.Users.UserID, dbo.Users.UserName, dbo.Users.pass AS UserPass, dbo.Users.ReadRate AS UserRate, 
                      dbo.Users.Last_time
FROM         dbo.URightsToRole INNER JOIN
                      dbo.URights ON dbo.URightsToRole.URightID = dbo.URights.URightID INNER JOIN
                      dbo.URoles ON dbo.URightsToRole.URoleID = dbo.URoles.URoleID INNER JOIN
                      dbo.UUserToProgram ON dbo.URoles.URoleID = dbo.UUserToProgram.URoleID INNER JOIN
                      dbo.Users ON dbo.UUserToProgram.UserID = dbo.Users.UserID
WHERE     (dbo.URights.URightID = 1) AND (dbo.Users.deleted = 0)
GROUP BY dbo.Users.Active, dbo.Users.UserID, dbo.Users.UserName, dbo.Users.pass, dbo.Users.ReadRate, dbo.Users.Last_time
ORDER BY dbo.Users.UserName, dbo.Users.UserID
GO


GO
-- Create View [dbo].[vA_UserRights]
Print 'Create View [dbo].[vA_UserRights]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

CREATE VIEW dbo.vA_UserRights
AS
SELECT     TOP 100 PERCENT dbo.UUserToProgram.UserID, dbo.Programs.Name AS ProgramName, dbo.URights.URightName, dbo.UUserToProgram.ProgramID, 
                      dbo.URights.URightID, dbo.URoles.URoleName
FROM         dbo.URightsToRole INNER JOIN
                      dbo.URights ON dbo.URightsToRole.URightID = dbo.URights.URightID INNER JOIN
                      dbo.URoles ON dbo.URightsToRole.URoleID = dbo.URoles.URoleID INNER JOIN
                      dbo.UUserToProgram ON dbo.URoles.URoleID = dbo.UUserToProgram.URoleID INNER JOIN
                      dbo.Programs ON dbo.UUserToProgram.ProgramID = dbo.Programs.id
GROUP BY dbo.UUserToProgram.UserID, dbo.Programs.Name, dbo.URights.URightName, dbo.UUserToProgram.ProgramID, dbo.URights.URightID, 
                      dbo.URoles.URoleName
ORDER BY dbo.UUserToProgram.UserID, dbo.UUserToProgram.ProgramID, dbo.URoles.URoleName

GO


GO
-- Create View [dbo].[va_RoleUsers]
Print 'Create View [dbo].[va_RoleUsers]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

CREATE VIEW dbo.va_RoleUsers
AS
SELECT     TOP 100 PERCENT dbo.UUserToProgram.UserID, dbo.UUserToProgram.ProgramID, dbo.Programs.Name AS ProgramName, dbo.Users.UserName, 
                      dbo.UUserToProgram.URoleID
FROM         dbo.Programs INNER JOIN
                      dbo.UUserToProgram ON dbo.Programs.id = dbo.UUserToProgram.ProgramID INNER JOIN
                      dbo.Users ON dbo.UUserToProgram.UserID = dbo.Users.UserID
GROUP BY dbo.UUserToProgram.UserID, dbo.UUserToProgram.ProgramID, dbo.Programs.Name, dbo.Users.UserName, dbo.UUserToProgram.URoleID
ORDER BY dbo.UUserToProgram.UserID

GO


GO
-- Create View [dbo].[vUsersLoginListForArchive]
Print 'Create View [dbo].[vUsersLoginListForArchive]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO
CREATE VIEW dbo.vUsersLoginListForArchive
AS
SELECT     TOP 100 PERCENT 0 AS ProgramID, '-' AS ProgramName, dbo.Users.Active AS RightID, dbo.Users.UserID, dbo.Users.UserName, 
                      dbo.Users.pass AS UserPass, dbo.Users.ReadRate AS UserRate
FROM         dbo.URightsToRole INNER JOIN
                      dbo.URights ON dbo.URightsToRole.URightID = dbo.URights.URightID INNER JOIN
                      dbo.URoles ON dbo.URightsToRole.URoleID = dbo.URoles.URoleID INNER JOIN
                      dbo.UUserToProgram ON dbo.URoles.URoleID = dbo.UUserToProgram.URoleID INNER JOIN
                      dbo.Users ON dbo.UUserToProgram.UserID = dbo.Users.UserID
WHERE     (dbo.URights.URightID = 58) OR
                      (dbo.URights.URightID = 58)
GROUP BY dbo.Users.Active, dbo.Users.UserID, dbo.Users.UserName, dbo.Users.pass, dbo.Users.ReadRate
ORDER BY dbo.Users.UserName, dbo.Users.UserID

GO


GO
-- Create View [dbo].[vWeb_UsertForMessager]
Print 'Create View [dbo].[vWeb_UsertForMessager]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
CREATE VIEW dbo.vWeb_UsertForMessager
AS
SELECT     TOP (100) PERCENT dbo.Users.UserID, dbo.Users.UserName, dbo.Users.Active
FROM         dbo.Users INNER JOIN
                      dbo.UUserToProgram ON dbo.Users.UserID = dbo.UUserToProgram.UserID INNER JOIN
                      dbo.URoles ON dbo.UUserToProgram.URoleID = dbo.URoles.URoleID INNER JOIN
                      dbo.URightsToRole ON dbo.URoles.URoleID = dbo.URightsToRole.URoleID INNER JOIN
                      dbo.URights ON dbo.URightsToRole.URightID = dbo.URights.URightID
WHERE     (dbo.URights.URightID = 50) AND (dbo.Users.deleted = 0)
GROUP BY dbo.Users.UserID, dbo.Users.UserName, dbo.Users.Active
ORDER BY dbo.Users.UserName, dbo.Users.UserID
GO


GO
-- Create Procedure [dbo].[pWeb_InsertRssFeed]
Print 'Create Procedure [dbo].[pWeb_InsertRssFeed]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[pWeb_InsertRssFeed]
	@Date datetime,
	@ImgLink nvarchar(255),
	@Name nvarchar(255),
	@Lid ntext,
	@Link nvarchar(255),
	@Guid nvarchar(255),
	@SourceId int
AS
BEGIN
	DECLARE @ROW int
	SELECT @ROW=COUNT(id) FROM tWeb_IncomingRssMessages
	WHERE [GUID]=@Guid
	
	IF (@ROW=0) 
	BEGIN
		INSERT INTO tWeb_IncomingRssMessages(Date, ImgLink, Name, Lid, Link,[Guid],SourceId )
		VALUES (@Date, @ImgLink, @Name, @Lid, @Link,@Guid, @SourceId)
	END 
END
GO


GO
-- Create Procedure [dbo].[spa_UpdateTypeFlags]
Print 'Create Procedure [dbo].[spa_UpdateTypeFlags]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO


----------------------------------------------
----------------------------------------------
CREATE PROCEDURE [dbo].[spa_UpdateTypeFlags]
@TypeID  int,
@FlagsStr  nvarchar(255)

AS

-- NFAdmin
-- инсертит или апдейтит табличку связей типов блоков с флагами
-- входные параметры - новые значения полей одной строкой
-- выходной параметр 0 - норма, -1 - ошибка

DECLARE @FlagsIDStr varchar(255)
DECLARE @FlagID int
DECLARE @Index int
DECLARE @OldIndex int
DECLARE @Count int
DECLARE @err_status int

IF @TypeID  < 0 RETURN -1 
IF (SELECT count([ID]) FROM BlockType WHERE [ID] = @TypeID) > 0  
BEGIN
	BEGIN TRANSACTION UpdateTypeFlags
	DELETE FROM FlagsToBlockTypes WHERE BlockTypeID = @TypeID
	SET @err_status = @@ERROR                 
	IF (@err_status <> 0)
	BEGIN 
		ROLLBACK TRANSACTION UpdateTypeFlags
		RETURN -1
	END
	IF len(@FlagsStr) > 1 
	BEGIN
		SET @OldIndex = 1
		WHILE @OldIndex <>  len(@FlagsStr)+1
		BEGIN
			SET @Index = CHARINDEX('%',@FlagsStr, @OldIndex)
			SET @FlagsIDStr = SUBSTRING(@FlagsStr, @OldIndex, @Index-@OldIndex)
			SET @FlagID=CONVERT(int,@FlagsIDStr)
			INSERT INTO FlagsToBlockTypes VALUES(@TypeID,@FlagID,@OldIndex)
			SET @err_status = @@ERROR                 
			IF (@err_status <> 0)
			BEGIN 
				ROLLBACK TRANSACTION UpdateTypeFlags
				RETURN -1
			END
			SET @OldIndex = @Index+1 -- вопрос
		END
	END
COMMIT TRANSACTION UpdateTypeFlags
RETURN 0
END
RETURN -1

GO


GO
-- Create Procedure [dbo].[pWeb_ClearRss]
Print 'Create Procedure [dbo].[pWeb_ClearRss]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
CREATE PROCEDURE dbo.pWeb_ClearRss
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	DECLARE @count int
	SELECT @count= count(id) FROM [dbo].[tWeb_IncomingRssMessages]
	IF(@count>10000)
	BEGIN
	DELETE FROM tWeb_IncomingRssMessages WHERE ID IN(SELECT TOP (@count-1000) ID FROM tWeb_IncomingRssMessages ORDER BY DATE)
	END
END
GO


GO
-- Create Procedure [dbo].[spa_UpdateUserRoles]
Print 'Create Procedure [dbo].[spa_UpdateUserRoles]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO

----------------------------------------------
----------------------------------------------
CREATE PROCEDURE [dbo].[spa_UpdateUserRoles]
@UserID  int,
@ProgramID  int,
@RoleStr  varchar(255)
AS

-- NFAdmin
-- инсертит или апдейтит табличку связей пользователей с ролями
-- входные параметры - новые значения полей одной строкой
-- выходной параметр 0 - норма, - ошибка отрицательное значение

DECLARE @RoleIDStr varchar(255)
DECLARE @RoleID int
DECLARE @Index int
DECLARE @OldIndex int
DECLARE @Count int
DECLARE @err_status int

IF @UserID < 0 RETURN -1 
IF (SELECT count(UserID) from Users where UserID = @UserID) = 0 RETURN -2 
IF @ProgramID < 0 RETURN -3 
IF (SELECT count([ID]) from Programs where [ID] = @ProgramID) = 0 RETURN -4

BEGIN TRANSACTION UpdateUserRoles
DELETE FROM UUserToProgram WHERE UserID = @UserID AND ProgramID = @ProgramID
SET @err_status = @@ERROR                 
IF (@err_status <> 0)
BEGIN 
	ROLLBACK TRANSACTION UpdateUserRoles
	RETURN -5
END
IF len(@RoleStr) > 1 
BEGIN
	SET @OldIndex = 1
	WHILE @OldIndex <>  len(@RoleStr)+1
	BEGIN
		SET @Index = CHARINDEX('%', @RoleStr, @OldIndex)
		SET @RoleIDStr = SUBSTRING(@RoleStr, @OldIndex, @Index-@OldIndex)
		SET @OldIndex = @Index+1
		SET @RoleID=CONVERT(int,@RoleIDStr)
		INSERT INTO UUserToProgram VALUES(@UserID,@ProgramID,@RoleID)
		SET @err_status = @@ERROR                 
		IF (@err_status <> 0)
		BEGIN 
			ROLLBACK TRANSACTION UpdateUserRoles
			RETURN -6
		END
	END
END
COMMIT TRANSACTION UpdateUserRoles
RETURN 0

GO


GO
-- Create Procedure [dbo].[spa_UpdateRoleRights]
Print 'Create Procedure [dbo].[spa_UpdateRoleRights]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO


----------------------------------------------
----------------------------------------------
CREATE PROCEDURE [dbo].[spa_UpdateRoleRights]
@RoleID  int,
@RightsStr  nvarchar(255)

AS

-- NFAdmin
-- инсертит или апдейтит табличку прав по роли
-- входные параметры - новые значения полей одной строкой
-- выходной параметр 0 - норма, -1 - ошибка

DECLARE @RightsIDStr varchar(255)
DECLARE @RightID int
DECLARE @Index int
DECLARE @OldIndex int
DECLARE @Count int
DECLARE @err_status int

IF @RoleID < 0 RETURN -1 
IF (SELECT count(URoleID) from URoles where URoleID = @RoleID) > 0
BEGIN
	BEGIN TRANSACTION UpdateRoleRights
	DELETE FROM URightsToRole WHERE URoleID = @RoleID
	SET @err_status = @@ERROR                 
	IF (@err_status <> 0)
	BEGIN 
		ROLLBACK TRANSACTION UpdateRoleRights
		RETURN -1
	END
	IF len(@RightsStr) > 1 
	BEGIN
		SET @OldIndex = 1
		WHILE @OldIndex <>  len(@RightsStr)+1
		BEGIN
			SET @Index = CHARINDEX('%',@RightsStr, @OldIndex)
			SET @RightsIDStr = SUBSTRING(@RightsStr, @OldIndex, @Index-@OldIndex)
			SET @OldIndex = @Index+1
			SET @RightID=CONVERT(int,@RightsIDStr)
			INSERT INTO  URightsToRole VALUES(@RoleID,@RightID)
			SET @err_status = @@ERROR                 
			IF (@err_status <> 0)
			BEGIN 
				ROLLBACK TRANSACTION UpdateRoleRights
				RETURN -1
			END

		END
	END
COMMIT TRANSACTION UpdateRoleRights
RETURN 0
END
RETURN -1

GO


GO
-- Create Procedure [dbo].[InsetIntoArchBlocsFromNF2]
Print 'Create Procedure [dbo].[InsetIntoArchBlocsFromNF2]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

CREATE proc dbo.InsetIntoArchBlocsFromNF2
@id bigint,
@name nvarchar(255),
@newsid bigint,
@blocktype int,
@operator nvarchar(255),
@creator nvarchar(255),
@jockey nvarchar(255),
@blocktime bigint,
@blocktext text,
@sort int
AS


declare @operatorid int
declare @creatorid int
declare @jockeyid int

select @operatorid=userid from users where username like @operator
select @creatorid=userid from users where username like @creator
select @jockeyid=userid from users where username like @jockey
if (@operatorid is null)
begin
	SET @operatorid=0
end
if (@creatorid is null)
begin
	SET @creatorid=0
end
if (@jockeyid is null)
begin
	SET @jockeyid=0
end

INSERT INTO ArchBlocks
                      (Id, Name, NewsId, BLockType, CreatorId, OperatorId, JockeyId, BlockTime, BlockText, Sort)
VALUES     (@id,@name,@newsid,@blocktype,@creatorid,@operator,@jockeyid,@blocktime,@blocktext,@sort)

GO


GO
-- Create Procedure [dbo].[spa_SetAsDeleted]
Print 'Create Procedure [dbo].[spa_SetAsDeleted]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO


----------------------------------------------
----------------------------------------------
CREATE PROCEDURE [dbo].[spa_SetAsDeleted]
@Current int,
@ID  int
AS

-- NFAdmin
-- универсальная процедура установки юзеров программ и ролей как удаленных

DECLARE @err_status int

BEGIN TRANSACTION SetAsDeleted

IF @Current = 1	DELETE FROM UUserToProgram WHERE UserID =  @ID --user
IF @Current = 2 DELETE FROM UUserToProgram WHERE ProgramID =  @ID -- program
IF @Current = 3 DELETE FROM URoles WHERE URoleID =  @ID -- role
IF @Current = 5 DELETE FROM PrintTemplates WHERE [ID] =  @ID --view
IF @Current = 6 DELETE FROM BlockType WHERE [ID] =  @ID --blocktype
IF @Current = 7 DELETE FROM Flags WHERE [ID] =  @ID --flag
IF @Current = 8 DELETE FROM BlockEditTemplates WHERE [ID] =  @ID --tag
	SET @err_status = @@ERROR                 
	IF (@err_status <> 0)
	BEGIN 
		ROLLBACK TRANSACTION SetAsDeleted
		RETURN -1
	END

IF @Current = 1	UPDATE Users SET deleted = 1 WHERE UserID = @ID --user
IF @Current = 2 UPDATE Programs SET deleted = 1 WHERE [ID] = @ID -- program
	SET @err_status = @@ERROR                 
	IF (@err_status <> 0)
	BEGIN 
		ROLLBACK TRANSACTION SetAsDeleted
		RETURN -1
	END

COMMIT TRANSACTION SetAsDeleted
RETURN 0

GO


GO
-- Create Procedure [dbo].[AddToNewsFromNF1]
Print 'Create Procedure [dbo].[AddToNewsFromNF1]'
GO
SET ANSI_NULLS OFF
SET QUOTED_IDENTIFIER OFF
GO


GO

CREATE proc dbo.AddToNewsFromNF1
@id bigint,
@name nvarchar(255),
@editor varchar(255),
@date nvarchar(255),
@hrono bigint,
@description nvarchar(255)
as

Declare @userid int
Select @userid=userid from users where username like @editor
if( @userid is  NULL)
begin
	Set @userid=0
end
INSERT INTO News
                      (id, Name, EditorId, NewsDate, Description, NewsTime, CalcTime, TaskTime, Deleted, ProgramId)
VALUES     (@id,@name,@userid,convert(datetime,@date),@description,@hrono,0,0,0,1)
GO


GO
-- Create Procedure [dbo].[AdduserFromNF1]
Print 'Create Procedure [dbo].[AdduserFromNF1]'
GO
SET ANSI_NULLS OFF
SET QUOTED_IDENTIFIER OFF
GO


GO

CREATE PROCEDURE dbo.[AdduserFromNF1] 
@username nvarchar(255),
@pass nvarchar(255),
@ReadRate int,
@Role int,
@talent int

AS

Declare @id int
if((Select Userid from users where UserName=@UserName)is NULL)

Begin
	INSERT INTO Users
                      (UserName, pass, Active, Last_time, ReadRate, deleted, PrintTemplateId, BlockTypeId, AbrigeBlockTypeId, OnlyMy, Enter)
	VALUES     (@username,@pass,0,GetDate(),@ReadRate,0,2,0,-1,0,0)

Select @id=Userid from users where UserName=@username

declare @roleid int


INSERT INTO UUserToProgram  (UserID, ProgramID, URoleID) VALUES     (@id,1,@role)

if(@talent>0)
	begin
		INSERT INTO UUserToProgram  (UserID, ProgramID, URoleID) VALUES     (@id,1,8)
	end
if (@Role in(7,28, 10, 17))
begin 
	INSERT INTO UUserToProgram  (UserID, ProgramID, URoleID) VALUES     (@id,1,11)
	INSERT INTO UUserToProgram  (UserID, ProgramID, URoleID) VALUES     (@id,0,14)
	INSERT INTO UUserToProgram  (UserID, ProgramID, URoleID) VALUES     (@id,0,24)
	INSERT INTO UUserToProgram  (UserID, ProgramID, URoleID) VALUES     (@id,0,25)
end

End
GO


GO
-- Create Procedure [dbo].[sp_ArchiveToOutbox]
Print 'Create Procedure [dbo].[sp_ArchiveToOutbox]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
----------------------------------------------
----------------------------------------------
CREATE PROCEDURE [dbo].[sp_ArchiveToOutbox] 
@outbox_id bigint,
@news_id bigint

AS

-- ???????? ?????? ?? ?????? ? ?????????
-- ???? - @news_id - id ???????, @outbox_id - id ?????? ?????????
-- ????? - 0- ??, 1- ??????

-- arcnews_to_outbox

DECLARE @Error_Num int
DECLARE @Error_Count int

Declare @New_News_id bigint
Declare @Block_id bigint
Declare @New_Block_id bigint

IF (SELECT count([id]) FROM ArcNews WHERE [id] = @news_id) < 1 RETURN 1

BEGIN TRANSACTION ArchiveToOutbox

SET @Error_Num=2627
SET @Error_Count=0
WHILE (@Error_Num=2627) and (@Error_Count <10) 
BEGIN
	SET @New_News_id = (convert(bigint,rand()*1000000000000000))
	SET @Error_Count=@Error_Count+1

	INSERT INTO OutboxNews ([id], [Name], EditorId, NewsDate, [Description], NewsTime, CalcTime, 
				TaskTime, ProgramId, Deleted, Cassete, Time_Code, GroupId, Duration)
	SELECT @New_News_id, [Name], EditorId, NewsDate, [Description], NewsTime, CalcTime, TaskTime, 
		ProgramId, Deleted, Cassete, Time_Code, @outbox_id, Duration
	FROM ArcNews WHERE [id]=@news_id
        SET @Error_Num=@@ERROR
END
IF  @Error_Num <> 0 
BEGIN
	ROLLBACK TRANSACTION ArchiveToOutbox
	RETURN 1
END

DECLARE st cursor FOR SELECT [id] FROM ArchBlocks where newsid = @news_id  AND ParentId=0
OPEN st
FETCH NEXT FROM st INTO @Block_id
WHILE @@fetch_status=0
BEGIN

	SET @Error_Num=2627
	SET @Error_Count=0
	WHILE (@Error_Num=2627) AND (@Error_Count <10) 
		BEGIN
			SET @Error_Count=@Error_Count+1
			SET @New_Block_id=(convert(bigint,rand()*1000000000000000))
			INSERT INTO OutboxBlocks ([Id], [Name], NewsId, ParentId, BLockType, CreatorId, 
					OperatorId, JockeyId, BlockTime, TaskTime, CalcTime, BlockText, 
					Sort, [Description], Ready, Approve, TextLang1,TextLang2,TextLang3)
			SELECT @New_Block_id, [Name], @New_News_id, ParentId, BLockType, CreatorId, 
				OperatorId, JockeyId, BlockTime, TaskTime, CalcTime, BlockText, Sort, 
				[Description], Ready, Approve, TextLang1,TextLang2,TextLang3
			FROM  ArchBlocks where id=@Block_id
		        SET @Error_Num=@@ERROR
		END
		IF  @Error_Num <> 0 
		BEGIN
			CLOSE st
			DEALLOCATE st			
			ROLLBACK TRANSACTION ArchiveToOutbox
			RETURN 1
		END
	FETCH NEXT FROM st INTO @Block_id
END
CLOSE st
DEALLOCATE st
COMMIT TRANSACTION ArchiveToOutbox
RETURN 0

GO


GO
-- Create Procedure [dbo].[pWeb_NewNews]
Print 'Create Procedure [dbo].[pWeb_NewNews]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[pWeb_NewNews]
	@programId bigint
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	DECLARE @NewId bigint
	SELECT @NewId=convert(bigint,rand()*100000000)
	INSERT INTO News (id, Name, NewsDate, ProgramId, EditorId ) VALUES (@NewId, 'Новый выпуск', DATEADD(day,1,GETDATE()), @programId,0)
RETURN @NewId
	
END
GO


GO
-- Create Function [dbo].[fWeb_ProgramIdFromBlockId]
Print 'Create Function [dbo].[fWeb_ProgramIdFromBlockId]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date, ,>
-- Description:	<Description, ,>
-- =============================================
CREATE FUNCTION dbo.fWeb_ProgramIdFromBlockId
(
	-- Add the parameters for the function here
	@BlockId bigint
)
RETURNS bigint
AS
BEGIN
	Declare @NewsId bigint
	SELECT @NewsId=NewsId FROM Blocks WHERE Id=@BlockId
	
	DECLARE @ProgramId bigint
	SELECT @ProgramId=ProgramId FROM News WHERE ID=@NewsId
	
	RETURN @ProgramId

END
GO


GO
-- Create Function [dbo].[fWebGetNewsCalcTime]
Print 'Create Function [dbo].[fWebGetNewsCalcTime]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date, ,>
-- Description:	<Description, ,>
-- =============================================
CREATE FUNCTION dbo.fWebGetNewsCalcTime 
(
	-- Add the parameters for the function here
	@NewsId bigint
)
RETURNS bigint
AS
BEGIN
DECLARE @ret bigint
	SELECT @ret=SUM(CalcTime) FROM Blocks WHERE Deleted=0 AND ParentId=0 AND NewsId=@NewsId
	RETURN @ret
END
GO


GO
-- Create Function [dbo].[fWebGetNewsRealTime]
Print 'Create Function [dbo].[fWebGetNewsRealTime]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date, ,>
-- Description:	<Description, ,>
-- =============================================
Create FUNCTION [dbo].[fWebGetNewsRealTime] 
(
	-- Add the parameters for the function here
	@NewsId bigint
)
RETURNS bigint
AS
BEGIN

DECLARE @ret bigint
SET @ret=0

DECLARE @BlockId bigint
Declare BlockCursor CURSOR FOR SELECT ID FROM Blocks WHERE Deleted=0 AND ParentId=0 AND NewsId=@NewsId
OPEN BlockCursor
FETCH NEXT FROM BlockCursor INTO @BlockId
WHILE @@fetch_status=0
BEGIN
	DECLARE @CalkTime Bigint
	Declare @RealTime bigint 
	SELECT @RealTime=BlockTime, @CalkTime=CalcTime FROM BLOCKS WHERE ID=@BlockId
	IF (@RealTime<1)
		BEGIN
			SET @ret=@ret+@CalkTime
		END
	ELSE
		BEGIN
			SET @ret=@ret+@RealTime
		END
	
	FETCH NEXT FROM BlockCursor INTO @BlockId
END
	RETURN @ret
END
GO


GO
-- Create Function [dbo].[GetUserRight]
Print 'Create Function [dbo].[GetUserRight]'
GO
SET ANSI_NULLS OFF
SET QUOTED_IDENTIFIER OFF
GO


GO

CREATE FUNCTION dbo.GetUserRight( @UserId int, @RightId int)
RETURNS bit
BEGIN 
	declare @cn int
SELECT    @cn =COUNT(UserID) FROM         vUsersRights WHERE  (RightID =@RightId) AND (UserID =@UserId)
if(@cn>0)
begin 
	return( 1);
end

RETURN(0)
END

GO


GO
-- Create Function [dbo].[fWeb_CheckLooking_FromCookie]
Print 'Create Function [dbo].[fWeb_CheckLooking_FromCookie]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date, ,>
-- Description:	<Description, ,>
-- =============================================
CREATE FUNCTION [dbo].[fWeb_CheckLooking_FromCookie]
(
	@Cookie int,
	@BlockId bigint
)
RETURNS nvarchar(255)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @UserId INT
	DECLARE @ret nvarchar(255)
	Select @UserId=UserId FROM dbo.tWeb_SessionGuid WHERE Cookie=@Cookie AND (DATEDIFF ( second , LastTime , GetDate() )<60)
	IF (@UserId is NULL)
	BEGIN
		return 'ERROR - Пользователь не найден'
	END
	DECLARE @Count int
	SELECT @Count=COUNT(ID) FROM BLOCKS WHERE Id=@BlockId AND Deleted=0 AND ParentId=0
	IF (@Count<1)
	BEGIN
		return 'ERROR - Блок не найден BlockId=' + CONVERT(nvarchar(255),@BlockId)
	END
	SELECT @ret=UserName FROM dbo.Locking WHERE BlockId=@BlockId AND (DATEDIFF ( second , Time , GetDate() )<60)
	IF (@ret is NULL)
	BEGIN
		--EXECUTE pWeb_First_UpdateBlockLooking @UserId, @BlockId
		RETURN ''
	END
	ELSE
	BEGIN
		RETURN 'Блок заблокировал '+@ret+', повторите попытку позже.'
	END
	
	RETURN ''
	

END
GO


GO
-- Create Function [dbo].[fWeb_BlockLookingCheckFromBlockId]
Print 'Create Function [dbo].[fWeb_BlockLookingCheckFromBlockId]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date, ,>
-- Description:	<Description, ,>
-- =============================================
CREATE FUNCTION [dbo].[fWeb_BlockLookingCheckFromBlockId]
(
	
	@BlockId bigint
)
RETURNS nvarchar(255)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @UserId INT
	DECLARE @ret nvarchar(255)
	
	DECLARE @Count int
	SELECT @Count=COUNT(ID) FROM BLOCKS WHERE Id=@BlockId AND Deleted=0 AND ParentId=0
	IF (@Count<1)
	BEGIN
		return 'ERROR - Блок не найден BlockId=' + CONVERT(nvarchar(255),@BlockId)
	END
	SELECT @ret=UserName FROM dbo.Locking WHERE BlockId=@BlockId AND (DATEDIFF ( second , Time , GetDate() )<60)
	IF (@ret is NULL)
	BEGIN
		--EXECUTE pWeb_First_UpdateBlockLooking @UserId, @BlockId
		RETURN ''
	END
	ELSE
	BEGIN
		RETURN 'Блок заблокировал '+@ret+', повторите попытку позже.'
	END
	
	RETURN ''
	

END
GO


GO
-- Create Function [dbo].[fWeb_NewsWithBlocksToXML]
Print 'Create Function [dbo].[fWeb_NewsWithBlocksToXML]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date, ,>
-- Description:	<Description, ,>
-- =============================================
CREATE FUNCTION [dbo].[fWeb_NewsWithBlocksToXML]
(
	
)
RETURNS XML
AS
BEGIN
DECLARE @ret XML
	SET @ret=(	
	Select top 3
	[Id] as "@ID",
	Id,
	Name,
		(SELECT [Id] as "@Id",
		Id,
		Name
		FROM Blocks
		WHERE Deleted =0 AND ParentId=0 AND
		Blocks.NewsId=News.id 
		ORDER BY Sort 
		FOR XML PATH('Block'), TYPE
		)AS 'Blocks'
	FROM News
	WHERE Deleted =0
	FOR XML PATH('NewsRealase'), ROOT('ProgramContent')
)
RETURN @RET




END
GO


GO
-- Create Function [dbo].[fWeb_CheckUserRightForShowMessager]
Print 'Create Function [dbo].[fWeb_CheckUserRightForShowMessager]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date, ,>
-- Description:	<Description, ,>
-- =============================================
CREATE FUNCTION dbo.fWeb_CheckUserRightForShowMessager
(
	@Userid int
)
RETURNS bit
AS
BEGIN

DECLARE @login int
Select @login=UserId From vWeb_ListUserToLoginMessager WHERE UserId=@UserId
IF @login IS NULL 
BEGIN
RETURN 0
END

RETURN 1
	

END
GO


GO
-- Create View [dbo].[vWeb_BlockForPrintTemplate]
Print 'Create View [dbo].[vWeb_BlockForPrintTemplate]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
CREATE VIEW dbo.vWeb_BlockForPrintTemplate
AS
SELECT     dbo.Blocks.Id, dbo.Blocks.Name, dbo.Blocks.NewsId, dbo.Blocks.ParentId, dbo.Blocks.CreatorId, dbo.Blocks.OperatorId, dbo.Blocks.JockeyId, dbo.Blocks.BlockTime, dbo.Blocks.TaskTime, 
                      dbo.Blocks.CalcTime, dbo.Blocks.BlockText, dbo.Blocks.Sort, dbo.Blocks.Description, dbo.Blocks.Ready, dbo.Blocks.Approve, dbo.Blocks.BLockType, dbo.BlockType.TypeName, 
                      dbo.Blocks.CutterId, dbo.Blocks.TextLang1, dbo.Blocks.TextLang2, dbo.Blocks.TextLang3
FROM         dbo.Blocks INNER JOIN
                      dbo.BlockType ON dbo.Blocks.BLockType = dbo.BlockType.id
GO


GO
-- Create View [dbo].[vWeb_MediaForList]
Print 'Create View [dbo].[vWeb_MediaForList]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
CREATE VIEW dbo.vWeb_MediaForList
AS
SELECT     TOP (100) PERCENT Id, Name, BLockType, CreatorId, OperatorId, JockeyId, BlockTime, TaskTime, CalcTime, BlockText, Ready, Approve, TextLang1, TextLang2, TextLang3, ParentId, Sort, 
                      Description
FROM         dbo.Blocks
WHERE     (deleted = 0) AND (ParentId > 0)
ORDER BY Description
GO


GO
-- Create View [dbo].[vWeb_BlockToExtView]
Print 'Create View [dbo].[vWeb_BlockToExtView]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
CREATE VIEW dbo.vWeb_BlockToExtView
AS
SELECT     dbo.Blocks.Name, dbo.Users.UserName AS Creator, Users_1.UserName AS Operator, Users_2.UserName AS Jockey, dbo.Blocks.BlockText, dbo.Blocks.Description, dbo.Blocks.Ready, 
                      dbo.Blocks.Approve, dbo.Blocks.Id
FROM         dbo.Blocks LEFT OUTER JOIN
                      dbo.Users AS Users_2 ON dbo.Blocks.JockeyId = Users_2.UserID LEFT OUTER JOIN
                      dbo.Users ON dbo.Blocks.CreatorId = dbo.Users.UserID LEFT OUTER JOIN
                      dbo.Users AS Users_1 ON dbo.Blocks.OperatorId = Users_1.UserID
WHERE     (dbo.Blocks.deleted = 0)
GO


GO
-- Create View [dbo].[vMedia_ListForGenerateTh]
Print 'Create View [dbo].[vMedia_ListForGenerateTh]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
CREATE VIEW dbo.vMedia_ListForGenerateTh
AS
SELECT     TOP (100) PERCENT dbo.tWeb_MediaTask.id, dbo.Blocks.BlockText AS PicSource
FROM         dbo.Blocks INNER JOIN
                      dbo.tWeb_MediaTask ON dbo.Blocks.Id = dbo.tWeb_MediaTask.MediaId
WHERE     (dbo.tWeb_MediaTask.PICStatus < 1) AND (dbo.Blocks.BLockType = 2) AND (DATEADD(second, 5, dbo.tWeb_MediaTask.DateAdd) < GETDATE()) AND (dbo.tWeb_MediaTask.PICCount < 5)
ORDER BY dbo.tWeb_MediaTask.DateAdd DESC, dbo.tWeb_MediaTask.PICCount
GO


GO
-- Create View [dbo].[vMedia_ListForGenerateLRV]
Print 'Create View [dbo].[vMedia_ListForGenerateLRV]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
CREATE VIEW dbo.vMedia_ListForGenerateLRV
AS
SELECT     TOP (100) PERCENT dbo.tWeb_MediaTask.id, dbo.Blocks.BlockText AS PicSource, dbo.tWeb_MediaTask.LRVStatus
FROM         dbo.Blocks INNER JOIN
                      dbo.tWeb_MediaTask ON dbo.Blocks.Id = dbo.tWeb_MediaTask.MediaId
WHERE     (dbo.Blocks.BLockType = 2) AND (DATEADD(second, 5, dbo.tWeb_MediaTask.DateAdd) < GETDATE()) AND (dbo.tWeb_MediaTask.LRVStatus < 1) AND (dbo.tWeb_MediaTask.LRVCount < 5)
ORDER BY dbo.tWeb_MediaTask.DateAdd DESC, dbo.tWeb_MediaTask.PICCount
GO


GO
-- Create View [dbo].[vMedia_MediaToList]
Print 'Create View [dbo].[vMedia_MediaToList]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
CREATE VIEW dbo.vMedia_MediaToList
AS
SELECT     TOP (100) PERCENT Id, Name, ParentId, BLockType, 
                      CASE WHEN BLockType = 1 THEN 'IMAGE' WHEN BLockType = 2 THEN 'VIDEO' WHEN BLockType = 3 THEN 'DOC' ELSE 'ДОКУМЕНТ' END AS BlockTypeName, BlockTime, 
                      BlockText AS SourceFile, Description, Ready, Approve, Sort
FROM         dbo.Blocks
WHERE     (deleted = 0) AND (ParentId > 0)
ORDER BY Sort
GO


GO
-- Create View [dbo].[vMedia_TaskList]
Print 'Create View [dbo].[vMedia_TaskList]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
CREATE VIEW dbo.vMedia_TaskList
AS
SELECT     dbo.tWeb_MediaTask.id, dbo.Blocks.Id AS MediaId, dbo.tWeb_MediaTask.DateAdd, dbo.tWeb_MediaTask.LRVSatus, dbo.tWeb_MediaTask.LRVCount, dbo.tWeb_MediaTask.LRVMessage, 
                      dbo.tWeb_MediaTask.LRVLastDate, dbo.tWeb_MediaTask.PICStatus, dbo.tWeb_MediaTask.PICCount, dbo.tWeb_MediaTask.PICMessage, dbo.tWeb_MediaTask.PICLastDate, 
                      dbo.Blocks.BLockType, dbo.Blocks.TextLang1, dbo.Blocks.TextLang2
FROM         dbo.Blocks INNER JOIN
                      dbo.tWeb_MediaTask ON dbo.Blocks.Id = dbo.tWeb_MediaTask.MediaId
GO


GO
-- Create View [dbo].[vWeb_DeletedBlock]
Print 'Create View [dbo].[vWeb_DeletedBlock]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
CREATE VIEW dbo.vWeb_DeletedBlock
AS
SELECT     dbo.Blocks.Id, dbo.Blocks.Name, dbo.News.Name AS NewsName, dbo.News.NewsDate, dbo.Blocks.deleted AS Expr1, dbo.News.Deleted
FROM         dbo.Blocks INNER JOIN
                      dbo.News ON dbo.Blocks.NewsId = dbo.News.id
WHERE     (dbo.Blocks.ParentId = 0) AND (dbo.News.Deleted = 0) AND (dbo.Blocks.deleted = 1)
GO


GO
-- Create View [dbo].[vCopyNewsBlock]
Print 'Create View [dbo].[vCopyNewsBlock]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

CREATE VIEW dbo.vCopyNewsBlock
AS
SELECT     TOP 100 PERCENT dbo.Blocks.Id, dbo.Blocks.BLockType, dbo.Blocks.CreatorId, dbo.Blocks.OperatorId, dbo.Blocks.JockeyId, dbo.CopyNews.Name, 
                      dbo.Blocks.Name AS Description, dbo.Blocks.BlockTime, CONVERT(int, dbo.CopyNews.NewsDate) + 1 AS TaskTime, dbo.Blocks.CalcTime, 
                      dbo.Blocks.BlockText, dbo.Blocks.NewsId, dbo.Blocks.ParentId, dbo.Blocks.Sort, dbo.Blocks.Ready, dbo.Blocks.Approve
FROM         dbo.Blocks INNER JOIN
                      dbo.CopyNews ON dbo.Blocks.NewsId = dbo.CopyNews.id
ORDER BY CONVERT(int, dbo.CopyNews.NewsDate) DESC, dbo.CopyNews.Name

GO


GO
-- Create View [dbo].[vMedia_ListForGenerateImages]
Print 'Create View [dbo].[vMedia_ListForGenerateImages]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
CREATE VIEW dbo.vMedia_ListForGenerateImages
AS
SELECT     TOP (100) PERCENT dbo.tWeb_MediaTask.id, dbo.Blocks.BlockText AS PicSource
FROM         dbo.Blocks INNER JOIN
                      dbo.tWeb_MediaTask ON dbo.Blocks.Id = dbo.tWeb_MediaTask.MediaId
WHERE     (dbo.Blocks.BLockType = 1) AND (dbo.tWeb_MediaTask.DateAddComplite IS NOT NULL) AND (dbo.tWeb_MediaTask.PICCount < 6)
ORDER BY dbo.tWeb_MediaTask.DateAdd DESC, dbo.tWeb_MediaTask.PICCount
GO


GO
-- Create View [dbo].[vBlocksPromt]
Print 'Create View [dbo].[vBlocksPromt]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

CREATE VIEW dbo.vBlocksPromt
AS
SELECT     TOP 100 PERCENT dbo.Blocks.*
FROM         dbo.Blocks LEFT OUTER JOIN
                      dbo.BlockType ON dbo.Blocks.BLockType = dbo.BlockType.id
WHERE     (dbo.BlockType.Jockey = 1) AND (dbo.Blocks.deleted = 0)
ORDER BY dbo.Blocks.Sort

GO


GO
-- Create View [dbo].[vDeletedBlocs]
Print 'Create View [dbo].[vDeletedBlocs]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

CREATE VIEW dbo.vDeletedBlocs
AS
SELECT     Id, BLockType, CreatorId, OperatorId, JockeyId, Description, Name, BlockTime, TaskTime, CalcTime, 'BlockText' AS Expr1, NewsId, ParentId, Sort, 
                      Ready, Approve
FROM         dbo.Blocks
WHERE     (deleted = 1)

GO


GO
-- Create View [dbo].[vWeb_Blocks]
Print 'Create View [dbo].[vWeb_Blocks]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
CREATE VIEW dbo.vWeb_Blocks
AS
SELECT     TOP (100) PERCENT dbo.Blocks.Id, dbo.Blocks.Name, dbo.GetTypeName(dbo.BlockType.id) AS TypeName, 
                      dbo.ConvertIntToCharTime(CASE WHEN dbo.Blocks.BlockTime > 0 THEN dbo.Blocks.BlockTime ELSE dbo.Blocks.CalcTime END) AS BlockTime, dbo.ConvertIntToCharTime(dbo.Blocks.TaskTime) 
                      AS TaskTime, dbo.ConvertIntToCharTime(dbo.Blocks.CalcTime) AS CalcTime, dbo.Blocks.NewsId, dbo.Blocks.ParentId, dbo.Blocks.CreatorId, dbo.Blocks.Ready, dbo.Blocks.Approve, 
                      dbo.Blocks.Sort, dbo.fWeb_GetLockUserName(dbo.Blocks.Id) AS LookedUserName, dbo.Blocks.TextLang3 AS BgColorIndex
FROM         dbo.Blocks LEFT OUTER JOIN
                      dbo.BlockType ON dbo.Blocks.BLockType = dbo.BlockType.id
WHERE     (dbo.Blocks.deleted = 0)
ORDER BY dbo.Blocks.Sort
GO


GO
-- Create View [dbo].[va_Blocks]
Print 'Create View [dbo].[va_Blocks]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO


CREATE VIEW dbo.va_Blocks
AS
SELECT     Blocks.Id, CAST(Blocks.Id AS varchar(50)) AS BlockId, Blocks.Name 
AS BlockName, Blocks.NewsId,
                      CAST(Blocks.BLockType AS varchar(50)) AS BlockTypeId, 
BlockType.TypeName AS BlockType, Blocks.BlockTime AS BlockCronoReal,
                      Blocks.TaskTime AS BlockCronoTask, Blocks.CalcTime AS 
BlockCronoCalc, Blocks.BlockText, Blocks.Sort,
                      CAST(Blocks.Sort AS varchar(50)) AS BlockNumber, 
CAST(Blocks.Ready AS char(1)) AS BlockReady, CAST(Blocks.Approve AS char(1))
                      AS BlockApprove, Blocks.Description AS 
BlockDescription, Users_3.UserName AS BlockAutor, Users_2.UserName AS 
BlockJockey,
                      Users_1.UserName AS BlockOperator, '--Current NFW 
user--' as CurrUser
FROM         Blocks LEFT OUTER JOIN
                      BlockType ON Blocks.BLockType = BlockType.id LEFT 
OUTER JOIN
                      Users Users_2 ON Blocks.JockeyId = Users_2.UserID LEFT 
OUTER JOIN
                      Users Users_1 ON Blocks.OperatorId = Users_1.UserID 
LEFT OUTER JOIN
                      Users Users_3 ON Blocks.CreatorId = Users_3.UserID
WHERE     (Blocks.ParentId = 0)


GO


GO
-- Create View [dbo].[va_dependblocks]
Print 'Create View [dbo].[va_dependblocks]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

CREATE VIEW dbo.va_dependblocks
AS
SELECT     CAST(Id AS varchar(50)) AS BlockDependId, Name AS BlockDependName, BlockText AS BlockDependFile, CAST(Ready AS char(1)) 
                      AS BlockDependReady, CAST(Approve AS char(1)) AS BlockDependApprove, Description AS BlockDependSourceLabel, CAST(Sort AS varchar(50)) 
                      AS BlockDependNumber, CalcTime AS BlockDependTimeCode, ParentId
FROM         dbo.Blocks
WHERE     (ParentId > 0)

GO


GO
-- Create View [dbo].[va_flags]
Print 'Create View [dbo].[va_flags]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

CREATE VIEW dbo.va_flags
AS
SELECT     TOP 100 PERCENT dbo.Blocks.Id AS blockid, flag = CASE WHEN dbo.BlockFlag.id IS NULL 
                      THEN dbo.Flags.name + ' -- 0' ELSE dbo.Flags.name + ' -- 1' END
FROM         dbo.FlagsToBlockTypes INNER JOIN
                      dbo.Flags ON dbo.FlagsToBlockTypes.FlagID = dbo.Flags.id RIGHT OUTER JOIN
                      dbo.Blocks ON dbo.FlagsToBlockTypes.BlockTypeID = dbo.Blocks.BLockType LEFT OUTER JOIN
                      dbo.BlockFlag ON dbo.Blocks.Id = dbo.BlockFlag.BlockId AND dbo.Flags.id = dbo.BlockFlag.FlagId
WHERE     (NOT (dbo.FlagsToBlockTypes.SortOrder IS NULL))
ORDER BY dbo.Blocks.Id, dbo.FlagsToBlockTypes.SortOrder

GO


GO
-- Create View [dbo].[va_log]
Print 'Create View [dbo].[va_log]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO



CREATE VIEW dbo.va_log
AS
SELECT     [log].EventDate,
                  event = CASE WHEN [log].Event = 1 THEN 'EVENT:app start'
                                         WHEN [log].Event = 2 THEN
'EVENT:login'
 WHEN [log].Event = 3 THEN 'EVENT:delete issue'
 WHEN [log].Event = 4 THEN 'EVENT:delete story'
 WHEN [log].Event = 5 THEN 'EVENT:logout'
 ELSE '' END,
 UserName = CASE WHEN Users.UserName is not null THEN 'USER:' + 
Users.UserName ELSE '' END,
 ComputerName = CASE WHEN [log].ComputerName is not null THEN 'COMP:' + 
[log].ComputerName ELSE '' END,
 ItemName = CASE WHEN ([log].Sect = 0 AND [log].Event = 3) THEN 'ITEM:' + 
News.Name
 WHEN ([log].Sect = 0 AND [log].Event = 4) THEN 'ITEM:' + Blocks.Name
 WHEN ([log].Sect = 1 AND [log].Event = 3) THEN 'ITEM:' + ArcNews.Name
 WHEN ([log].Sect = 1 AND [log].Event = 4) THEN 'ITEM:' + ArchBlocks.Name 
ELSE '' END,
 sect = CASE  WHEN ([log].Sect = 1 AND ([log].Event = 3 or [log].Event = 4)) 
THEN 'SECT:archive'
 WHEN ([log].Sect = 0 AND ([log].Event = 3 or [log].Event = 4)) THEN 
'SECT:issues' ELSE '' END,
        [log].UserID as UserID,  [log].Event as EventType,  CONVERT ( char
(8 ) , [log].EventDate  , 4 ) as EventDateDate, CONVERT( int,
[log].EventDate) as EventDateForSort
FROM         [log] LEFT OUTER JOIN
                      ArchBlocks ON [log].ItemID = ArchBlocks.Id LEFT OUTER
JOIN
                      ArcNews ON [log].ItemID = ArcNews.id LEFT OUTER JOIN
                      News ON [log].ItemID = News.id LEFT OUTER JOIN
                      Blocks ON [log].ItemID = Blocks.Id LEFT OUTER JOIN
                      Users ON [log].Userid = Users.UserID


GO


GO
-- Create View [dbo].[vBlocks]
Print 'Create View [dbo].[vBlocks]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
CREATE VIEW dbo.vBlocks
AS
SELECT     TOP (100) PERCENT dbo.Blocks.Id, dbo.Blocks.Name, dbo.GetTypeName(dbo.BlockType.id) AS TypeName, dbo.ConvertIntToCharTime(dbo.Blocks.BlockTime) AS BlockTime, 
                      dbo.ConvertIntToCharTime(dbo.Blocks.TaskTime) AS TaskTime, dbo.ConvertIntToCharTime(dbo.Blocks.CalcTime) AS CalcTime, dbo.Blocks.NewsId, dbo.Blocks.ParentId, dbo.Blocks.CreatorId, 
                      dbo.Blocks.Ready, dbo.Blocks.Approve, dbo.Blocks.Sort, dbo.Blocks.OperatorId, dbo.Blocks.JockeyId, dbo.Blocks.CutterId
FROM         dbo.Blocks LEFT OUTER JOIN
                      dbo.BlockType ON dbo.Blocks.BLockType = dbo.BlockType.id
WHERE     (dbo.Blocks.deleted = 0)
ORDER BY dbo.Blocks.Sort
GO


GO
-- Create Procedure [dbo].[sp_SendMessageAllActiveUsers]
Print 'Create Procedure [dbo].[sp_SendMessageAllActiveUsers]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO


----------------------------------------------
----------------------------------------------
CREATE PROCEDURE [dbo].[sp_SendMessageAllActiveUsers]
@text nvarchar(1025),
@from int

AS

DECLARE @id int
DECLARE @err_status int
DECLARE @err int

SET @err = 0

DECLARE st CURSOR FOR SELECT userid FROM vUsersMessagerList
OPEN st
FETCH NEXT FROM st INTO @id
WHILE @@fetch_status=0
BEGIN
	IF((SELECT active FROM users WHERE Userid=@id)>0)
	BEGIN
		INSERT INTO Messages ([text], [from], [to]) VALUES (@text, @from, @id)
		SET @err_status = @@ERROR
		IF @err_status <> 0 SET @err = 1
	END
 	FETCH NEXT FROM st INTO @id
END
CLOSE st
DEALLOCATE st
RETURN @err

GO


GO
-- Create Procedure [dbo].[sp_OutboxblockToCopybox]
Print 'Create Procedure [dbo].[sp_OutboxblockToCopybox]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO



----------------------------------------------
----------------------------------------------
CREATE PROCEDURE [dbo].[sp_OutboxblockToCopybox]
@in_Id  Bigint,
@TemplateId  Bigint,
@NewId Bigint
-- OUTPUT

AS

DECLARE @err_status int

INSERT INTO Blocks  ([Id], NewsId, [Name], BLockType, CreatorId, OperatorId, JockeyId, [Description], 
			BlockTime, TaskTime , CalcTime, BlockText, Sort) 
SELECT @NewId, @TemplateId, [Name], BLockType,  CreatorId, OperatorId , JockeyId , [Description], 
	BlockTime, TaskTime, CalcTime, BlockText, 0 
FROM OutboxBlocks WHERE [id]=@in_Id
SET @err_status = @@ERROR                 
IF (@err_status <> 0) RETURN 1
RETURN 0

GO


GO
-- Create Procedure [dbo].[sp_NewsToOutbox]
Print 'Create Procedure [dbo].[sp_NewsToOutbox]'
GO
SET ANSI_NULLS OFF
SET QUOTED_IDENTIFIER OFF
GO


GO




----------------------------------------------
----------------------------------------------
CREATE PROCEDURE [dbo].[sp_NewsToOutbox]
@outbox_id bigint,
@news_id bigint

AS

-- процедура копирует выпуск из расписания выпусков в исходящие 
-- входящие параметры @outbox_id - id группы получателей, @news_id - id выпуска, который надо скопировать
-- исходящий параметр - код ошибки. если 0 то все прошло успешно

-- news_to_outbox

DECLARE @New_OutboxNews_id bigint
DECLARE @Block_id bigint
DECLARE @New_OutboxBlock_id bigint

DECLARE @Error_Num int
DECLARE @Error_Count int

BEGIN TRANSACTION CopyNewsToOutboxNews

--создаем ключ для новой исходящей группы (выпуск)
SET @New_OutboxNews_id=convert(bigint,rand()*1000000000000000) 

-- копируем выпуск в исходящие группы

SET @Error_Num=2627
SET @Error_Count=0
WHILE (@Error_Num=2627) and (@Error_Count <10) 
BEGIN
	--создаем ключ для новой исходящей группы (выпуск)
	SET @New_OutboxNews_id=convert(bigint,rand()*1000000000000000) 
	SET @Error_Count=@Error_Count+1
	INSERT INTO OutboxNews ([id], [Name], EditorId, NewsDate, NewsTime, [Description], CalcTime, 
				TaskTime, Deleted, ProgramId, Cassete, Time_Code, GroupId, Duration)
	SELECT @New_OutboxNews_id, [Name], EditorId, NewsDate, NewsTime, [Description], CalcTime, TaskTime, 
		Deleted, ProgramId, Cassete, Time_Code, @outbox_id, Duration 
	FROM News WHERE [id]=@news_id
	SET @Error_Num=@@ERROR
END
IF  @Error_Num <> 0 
BEGIN
	ROLLBACK TRANSACTION CopyNewsToOutboxNews
	RETURN 1
END

DECLARE st cursor FOR SELECT [id] FROM Blocks WHERE newsid = @news_id  AND ParentId=0
OPEN st
FETCH NEXT FROM st INTO @Block_id
WHILE @@fetch_status=0
BEGIN

	SET @Error_Num=2627
	SET @Error_Count=0
	WHILE (@Error_Num=2627) AND (@Error_Count <10) 
		BEGIN
			SET @Error_Count=@Error_Count+1
			SET @New_OutboxBlock_id=(convert(bigint,rand()*1000000000000000))
     			INSERT INTO outboxblocks  ([Id], [Name], NewsId, ParentId, BLockType, CreatorId, 
							OperatorId, JockeyId, BlockTime, TaskTime, CalcTime, 
							BlockText, Sort, [Description], Ready,  Approve)
			SELECT @New_OutboxBlock_id, [Name], @New_OutboxNews_id, ParentId, BLockType, CreatorId, 
				OperatorId, JockeyId, BlockTime, TaskTime, CalcTime, BlockText, Sort, [Description], 
				Ready, Approve
			FROM  Blocks where id=@Block_id and deleted=0
			SET @Error_Num=@@ERROR
		END
		IF  @Error_Num <> 0 
		BEGIN
			CLOSE st
			DEALLOCATE st			
			ROLLBACK TRANSACTION CopyNewsToOutboxNews
			RETURN 1
		END
	FETCH NEXT FROM st INTO @Block_id
END
CLOSE st
DEALLOCATE st			
COMMIT TRANSACTION CopyNewsToOutboxNews
RETURN 0

GO


GO
-- Create Procedure [dbo].[sp_NewsToCopybox]
Print 'Create Procedure [dbo].[sp_NewsToCopybox]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

----------------------------------------------
----------------------------------------------
CREATE PROCEDURE [dbo].[sp_NewsToCopybox]
@News_id  Bigint,
@GroupId Bigint,
@UserId Bigint

AS

-- ????????? ??????????? ??????? ?? ?????????? ???????? ? ??????? ??? ???????
-- ???????? ????????? @News_id - ????? ?????? ???????? @GroupId - ????????? ? ????? ?????? ?????????? ??? ??? ??? ?????? ? 
-- ????????, @UserId - ? ?????? ?????? ??????? ????????? ? ??? ?????? ??????? ??????????
-- ????????? ???????? RETURN - ??? ?????? - ???? 0 ?? ???????

-- News_to_copyBox

DECLARE @New_CopyNews_id bigint
DECLARE @Block_id bigint
DECLARE @New_Block_id bigint
DECLARE @New_Subblock_id bigint
DECLARE @Subblock_id bigint

DECLARE @Error_Num int
DECLARE @Error_Count int


BEGIN TRANSACTION NewsToCopyNews

SET @Error_Num=2627
SET @Error_Count=0
WHILE (@Error_Num=2627) and (@Error_Count <10) 
BEGIN
        SET @New_CopyNews_id = (convert(bigint,rand()*1000000000000000))
	SET @Error_Count=@Error_Count+1
	INSERT INTO CopyNews ([id], [Name], EditorId, NewsDate, [Description], NewsTime, CalcTime, TaskTime, 
				ProgramId, Deleted, Cassete, Time_Code, Duration, GroupID)
	SELECT @New_CopyNews_id, [Name], @UserId, NewsDate, [Description], NewsTime, CalcTime, 
		TaskTime, ProgramId, Deleted, Cassete, Time_Code, Duration,@GroupId 
	FROM News WHERE ([id] = @News_id)
	SET @Error_Num=@@ERROR
END
if  @Error_Num <> 0 
BEGIN
	ROLLBACK TRANSACTION NewsToCopyNews
	RETURN 1
END
-- ???? ?? ??????? ???? ?????? ???????
DECLARE st cursor FOR SELECT [id] FROM Blocks where newsid = @News_id  AND ParentId=0 AND deleted=0
OPEN st
FETCH NEXT FROM st INTO @Block_id
WHILE @@fetch_status=0
BEGIN

	SET @Error_Num=2627
	SET @Error_Count=0
	WHILE (@Error_Num=2627) AND (@Error_Count <10) 
		BEGIN
			SET @Error_Count=@Error_Count+1
			SET @New_Block_id=(convert(bigint,rand()*1000000000000000))
     			INSERT INTO Blocks  ([Id], [Name], NewsId, ParentId, BLockType, CreatorId, OperatorId, 
						JockeyId,CutterId, BlockTime, TaskTime, CalcTime, BlockText, Sort, [Description], Ready,  Approve, TextLang1,TextLang2,TextLang3)
			SELECT @New_Block_id, [Name], @New_CopyNews_id, ParentId, BLockType, CreatorId, OperatorId, 
				JockeyId,CutterId, BlockTime, TaskTime, CalcTime, BlockText, Sort, [Description], Ready, Approve, TextLang1,TextLang2,TextLang3
			FROM  Blocks where id=@Block_id
			SET @Error_Num=@@ERROR
		END
		IF  @Error_Num <> 0 
		BEGIN
			CLOSE st
			DEALLOCATE st			
			ROLLBACK TRANSACTION NewsToCopyNews
			RETURN 1
		END
-- ???? ?? ??????? ???? ??????????? ?????? ?????
	IF(SELECT count([id]) FROM blocks WHERE ParentId=@Block_id) > 0
	BEGIN
		DECLARE st1 cursor FOR SELECT [id] FROM Blocks WHERE  ParentId=@Block_id
		OPEN st1
		FETCH NEXT FROM st1 INTO @Subblock_id
		WHILE @@fetch_status=0
    		BEGIN

			SET @Error_Num=2627
			SET @Error_Count=0
			WHILE (@Error_Num=2627) AND (@Error_Count <10) 
				BEGIN
					SET @Error_Count=@Error_Count+1
					SET @New_Subblock_id= (convert(bigint,rand()*1000000000000000))
					INSERT INTO Blocks ([Id], [Name], ParentId, NewsId, BLockType, CreatorId, 
								OperatorId, JockeyId, BlockTime, TaskTime, CalcTime, 
								BlockText, Sort, [Description], Ready, Approve)
					SELECT @New_Subblock_id, [Name], @New_Block_id, @New_CopyNews_id, BLockType, 
						CreatorId, OperatorId, JockeyId, BlockTime, TaskTime, CalcTime, 
						BlockText, Sort, [Description], Ready, Approve
					FROM  Blocks WHERE [id]=@Subblock_id
					SET @Error_Num=@@ERROR
				END
			IF  @Error_Num <> 0 
				BEGIN
					CLOSE st

					DEALLOCATE st

					CLOSE st1

					DEALLOCATE st1

					ROLLBACK TRANSACTION NewsToCopyNews
					RETURN 1
				END
			FETCH NEXT FROM st1 INTO @Subblock_id
		END
		CLOSE st1
		DEALLOCATE st1
	END
	FETCH NEXT FROM st INTO @Block_id
END                 
CLOSE st
DEALLOCATE st
COMMIT TRANSACTION NewsToCopyNews
RETURN 0

GO


GO
-- Create Procedure [dbo].[sp_ArchiveToNews]
Print 'Create Procedure [dbo].[sp_ArchiveToNews]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

----------------------------------------------
----------------------------------------------
CREATE PROCEDURE [dbo].[sp_ArchiveToNews] 
@id  Bigint

AS

-- ???????? ?????? ?? ?????? ? ?????????? ???????? ??????? ??? ????? ? ????????
-- ???? - id ???????
-- ????? - 0- ??, 1- ??????

-- Archive_to_news

DECLARE @Error_Num int
DECLARE @Error_Count int

Declare @News_id bigint
Declare @New_News_id bigint
Declare @Block_id bigint
Declare @New_Block_id bigint
Declare @Subblock_id bigint
Declare @New_Subblock_id bigint

IF (SELECT count([id]) FROM ArcNews WHERE [id] = @id) < 1 RETURN 1
SET @News_id  = @id

BEGIN TRANSACTION ArchiveToNews

SET @Error_Num=2627
SET @Error_Count=0
WHILE (@Error_Num=2627) and (@Error_Count <10) 
BEGIN
	SET @New_News_id = (convert(bigint,rand()*1000000000000000))
	SET @Error_Count=@Error_Count+1
	INSERT INTO News ([id], [Name], EditorId, NewsDate, [Description], NewsTime, 
				CalcTime, TaskTime, ProgramId, Deleted, Cassete, Time_Code, Duration)
	SELECT @New_News_id, [Name], EditorId, NewsDate, [Description], NewsTime, CalcTime, 
		TaskTime, ProgramId, Deleted, Cassete, Time_Code, Duration
	FROM ArcNews WHERE [id]=@News_id
             SET @Error_Num=@@ERROR
END
IF  @Error_Num <> 0 
BEGIN
	ROLLBACK TRANSACTION ArchiveToNews
	RETURN 1
END

DECLARE st cursor FOR SELECT [id] FROM ArchBlocks where newsid = @News_id  AND ParentId=0
OPEN st
FETCH NEXT FROM st INTO @Block_id
WHILE @@fetch_status=0
BEGIN
	SET @Error_Num=2627
	SET @Error_Count=0
	WHILE (@Error_Num=2627) AND (@Error_Count <10) 
		BEGIN
			SET @Error_Count=@Error_Count+1
			SET @New_Block_id=(convert(bigint,rand()*1000000000000000))
			INSERT INTO Blocks ([Id], [Name], NewsId, ParentId, BLockType, CreatorId, 
						OperatorId, JockeyId,CutterId, BlockTime, TaskTime, CalcTime, 
						BlockText, Sort, [Description], Ready, Approve,TextLang1,TextLang2,TextLang3 )
			SELECT @New_Block_id, [Name], @New_News_id, ParentId, BLockType, CreatorId, 
				OperatorId, JockeyId, CutterId, BlockTime, TaskTime, CalcTime, BlockText, Sort, 
				[Description], Ready, Approve, TextLang1,TextLang2,TextLang3
			FROM  ArchBlocks where id=@Block_id
		        SET @Error_Num=@@ERROR
		END
		IF  @Error_Num <> 0 
		BEGIN
			CLOSE st
			DEALLOCATE st			
			ROLLBACK TRANSACTION ArchiveToNews
			RETURN 1
		END

	IF(SELECT count([id]) FROM ArchBlocks WHERE ParentId=@Block_id) > 0
	BEGIN
		DECLARE st1 cursor FOR SELECT [id] FROM ArchBlocks WHERE  ParentId=@Block_id
		OPEN st1
		FETCH NEXT FROM st1 INTO @Subblock_id
		WHILE @@fetch_status=0
    		BEGIN
			SET @Error_Num=2627
			SET @Error_Count=0
			WHILE (@Error_Num=2627) AND (@Error_Count <10) 
				BEGIN
					SET @Error_Count=@Error_Count+1
					SET @New_Subblock_id= (convert(bigint,rand()*1000000000000000))
					INSERT INTO Blocks ([Id], [Name], ParentId, NewsId, BLockType, CreatorId, 
								OperatorId, JockeyId, BlockTime, TaskTime, CalcTime, 
								BlockText, Sort, [Description], Ready, Approve)
					SELECT @New_Subblock_id, [Name], @New_Block_id, @New_News_id, BLockType, 
						CreatorId, OperatorId, JockeyId, BlockTime, TaskTime, CalcTime, 
						BlockText, Sort, [Description], Ready, Approve
                       			FROM  ArchBlocks WHERE [id]=@Subblock_id
		             		SET @Error_Num=@@ERROR
				END
			IF  @Error_Num <> 0 
				BEGIN
					CLOSE st
					DEALLOCATE st
					CLOSE st1
					DEALLOCATE st1		
					ROLLBACK TRANSACTION ArchiveToNews
					RETURN 1
				END
			FETCH NEXT FROM st1 INTO @Subblock_id
		END
		CLOSE st1
		DEALLOCATE st1
	END
	FETCH NEXT FROM st INTO @Block_id
END
CLOSE st
DEALLOCATE st
COMMIT TRANSACTION ArchiveToNews
RETURN 0


GO


GO
-- Create Procedure [dbo].[sp_NewsBlockToOutbox]
Print 'Create Procedure [dbo].[sp_NewsBlockToOutbox]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO


----------------------------------------------
----------------------------------------------
CREATE PROCEDURE [dbo].[sp_NewsBlockToOutbox]
@outbox_id bigint,
@block_id bigint

AS

-- копирует блок из выпуска в исходящие, при этом создает выпуск в исходящих специально под один этот блок
-- возвращает 0 - ок, 1 - ошибка

--news_block_to_outbox

DECLARE @News_id bigint
DECLARE @New_News_id bigint
DECLARE @New_block_id bigint

DECLARE @Error_Num int
DECLARE @Error_Count int


SELECT @News_id=Newsid FROM Blocks  WHERE ([Id] = @block_id)  
IF (@News_id < 1) RETURN 1

BEGIN TRANSACTION NewsBlockToOutbox

SET @Error_Num=2627
SET @Error_Count=0
WHILE (@Error_Num=2627) AND (@Error_Count <10) 
BEGIN
	SET @Error_Count=@Error_Count+1
	SET @New_News_id=convert(bigint, rand()*1000000000000000)
	INSERT INTO OutboxNews ([id], [Name], EditorId, NewsDate, NewsTime, [Description], 
				CalcTime, TaskTime, Deleted, ProgramId, GroupId)
	SELECT @New_News_id, [Name], EditorId, NewsDate, NewsTime, [Description], 
		CalcTime, TaskTime, Deleted, ProgramId, @outbox_id 
	FROM News WHERE [id]=@News_id
        SET @Error_Num=@@ERROR
END
IF  @Error_Num <> 0 
BEGIN
	CLOSE st
	DEALLOCATE st			
	ROLLBACK TRANSACTION NewsBlockToOutbox
	RETURN 1
END

SET @Error_Num=2627
SET @Error_Count=0
WHILE (@Error_Num=2627) AND (@Error_Count <10) 
BEGIN
	SET @Error_Count=@Error_Count+1
	SET @New_block_id=convert(bigint,rand()*1000000000000000) 
	INSERT INTO OutboxBlocks ([Id], [Name], NewsId, ParentId, BLockType, CreatorId, OperatorId, JockeyId, 
				BlockTime, TaskTime, CalcTime, BlockText, Sort, [Description], Ready, Approve)
	SELECT @New_block_id, [Name], @New_News_id, ParentId, BLockType, CreatorId, OperatorId, JockeyId, 
		BlockTime, TaskTime, CalcTime, BlockText, Sort, [Description], Ready, Approve
	FROM  Blocks WHERE [id]=@block_id and deleted=0
        SET @Error_Num=@@ERROR
END
IF  @Error_Num <> 0 
BEGIN
	CLOSE st
	DEALLOCATE st			
	ROLLBACK TRANSACTION NewsBlockToOutbox
	RETURN 1
END

COMMIT TRANSACTION NewsBlockToOutbox
RETURN 0

GO


GO
-- Create Procedure [dbo].[sp_InputblockToCopybox]
Print 'Create Procedure [dbo].[sp_InputblockToCopybox]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO


----------------------------------------------
----------------------------------------------
CREATE PROCEDURE [dbo].[sp_InputblockToCopybox]
@in_Id  Bigint,
@TemplateId  Bigint,
@NewId Bigint

AS

-- ExcangeBlocksCopyToTemplate

DECLARE @err_status int

INSERT INTO Blocks  ([Id], NewsId, [Name], BLockType, CreatorId, OperatorId, JockeyId, [Description], 
			BlockTime, TaskTime , CalcTime, BlockText, Sort) 
SELECT @NewId, @TemplateId, [Name], BLockType,  CreatorId, OperatorId , JockeyId , 
	[Description], BlockTime, TaskTime, CalcTime, BlockText, 0 
FROM ExcangeBlocks WHERE [id]=@in_Id
SET @err_status = @@ERROR                 
IF (@err_status <> 0) RETURN 1
RETURN 0

GO


GO
-- Create Procedure [dbo].[sp_CopyUserRoles]
Print 'Create Procedure [dbo].[sp_CopyUserRoles]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO


----------------------------------------------
----------------------------------------------
CREATE PROCEDURE [dbo].[sp_CopyUserRoles]
@SourceUserId  int,
@SourceProgramID  int,
@DestUserId  int,
@DestProgramID  int

AS

DECLARE @ID int
DECLARE @RoleID int
DECLARE @RoleStr  nvarchar(255)

SELECT @ID = count(UserID) from Users WHERE UserID = @SourceUserId  
IF @ID <> 1 RETURN 1

SELECT @ID = count(ID) from Programs  WHERE  ID = @SourceProgramID  
IF @ID <> 1 RETURN 1 

SET @RoleStr  = ''

DECLARE st CURSOR for SELECT URoleID FROM UUserToProgram WHERE UserID = @SourceUserId  AND ProgramID = @SourceProgramID  
OPEN st
FETCH NEXT FROM st INTO @RoleID
WHILE @@fetch_status=0
BEGIN
	SELECT @RoleStr  = @RoleStr + str(@RoleID) + '%'
	FETCH NEXT FROM st INTO @RoleID
END
CLOSE st
DEALLOCATE st

EXECUTE @ID = spa_UpdateUserRoles @DestUserId,  @DestProgramID,  @RoleStr  
RETURN @ID

GO


GO
-- Create Procedure [dbo].[sp_CopyboxNewsToOutbox]
Print 'Create Procedure [dbo].[sp_CopyboxNewsToOutbox]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO


----------------------------------------------
----------------------------------------------
CREATE PROCEDURE [dbo].[sp_CopyboxNewsToOutbox]
@outbox_id bigint,
@news_id bigint

AS

-- процедура копирует выпуск из расписания выпусков в исходящие 
-- входящие параметры @outbox_id - id группы получателей, @news_id - id выпуска, который надо скопировать
-- исходящий параметр - код ошибки. если 0 то все прошло успешно

--CopyBoxNewsToOutbox

DECLARE @New_OutboxNews_id bigint
DECLARE @Block_id bigint
DECLARE @New_OutboxBlock_id bigint

DECLARE @Error_Num int
DECLARE @Error_Count int

BEGIN TRANSACTION CopyNewsToOutboxNews

--создаем ключ для новой исходящей группы (выпуск)
SET @New_OutboxNews_id=convert(bigint,rand()*1000000000000000) 

-- копируем выпуск в исходящие группы

SET @Error_Num=2627
SET @Error_Count=0
WHILE (@Error_Num=2627) and (@Error_Count <10) 
BEGIN
	--создаем ключ для новой исходящей группы (выпуск)
	SET @New_OutboxNews_id=convert(bigint,rand()*1000000000000000) 
	SET @Error_Count=@Error_Count+1
	INSERT INTO OutboxNews ([id], [Name], EditorId, NewsDate, NewsTime, [Description], 
			CalcTime, TaskTime, Deleted, ProgramId, Cassete, Time_Code, GroupId, Duration)
	SELECT @New_OutboxNews_id, [Name], EditorId, NewsDate, NewsTime, [Description], 
		CalcTime, TaskTime, Deleted, ProgramId, Cassete, Time_Code, @outbox_id, Duration 
        FROM CopyNews WHERE [id]=@news_id
        SET @Error_Num=@@ERROR
END
IF  @Error_Num <> 0 
BEGIN
	ROLLBACK TRANSACTION CopyNewsToOutboxNews
	RETURN 1
END


DECLARE st cursor FOR SELECT [id] FROM Blocks WHERE newsid = @news_id  AND ParentId=0
OPEN st
FETCH NEXT FROM st INTO @Block_id
WHILE @@fetch_status=0
BEGIN

	SET @Error_Num=2627
	SET @Error_Count=0
	WHILE (@Error_Num=2627) AND (@Error_Count <10) 
		BEGIN
			SET @Error_Count=@Error_Count+1
			SET @New_OutboxBlock_id=(convert(bigint,rand()*1000000000000000))
     			INSERT INTO outboxblocks  ([Id], [Name], NewsId, ParentId, BLockType, CreatorId, 
							OperatorId, JockeyId, BlockTime, TaskTime, CalcTime, 
							BlockText, Sort, [Description], Ready,  Approve)
			SELECT @New_OutboxBlock_id, [Name], @New_OutboxNews_id, ParentId, BLockType, CreatorId, 
				OperatorId, JockeyId, BlockTime, TaskTime, CalcTime, BlockText, Sort, [Description], 
				Ready, Approve
                       	FROM  Blocks where id=@Block_id and deleted=0
		        SET @Error_Num=@@ERROR
		END
		IF  @Error_Num <> 0 
		BEGIN
			CLOSE st
			DEALLOCATE st			
			ROLLBACK TRANSACTION CopyNewsToOutboxNews
			RETURN 1
		END
	FETCH NEXT FROM st INTO @Block_id
END
CLOSE st
DEALLOCATE st			
COMMIT TRANSACTION CopyNewsToOutboxNews
RETURN 0

GO


GO
-- Create Procedure [dbo].[sp_CopyBlockToOutbox]
Print 'Create Procedure [dbo].[sp_CopyBlockToOutbox]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO


----------------------------------------------
-- процедуры создаем
----------------------------------------------
CREATE PROCEDURE [dbo].[sp_CopyBlockToOutbox]
@outbox_id bigint,
@block_id bigint

AS

DECLARE @News_id bigint
DECLARE @New_News_id bigint
DECLARE @New_block_id bigint

DECLARE @Error_Num int
DECLARE @Error_Count int


SELECT @News_id=Newsid FROM Blocks  WHERE ([Id] = @block_id)  
IF (@News_id < 1) RETURN 1

BEGIN TRANSACTION CopyBlockToOutbox

SET @Error_Num=2627
SET @Error_Count=0
WHILE (@Error_Num=2627) AND (@Error_Count <10) 
BEGIN
	SET @Error_Count=@Error_Count+1
	SET @New_News_id=convert(bigint, rand()*1000000000000000)
	INSERT INTO OutboxNews ([id], [Name], EditorId, NewsDate, NewsTime, [Description], 
	CalcTime, TaskTime, Deleted, ProgramId, GroupId)
	SELECT @New_News_id, [Name], EditorId, NewsDate, NewsTime, [Description], CalcTime, 
	TaskTime, Deleted, ProgramId, @outbox_id FROM CopyNews WHERE [id]=@News_id
        SET @Error_Num=@@ERROR
END
IF @Error_Num <> 0 
BEGIN
	CLOSE st
	DEALLOCATE st			
	ROLLBACK TRANSACTION CopyBlockToOutbox
	RETURN 1
END

SET @Error_Num=2627
SET @Error_Count=0
WHILE (@Error_Num=2627) AND (@Error_Count <10) 
BEGIN
	SET @Error_Count=@Error_Count+1
	SET @New_block_id=convert(bigint,rand()*1000000000000000) 
	INSERT INTO OutboxBlocks ([Id], [Name], NewsId, ParentId, BLockType, CreatorId, OperatorId, 
				JockeyId, BlockTime, TaskTime, CalcTime, BlockText, Sort, [Description], Ready, Approve)
	SELECT @New_block_id, [Name], @New_News_id, ParentId, BLockType, CreatorId, OperatorId, 
		JockeyId, BlockTime, TaskTime, CalcTime, BlockText, Sort, [Description], Ready, Approve
	FROM  Blocks WHERE [id]=@block_id and deleted=0
        SET @Error_Num=@@ERROR
END
IF  @Error_Num <> 0 
BEGIN
	CLOSE st
	DEALLOCATE st			
	ROLLBACK TRANSACTION CopyBlockToOutbox
	RETURN 1
END

COMMIT TRANSACTION CopyBlockToOutbox
RETURN 0

GO


GO
-- Create Procedure [dbo].[sp_Cleardeleted]
Print 'Create Procedure [dbo].[sp_Cleardeleted]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO


----------------------------------------------
----------------------------------------------
CREATE PROCEDURE [dbo].[sp_Cleardeleted] 
AS
Delete from news where deleted=1
Delete from CopyNews where deleted=1
Delete from blocks where deleted=1

GO


GO
-- Create Procedure [dbo].[sp_ArchblockToCopybox]
Print 'Create Procedure [dbo].[sp_ArchblockToCopybox]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO

CREATE PROCEDURE [dbo].[sp_ArchblockToCopybox]
@in_Id  Bigint,
@TemplateId  Bigint,
@NewId Bigint

AS

-- ???????? ???? ? ?????????? ?? ?????? ? ???????
-- ???? @in_Id - id ??????????? ?????, @TemplateId - id ??????? ? ??????? ???? ??????????, @NewId - ????? id ?????
-- ???? 0- ??, 1 - ??????

-- ArchBlocksCopyToTemplate

DECLARE @New_subblock_id bigint
DECLARE @Subblock_id bigint

DECLARE @Error_Num int
DECLARE @Error_Count int

BEGIN TRANSACTION ArchblockToCopybox

INSERT INTO Blocks ([Id], NewsId, Blocktext,[Name],BLockType, CreatorId , OperatorId, JockeyId, 
			[Description], BlockTime, TaskTime, CalcTime, Sort,TextLang1,TextLang2,TextLang3) 
SELECT @NewId, @TemplateId, Blocktext, [name], BLockType, CreatorId , OperatorId, JockeyId, 
	[Description], BlockTime, TaskTime, CalcTime,0,TextLang1,TextLang2,TextLang3 
FROM ArchBlocks WHERE [id]=@in_Id
SET @Error_Num=@@ERROR
IF  @Error_Num <> 0 
BEGIN
	ROLLBACK TRANSACTION ArchblockToCopybox
	RETURN 1
END

IF(SELECT count([id]) FROM ArchBlocks WHERE ParentId=@in_Id) > 0
BEGIN
	DECLARE st1 cursor FOR SELECT [id] FROM ArchBlocks WHERE ParentId=@in_Id
	OPEN st1
	FETCH NEXT FROM st1 INTO @Subblock_id
	WHILE @@fetch_status=0
	BEGIN
		SET @Error_Num=2627
		SET @Error_Count=0
		WHILE (@Error_Num=2627) AND (@Error_Count <10) 
		BEGIN
			SET @Error_Count=@Error_Count+1
			SET @New_subblock_id= convert(bigint,rand()*1000000000000000) 
			INSERT INTO Blocks ([Id], [Name], NewsId, ParentId, BLockType, CreatorId, 
						OperatorId, JockeyId, BlockTime, TaskTime, CalcTime, 
						BlockText, Sort, [Description], Ready, Approve)
			SELECT @New_subblock_id, [Name], @TemplateId, @NewId, BLockType, CreatorId, 
				OperatorId, JockeyId, BlockTime, TaskTime, CalcTime, BlockText, Sort, 
				[Description], Ready, Approve
			FROM  ArchBlocks WHERE [id]=@Subblock_id
			SET @Error_Num=@@ERROR
		END
		IF  @Error_Num <> 0 
		BEGIN
			CLOSE st1
			DEALLOCATE st1		
			ROLLBACK TRANSACTION ArchblockToCopybox
			RETURN 1
		END
		FETCH NEXT FROM st1 INTO @Subblock_id
	END
	CLOSE st1
	DEALLOCATE st1
END
COMMIT TRANSACTION ArchblockToCopybox
RETURN 0
GO


GO
-- Create Procedure [dbo].[sp_NewsFromCopyboxTemplate]
Print 'Create Procedure [dbo].[sp_NewsFromCopyboxTemplate]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
----------------------------------------------
----------------------------------------------
CREATE PROCEDURE [dbo].[sp_NewsFromCopyboxTemplate] 
@News_Id bigint,
@EditorId int,
@ProgramId int

AS

-- ???????? ?? ??????? ??? ????????? ?? ??????? ??????
-- ????? RETURN 0- ??, 1- ?????? ???????, 2 - ?????? ??????? ???????

-- News_from_copybox_template

DECLARE @New_News_id bigint
DECLARE @Block_id bigint
DECLARE @New_block_id bigint
DECLARE @Subblock_id bigint
DECLARE @New_subblock_id bigint

DECLARE @Error_Num int
DECLARE @Error_Count int

BEGIN TRANSACTION NewsFromCopyboxTemplate


SET @Error_Num=2627
SET @Error_Count=0
WHILE (@Error_Num=2627) and (@Error_Count <10) 
BEGIN
	SET @Error_Count=@Error_Count+1
	SET @New_News_id=convert(bigint,rand()*1000000000000000) 
	INSERT INTO News ([id], [Name], EditorId, NewsDate, [Description], NewsTime, CalcTime, TaskTime, 
				ProgramId, Deleted, Cassete, Time_Code, Duration)
	SELECT @New_News_id, [Name], @EditorId, GetDate()+1, [Description], NewsTime, CalcTime, TaskTime, 
		@ProgramId, Deleted, Cassete, Time_Code, Duration FROM CopyNews WHERE ([id] = @News_Id)
	SET @Error_Num=@@ERROR
END
IF  @Error_Num <> 0 
BEGIN
	ROLLBACK TRANSACTION NewsFromCopyboxTemplate
	RETURN 1
END

DECLARE st cursor FOR SELECT [id] FROM Blocks WHERE newsid = @News_Id  and ParentId=0 AND deleted=0
OPEN st
FETCH NEXT FROM st INTO @Block_id
WHILE @@fetch_status=0
BEGIN
	SET @Error_Num=2627
	SET @Error_Count=0
	WHILE (@Error_Num=2627) AND (@Error_Count <10) 
	BEGIN
		SET @Error_Count=@Error_Count+1
		SET @New_block_id=convert(bigint,rand()*1000000000000000) 
		INSERT INTO Blocks ([Id], [Name], NewsId, ParentId, BLockType, CreatorId, OperatorId, 
				JockeyId, BlockTime, TaskTime, CalcTime, BlockText, Sort, [Description], 
				Ready, Approve, TextLang1,TextLang2,TextLang3  )
		SELECT @New_block_id, [Name], @New_News_id, ParentId, BLockType, CreatorId, OperatorId, 
			JockeyId, BlockTime, TaskTime, CalcTime, BlockText, Sort, [Description], Ready, Approve, TextLang1,TextLang2,TextLang3  
		FROM  Blocks WHERE [id]=@Block_id and deleted=0
	        SET @Error_Num=@@ERROR
	END
	IF  @Error_Num <> 0 
	BEGIN
		CLOSE st
		DEALLOCATE st			
		ROLLBACK TRANSACTION NewsFromCopyboxTemplate
		RETURN 1
	END

	IF(SELECT count([id]) FROM blocks WHERE ParentId=@Block_id) > 0
	BEGIN
		DECLARE st1 cursor FOR SELECT [id] FROM Blocks WHERE  ParentId=@Block_id
		OPEN st1
		FETCH NEXT FROM st1 INTO @Subblock_id
		WHILE @@fetch_status=0
    		BEGIN
			SET @Error_Num=2627
			SET @Error_Count=0
			WHILE (@Error_Num=2627) AND (@Error_Count <10) 
			BEGIN
				SET @Error_Count=@Error_Count+1
				SET @New_subblock_id= convert(bigint,rand()*1000000000000000) 
				INSERT INTO Blocks ([Id], [Name], NewsId, ParentId, BLockType, CreatorId, 
							OperatorId, JockeyId, BlockTime, TaskTime, CalcTime, 
							BlockText, Sort, [Description], Ready, Approve)
				SELECT @New_subblock_id, [Name], @New_News_id, @New_block_id, BLockType, 
					CreatorId, OperatorId, JockeyId, BlockTime, TaskTime, CalcTime, 
					BlockText, Sort, [Description], Ready, Approve
				FROM  Blocks WHERE [id]=@Subblock_id and deleted=0
				SET @Error_Num=@@ERROR
			END
			IF  @Error_Num <> 0 
			BEGIN
				CLOSE st

				DEALLOCATE st

				CLOSE st1

				DEALLOCATE st1

				ROLLBACK TRANSACTION NewsFromCopyboxTemplate
				RETURN 1
			END
			FETCH NEXT FROM st1 INTO @Subblock_id
		END
		CLOSE st1
		DEALLOCATE st1
	END
	FETCH NEXT FROM st INTO @Block_id
END
CLOSE st
DEALLOCATE st
COMMIT TRANSACTION NewsFromCopyboxTemplate

IF ((SELECT GroupID FROM CopyNews WHERE ([id] = @News_Id))<100)
BEGIN
	BEGIN TRANSACTION DeleteFromCopybox
	DELETE FROM CopyNews WHERE [id]=@News_Id
	SET @Error_Num=@@ERROR
	IF  @Error_Num <> 0 
	BEGIN
		ROLLBACK TRANSACTION DeleteFromCopybox
		RETURN 2
	END

	DELETE FROM Blocks WHERE NewsId=@News_Id
	SET @Error_Num=@@ERROR
	IF  @Error_Num <> 0 
	BEGIN
		ROLLBACK TRANSACTION DeleteFromCopybox
		RETURN 2
	END
	COMMIT TRANSACTION DeleteFromCopybox
END

RETURN 0
GO


GO
-- Create Procedure [dbo].[sp_SendMessageAllUsers]
Print 'Create Procedure [dbo].[sp_SendMessageAllUsers]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO


----------------------------------------------
----------------------------------------------
CREATE PROCEDURE [dbo].[sp_SendMessageAllUsers]
@text nvarchar(1025),
@from int

AS

/*DECLARE @id int

DECLARE st cursor FOR SELECT userid  Userid from vUsersMessagerList
OPEN st
fetch next from st into @id
while @@fetch_status=0
    begin
	INSERT INTO Messages	 (text, [from], [to]) VALUES(@text, @from, @id)
 	fetch next from st into @id
    end
CLOSE st
DEALLOCATE st
*/

DECLARE @err_status int

INSERT INTO Messages (text, [from], [to]) SELECT @text, @from, Userid FROM vUsersMessagerList
	SET @err_status = @@ERROR                 
	IF (@err_status <> 0) RETURN 1
RETURN 0

GO


GO
-- Create Procedure [dbo].[sp_UpdateNewsHrono]
Print 'Create Procedure [dbo].[sp_UpdateNewsHrono]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

----------------------------------------------
----------------------------------------------
CREATE PROCEDURE [dbo].[sp_UpdateNewsHrono]
@blockid bigint

AS

-- суммирует хронометражи блоков в выпуск
-- входящий параметр @blockid - id блока, который был изменен, удален, добавлен.
-- возвращает 0 в случае успеха или код ошибки 

-- update_news_hrono

DECLARE @newsid bigint
DECLARE @CalcTime bigint 
DECLARE @NewsTime bigint 
DECLARE @TaskTime bigint
DECLARE @err_status int
SET  @CalcTime = 0
SET  @NewsTime = 0
SET  @TaskTime = 0

SELECT @newsid=newsid FROM blocks WHERE [id]=@blockid
IF ((SELECT count([id]) FROM blocks WHERE newsid=@newsid and deleted=0  and ParentID=0) >0 ) 
	SELECT @CalcTime = sum(CalcTime),   @TaskTime = sum(TaskTime) 
	FROM blocks WHERE newsid=@newsid and deleted=0 and ParentID=0
	BEGIN TRANSACTION UpdateNewsHrono
	UPDATE News SET CalcTime =@CalcTime,    TaskTime = @TaskTime  WHERE  ([id] = @newsid)
	SET @err_status = @@ERROR 
	IF @err_status <> 0
	BEGIN
		ROLLBACK TRANSACTION UpdateNewsHrono
		RETURN 1
	END
COMMIT TRANSACTION UpdateNewsHrono
DECLARE @SCT int
SET @SCT=0
SET @CalcTime=0
DECLARE st cursor FOR SELECT [id]  FROM Blocks WHERE newsid = @newsid and ParentId=0 and deleted=0  
OPEN st
DECLARE @block_id bigint
FETCH NEXT FROM st INTO @block_id
WHILE @@fetch_status=0
BEGIN
	SELECT @CalcTime = CalcTime, @NewsTime = BlockTime FROM blocks WHERE ID=@block_id 
    IF (@NewsTime=0)
	BEGIN
		SELECT  @SCT=@CalcTime+@SCT
	END
	SELECT @SCT=@SCT+@NewsTime

	FETCH NEXT FROM st INTO @block_id
END
CLOSE st
DEALLOCATE st
UPDATE News SET   NewsTime =@SCT   WHERE  ([id] = @newsid)
RETURN 0
GO


GO
-- Create Procedure [dbo].[sp_SortChildrenBlocks]
Print 'Create Procedure [dbo].[sp_SortChildrenBlocks]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO



----------------------------------------------
----------------------------------------------
CREATE PROCEDURE [dbo].[sp_SortChildrenBlocks]
@ParentId bigint
AS

-- сортирует подчиненные блоки
-- входной параметр - id блока папаши
-- выходной код ошибки или 0

DECLARE @order int
DECLARE @num int
DECLARE @block_id bigint
DECLARE @err_status int

BEGIN TRANSACTION SortChildrenBlocks

DECLARE st cursor FOR SELECT [id],Sort FROM Blocks WHERE ParentId=@ParentId ORDER BY Sort
OPEN st
SET @num=0
FETCH NEXT FROM st INTO @block_id,@order
WHILE @@fetch_status=0
BEGIN
	SET @num=@num+10
	UPDATE blocks SET sort=@num WHERE [id] = @block_id 
	SET @err_status = @@ERROR
	IF @err_status <> 0
	BEGIN
		CLOSE st
		DEALLOCATE st
		ROLLBACK TRANSACTION SortChildrenBlocks
		RETURN 1
	END
	FETCH NEXT FROM st INTO @block_id,@order
END
CLOSE st
DEALLOCATE st
COMMIT TRANSACTION SortChildrenBlocks
RETURN 0

GO


GO
-- Create Procedure [dbo].[ImportUser]
Print 'Create Procedure [dbo].[ImportUser]'
GO
SET ANSI_NULLS OFF
SET QUOTED_IDENTIFIER OFF
GO


GO

CREATE PROCEDURE dbo.ImportUser 
@UserId int,
@RoleId int
AS
declare @cn int
SELECT    @cn =COUNT(UserID) FROM         vUsersRights WHERE  (RightID =@RoleId) AND (UserID =@UserId)
if(@cn>0)
begin 
	return 1;
end
return 0;
GO


GO
-- Create Procedure [dbo].[InsetIntoBlocsFromNF2]
Print 'Create Procedure [dbo].[InsetIntoBlocsFromNF2]'
GO
SET ANSI_NULLS OFF
SET QUOTED_IDENTIFIER OFF
GO


GO

CREATE proc dbo.InsetIntoBlocsFromNF2
@id bigint,
@name nvarchar(255),
@newsid bigint,
@blocktype int,
@operator nvarchar(255),
@creator nvarchar(255),
@jockey nvarchar(255),
@blocktime bigint,
@blocktext text,
@sort int
AS


declare @operatorid int
declare @creatorid int
declare @jockeyid int

select @operatorid=userid from users where username like @operator
select @creatorid=userid from users where username like @creator
select @jockeyid=userid from users where username like @jockey
if (@operatorid is null)
begin
	SET @operatorid=0
end
if (@creatorid is null)
begin
	SET @creatorid=0
end
if (@jockeyid is null)
begin
	SET @jockeyid=0
end

INSERT INTO Blocks
                      (Id, Name, NewsId, BLockType, CreatorId, OperatorId, JockeyId, BlockTime, BlockText, Sort)
VALUES     (@id,@name,@newsid,@blocktype,@creatorid,@operator,@jockeyid,@blocktime,@blocktext,@sort)
GO


GO
-- Create Procedure [dbo].[pMedia_AddImage]
Print 'Create Procedure [dbo].[pMedia_AddImage]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[pMedia_AddImage]
	-- Add the parameters for the stored procedure here
	@Id int,
	@Status int,
	@Path ntext,
	@Message nvarchar(255)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @BlockId bigint
	DECLARE @Count int
	
	SELECT @BlockId=MediaId, @Count=PICCount FROM tWeb_MediaTask WHERE ID=@Id
	
	UPDATE tWeb_MediaTask SET PICStatus=@Status,PICCount=@Count+1,PICMessage=@Message, PICLastDate=GetDate() WHERE id=@Id
	
	IF @Status>0
	BEGIN
		UPDATE Blocks SET TextLang2=@Path WHERE ID=@BlockId
	END
END
GO


GO
-- Create Procedure [dbo].[pMedia_AddLRV]
Print 'Create Procedure [dbo].[pMedia_AddLRV]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[pMedia_AddLRV]
	-- Add the parameters for the stored procedure here
	@Id int,
	@Status int,
	@Path ntext,
	@Message nvarchar(255)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @BlockId bigint
	DECLARE @Count int
	
	SELECT @BlockId=MediaId, @Count=LRVCount FROM tWeb_MediaTask WHERE ID=@Id
	
	UPDATE dbo.tWeb_MediaTask SET LRVStatus=@Status,LRVCount=@Count+1,LRVMessage=@Message, LRVLastDate=GetDate() WHERE id=@Id
	
	IF @Status>0
	BEGIN
		UPDATE Blocks SET TextLang1=@Path WHERE ID=@BlockId
	END
END
GO


GO
-- Create Procedure [dbo].[pMedia_Delete]
Print 'Create Procedure [dbo].[pMedia_Delete]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
Create PROCEDURE [dbo].[pMedia_Delete]
	@MediaId bigint
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	UPDATE Blocks SET deleted=1 WHERE Id=@MediaId
	
	return 1
END
GO


GO
-- Create Procedure [dbo].[spWeb_UpdateBlockDescFromExtView]
Print 'Create Procedure [dbo].[spWeb_UpdateBlockDescFromExtView]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE dbo.spWeb_UpdateBlockDescFromExtView
	-- Add the parameters for the stored procedure here
	@Guid nvarchar(255),
	@text nvarchar(255)
AS
BEGIN
	DECLARE @BlockId bigint
	SELECT @BlockId=BlockId FROM dbo.tWeb_TempLink WHERE URL=@Guid
	IF @BlockId IS NOT NULL
	BEGIN
		UPDATE Blocks Set Description = @text WHERE ID=@BlockId
	END
END
GO


GO
-- Create Procedure [dbo].[sp_BlockToCopybox]
Print 'Create Procedure [dbo].[sp_BlockToCopybox]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

----------------------------------------------
----------------------------------------------
CREATE PROCEDURE [dbo].[sp_BlockToCopybox]
@in  Bigint,
@TemplateId  Bigint,
@NewId Bigint
AS

-- ???????? ???? ? ?????????? ?? ??????? ? ?????????? ? ???????
-- ???? @in - id ??????????? ?????, @TemplateId - id ??????? ? ??????? ???? ??????????, @NewId - ????? id ?????
-- ???? 0- ??, 1 - ??????

-- BlocksCopyToTemplate

DECLARE @in_Id Bigint
DECLARE @New_subblock_id bigint
DECLARE @Subblock_id bigint

DECLARE @Error_Num int
DECLARE @Error_Count int

SET @in_Id = @in

BEGIN TRANSACTION BlockToCopybox

INSERT INTO Blocks  ([Id], NewsId, Blocktext, parentid, [Name], BLockType, CreatorId, OperatorId, JockeyId,CutterId,
			[Description], BlockTime, TaskTime, CalcTime, Sort , TextLang1,TextLang2,TextLang3 )
SELECT @NewId, @TemplateId, Blocktext, 0, [Name], BLockType, CreatorId, OperatorId, JockeyId,CutterId,[Description], 
	BlockTime, TaskTime, CalcTime,0, TextLang1,TextLang2,TextLang3  
FROM Blocks WHERE [id]=@in_Id
SET @Error_Num=@@ERROR
IF  @Error_Num <> 0 
BEGIN
	ROLLBACK TRANSACTION BlockToCopybox
	RETURN 1
END

IF(SELECT count([id]) FROM Blocks WHERE ParentId=@in_Id) > 0
BEGIN
	DECLARE st1 cursor FOR SELECT [id] FROM Blocks WHERE ParentId=@in_Id
	OPEN st1
	FETCH NEXT FROM st1 INTO @Subblock_id
	WHILE @@fetch_status=0
	BEGIN
		SET @Error_Num=2627
		SET @Error_Count=0
		WHILE (@Error_Num=2627) AND (@Error_Count <10) 
		BEGIN
			SET @Error_Count=@Error_Count+1
			SET @New_subblock_id= convert(bigint,rand()*1000000000000000) 
			INSERT INTO Blocks ([Id], [Name], NewsId, ParentId, BLockType, CreatorId, OperatorId, 
						JockeyId, BlockTime, TaskTime, CalcTime, BlockText, Sort, [Description], 
						Ready, Approve)
			SELECT @New_subblock_id, [Name], @TemplateId, @NewId, BLockType, CreatorId, OperatorId, 
				JockeyId, BlockTime, TaskTime, CalcTime, BlockText, Sort, [Description], Ready, Approve
			FROM  Blocks WHERE [id]=@Subblock_id
			SET @Error_Num=@@ERROR
		END
		IF  @Error_Num <> 0 
		BEGIN
			CLOSE st1
			DEALLOCATE st1		
			ROLLBACK TRANSACTION BlockToCopybox
			RETURN 1
		END
		FETCH NEXT FROM st1 INTO @Subblock_id
	END
	CLOSE st1
	DEALLOCATE st1
END
COMMIT TRANSACTION BlockToCopybox
RETURN 0

GO


GO
-- Create Procedure [dbo].[pWeb_CopyBlockTONewNewsWITHnoSORT]
Print 'Create Procedure [dbo].[pWeb_CopyBlockTONewNewsWITHnoSORT]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[pWeb_CopyBlockTONewNewsWITHnoSORT]
 
	@BlocksId bigint,
	@NewNewsId bigint,
	@SortOrder int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
DECLARE @NewBlockId bigint 
DECLARE @Subblock_id bigint 
DECLARE @Error_Num int

SELECT @NewBlockId=ABS(CHECKSUM(NEWID())) % 99999999999

	INSERT INTO Blocks 
	( Id, Name, NewsId, ParentId, BLockType, CreatorId, OperatorId, JockeyId, CutterId, BlockTime, TaskTime, CalcTime, BlockText, Sort, Description, Ready, Approve, deleted, TextLang1, TextLang2, TextLang3)
	SELECT (@NewBlockId), Name, @NewNewsId, ParentId, BLockType, CreatorId, OperatorId, JockeyId, CutterId, BlockTime, TaskTime, CalcTime, BlockText, @SortOrder, Description, Ready, Approve, deleted, TextLang1, TextLang2, TextLang3
FROM BLOCKS
	WHERE Id=@BlocksId AND ParentId=0
	
	IF(SELECT count([id]) FROM Blocks WHERE ParentId=@BlocksId) > 0
BEGIN
	DECLARE st1 cursor FOR SELECT [id] FROM Blocks WHERE ParentId=@BlocksId
	OPEN st1
	FETCH NEXT FROM st1 INTO @Subblock_id
	WHILE @@fetch_status=0
	BEGIN
		
			INSERT INTO Blocks ([Id], [Name], NewsId, ParentId, BLockType, CreatorId, OperatorId, 
						JockeyId, CutterId, BlockTime, TaskTime, CalcTime, BlockText, Sort, [Description], 
						Ready, Approve, TextLang1, TextLang2, TextLang3)
			SELECT convert(bigint,ABS(CHECKSUM(NEWID())) % 99999999999), [Name], @NewNewsId, @NewBlockId, BLockType, CreatorId, OperatorId, 
				JockeyId, CutterId, BlockTime, TaskTime, CalcTime, BlockText, Sort, [Description], Ready, Approve, TextLang1, TextLang2, TextLang3
			FROM  Blocks WHERE [id]=@Subblock_id
			
		
			
		FETCH NEXT FROM st1 INTO @Subblock_id
	END
	CLOSE st1
	DEALLOCATE st1
	
	--EXECUTE [sp_SortBlocks] @NewnewsId
END


END


GO


GO
-- Create Procedure [dbo].[sp_BlockFromTemplate]
Print 'Create Procedure [dbo].[sp_BlockFromTemplate]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO



----------------------------------------------
CREATE PROCEDURE [dbo].[sp_BlockFromTemplate]
@BlockId bigint,
@NewsId bigint,
@AfterBlockId bigint
AS

-- BlockFromTemplate

DECLARE @New_Block_id bigint
DECLARE @Error_Num int
DECLARE @Error_Count int

IF ((SELECT CopyNews.GroupID FROM Blocks INNER JOIN CopyNews ON Blocks.NewsId = CopyNews.[id] WHERE Blocks.[Id] = @BlockId)>=100)
BEGIN
	SET @Error_Num=2627
	SET @Error_Count=0
	WHILE (@Error_Num=2627) AND (@Error_Count <10) 
	BEGIN
		SET @Error_Count=@Error_Count+1
		SET @New_Block_id=(convert(bigint,rand()*1000000000000000))
		INSERT INTO Blocks ([Id], [Name], NewsId, ParentId, BLockType, CreatorId, 
				OperatorId, JockeyId,CutterId, BlockTime, TaskTime, CalcTime, BlockText, 
				Sort, [Description], Ready, Approve, deleted, TextLang1,TextLang2,TextLang3)
		SELECT @New_Block_id, [Name], @NewsId, ParentId, BLockType, CreatorId, OperatorId, 
			JockeyId,CutterId, BlockTime, TaskTime, CalcTime, BlockText, Sort, [Description], 
			Ready, Approve, deleted, TextLang1,TextLang2,TextLang3 
		FROM blocks WHERE [id]=@BlockId
		SET @Error_Num=@@ERROR
	END
	IF  @Error_Num <> 0 RETURN 1
END
ELSE
BEGIN
	UPDATE Blocks SET NewsId =@NewsId WHERE [id]=@BlockId
	SET @Error_Num=@@ERROR
	IF  @Error_Num <> 0 RETURN 1
END
	UPDATE Blocks SET Sort=(SELECT     Sort+5 FROM    Blocks WHERE [Id]=@AfterBlockId ) WHERE  [id]=@New_Block_id
RETURN 0


GO


GO
-- Create Procedure [dbo].[pMedia_Rename]
Print 'Create Procedure [dbo].[pMedia_Rename]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE dbo.pMedia_Rename
	@MediaId bigint,
	@Name nvarchar(255)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	UPDATE Blocks SET Name=@Name WHERE Id=@MediaId
	
	return 1
END
GO


GO
-- Create Procedure [dbo].[pMedia_UpdateSort]
Print 'Create Procedure [dbo].[pMedia_UpdateSort]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE dbo.pMedia_UpdateSort
	@MediaId bigint,
	@SortOrder int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	UPDATE Blocks SET Sort=@SortOrder WHERE ID=@MediaId
	return 1
END
GO


GO
-- Create Procedure [dbo].[pMedia_UpdateStatus]
Print 'Create Procedure [dbo].[pMedia_UpdateStatus]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[pMedia_UpdateStatus]
	@MediaId bigint,
	@Ready bit,
	@Approve bit
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	UPDATE Blocks SET Ready=@Ready, Approve=@Approve  WHERE Id=@MediaId
	
	return 1
END
GO


GO
-- Create Procedure [dbo].[pWeb_BlockDescFromExtViewUpdate]
Print 'Create Procedure [dbo].[pWeb_BlockDescFromExtViewUpdate]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE dbo.pWeb_BlockDescFromExtViewUpdate
	-- Add the parameters for the stored procedure here
	@Guid nvarchar(255),
	@text nvarchar(255)
AS
BEGIN
	DECLARE @BlockId bigint
	SELECT @BlockId=BlockId FROM dbo.tWeb_TempLink WHERE URL=@Guid
	IF @BlockId IS NOT NULL
	BEGIN
		UPDATE Blocks Set Description = @text WHERE ID=@BlockId
	END
END
GO


GO
-- Create Procedure [dbo].[sp_SortBlocks]
Print 'Create Procedure [dbo].[sp_SortBlocks]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO

----------------------------------------------
----------------------------------------------
CREATE PROCEDURE [dbo].[sp_SortBlocks]
@news_id bigint

AS

DECLARE @order int
DECLARE @num int
DECLARE @block_id bigint
DECLARE @err_status int

BEGIN TRANSACTION SortBlocks

DECLARE st cursor FOR SELECT [id],Sort FROM Blocks WHERE newsid = @news_id and ParentId=0 and deleted=0  ORDER BY Sort
OPEN st
SET @num=0
FETCH NEXT FROM st INTO @block_id,@order
WHILE @@fetch_status=0
BEGIN
	SET @num=@num+10
	UPDATE Blocks SET Sort=@num WHERE [id] = @block_id 
	SET @err_status = @@ERROR
	IF @err_status <> 0
	BEGIN
		CLOSE st
		DEALLOCATE st
		ROLLBACK TRANSACTION SortBlocks
		RETURN 1
	END
	FETCH NEXT FROM st INTO @block_id,@order
END
CLOSE st
DEALLOCATE st
COMMIT TRANSACTION SortBlocks
RETURN 0

GO


GO
-- Create Procedure [dbo].[pWeb_BlockDescFromLiteEditorUpdtate]
Print 'Create Procedure [dbo].[pWeb_BlockDescFromLiteEditorUpdtate]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[pWeb_BlockDescFromLiteEditorUpdtate]
	-- Add the parameters for the stored procedure here
	@BlockId bigint,
	@text ntext
AS
BEGIN
	
	BEGIN
		UPDATE Blocks Set Description = @text WHERE ID=@BlockId
	END
END
GO


GO
-- Create Function [dbo].[fWeb_ListUsersTOBlockEditorsList]
Print 'Create Function [dbo].[fWeb_ListUsersTOBlockEditorsList]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE FUNCTION [dbo].[fWeb_ListUsersTOBlockEditorsList] 
(	
	-- Add the parameters for the function here
	@BlockId bigint
)
RETURNS TABLE 
AS
RETURN 
(
	Select ProgramID, RightID, UserID, UserName, UserRate From vWeb_UserRight WHERE (RightID IN (32,33,34,57))AND ProgramID=dbo.fWeb_ProgramIdFromBlockId(@BlockId)
)
GO


GO
-- Create View [dbo].[vWeb_CopyNewsForBlocksHead]
Print 'Create View [dbo].[vWeb_CopyNewsForBlocksHead]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
CREATE VIEW dbo.vWeb_CopyNewsForBlocksHead
AS
SELECT     dbo.CopyNews.id, dbo.CopyNews.Name, dbo.Users.UserName, dbo.CopyNews.NewsDate, dbo.CopyNews.NewsTime, dbo.CopyNews.CalcTime, dbo.CopyNews.TaskTime, 
                      dbo.fWebGetNewsCalcTime(dbo.CopyNews.id) AS Expr1, dbo.fWebGetNewsRealTime(dbo.CopyNews.id) AS RealTime, dbo.CopyNews.Duration
FROM         dbo.CopyNews LEFT OUTER JOIN
                      dbo.Users ON dbo.CopyNews.EditorId = dbo.Users.UserID
GO


GO
-- Create View [dbo].[vImportUsers]
Print 'Create View [dbo].[vImportUsers]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

CREATE VIEW dbo.vImportUsers
AS
SELECT     UserID, UserName, pass, Active, Last_time, ReadRate, deleted, PrintTemplateId, BlockTypeId, AbrigeBlockTypeId, OnlyMy, Enter, 
                      dbo.GetUserRight(UserID, 32) AS IsOperator, dbo.GetUserRight(UserID, 33) AS IsJockey, dbo.GetUserRight(UserID, 34) AS IsAutor, 
                      dbo.GetUserRight(UserID, 23) AS IsOwner
FROM         dbo.Users

GO


GO
-- Create View [dbo].[vWeb_NewsForBlocksHead]
Print 'Create View [dbo].[vWeb_NewsForBlocksHead]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
CREATE VIEW dbo.vWeb_NewsForBlocksHead
AS
SELECT     dbo.News.id, dbo.News.Name, CASE WHEN dbo.Users.UserName IS NULL THEN '' ELSE dbo.Users.UserName END AS UserName, dbo.News.NewsDate, dbo.News.NewsTime, dbo.News.CalcTime, 
                      dbo.News.TaskTime, CASE WHEN dbo.fWebGetNewsCalcTime(dbo.News.id) IS NULL THEN 0 ELSE dbo.fWebGetNewsCalcTime(dbo.News.id) END AS Expr1, 
                      dbo.fWebGetNewsRealTime(dbo.News.id) AS RealTime, dbo.News.Duration
FROM         dbo.News LEFT OUTER JOIN
                      dbo.Users ON dbo.News.EditorId = dbo.Users.UserID
GO


GO
-- Create Procedure [dbo].[sp_NewsToArchive]
Print 'Create Procedure [dbo].[sp_NewsToArchive]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO


----------------------------------------------
----------------------------------------------
CREATE PROCEDURE [dbo].[sp_NewsToArchive] 
@News_id  Bigint

AS

-- ????????? ?????? ? ????? ??????? ????????? ???? ???? ? ??????? ??????
-- ??????? ???????? @News_id  - id ???????
-- ?????  RETURN ??? ?????? ??? 0 ???? ??????? ??? 2 ???? 

-- News_To_Archive

DECLARE @rustv_err_status int
DECLARE @err_status int

IF ((SELECT rustv FROM programs WHERE [id] IN (SELECT programid FROM news WHERE [id]=@News_id))>0)
EXECUTE @rustv_err_status = sp_NewsToOutbox 0, @News_id
IF (@rustv_err_status <> 0) SET @rustv_err_status = @rustv_err_status*10

BEGIN TRANSACTION NewsToArchive

INSERT INTO ArcNews  ([id], [Name], EditorId, NewsDate, [Description], NewsTime, CalcTime, TaskTime, ProgramId, 
			Cassete, Time_Code, Duration, Deleted)
SELECT [id], [Name], EditorId, NewsDate, [Description], NewsTime, CalcTime, TaskTime, 
	ProgramId, Cassete, Time_Code, Duration, Deleted
FROM News WHERE [id]=@News_id
SET @err_status = @@ERROR
IF (@err_status <> 0)
BEGIN
	ROLLBACK TRANSACTION NewsToArchive
	RETURN @rustv_err_status+1
END

INSERT INTO ArchBlocks ([Id], [Name], NewsId, ParentId, BLockType, CreatorId, OperatorId, JockeyId,CutterId, BlockTime, 
			TaskTime, CalcTime, BlockText, Sort, [Description], Ready, Approve, TextLang1,TextLang2,TextLang3)
SELECT [Id], [Name], NewsId, ParentId, BLockType, CreatorId, OperatorId, JockeyId, CutterId, BlockTime, TaskTime, 
	CalcTime, BlockText, Sort, [Description], Ready, Approve, TextLang1,TextLang2,TextLang3
FROM  Blocks WHERE NewsId=@News_id and deleted=0
----------------------------------

INSERT INTO dbo.tWeb_ArchiveBlockHistory
SELECT * FROM  dbo.tWeb_BlockHistory
WHERE blockId in (SELECT id FROM Blocks WHERE NewsId=@News_id and deleted=0)
                 
DELETE FROM   tWeb_BlockHistory 
WHERE blockId in (SELECT id FROM Blocks WHERE NewsId=@News_id and deleted=0)
              
---------------------------------
SET @err_status = @@ERROR
IF (@err_status <> 0)
BEGIN
	ROLLBACK TRANSACTION NewsToArchive
	RETURN @rustv_err_status+1
END



/*
DECLARE @Block_id BIGINT
DECLARE stArchive CURSOR FOR SELECT [id] FROM Blocks WHERE ParentId IN (SELECT [Id] FROM  Blocks WHERE NewsId=@News_id and deleted=0)
OPEN stArchive
FETCH NEXT FROM stArchive INTO @Block_id
WHILE @@fetch_status=0
	BEGIN
	DECLARE @ProgramID INT
	DECLARE @AProgramId INT
	DECLARE @APlaceId INT
	SELECT id, Name, ParentId FROM Blocks WHERE ID=@Block_id
	SELECT     @ProgramID=Programs.id  FROM         Blocks INNER JOIN 		                      News ON Blocks.NewsId = News.id INNER JOIN		                      Programs ON News.ProgramId = Programs.id		WHERE     (Blocks.Id = @Block_id)
	SELECT     @APlaceId=ID FROM     NewsFactoryArchive.dbo.tPlace WHERE     (Name = (SELECT name FROM Blocks WHERE ID=@Block_id)) ORDER BY InsertDate DESC
	SELECT     @AProgramId=ID FROM         NewsFactoryArchive.dbo.tProgram WHERE     (Deleted = 0) AND (FactoryId = @ProgramID)
	IF ((@APlaceId IS NOT NULL) AND (@AProgramId IS NOT NULL))
	BEGIN
		DECLARE @AMaterialId BIGINT
		DECLARE @Blocktext nvarchar(4000)
		SELECT @Blocktext=convert(nvarchar(4000),BlockText) FROM BLOCKS WHERE ID=(SELECT ParentId FROM BLOCKS WHERE ID=@Block_id)
		INSERT INTO NewsFactoryArchive.dbo.tMaterial (ProgramID, Description, Title ) SELECT @AProgramId ,@BlockText, Name   FROM BLOCKS WHERE ID=(SELECT ParentId FROM BLOCKS WHERE ID=@Block_id)
		SELECT @AMaterialId=MAX(ID) FROM NewsFactoryArchive.dbo.tMaterial
		UPDATE NewsFactoryArchive.dbo.tMaterial SET MaterialGroupID =(SELECT min(ID) FROM  NewsFactoryArchive.dbo.tMaterialGroup), MaterialTypeID=(SELECT min(ID) FROM  NewsFactoryArchive.dbo.tMaterialType) WHERE id=@AMaterialId
		
		
		UPDATE NewsFactoryArchive.dbo.tMaterial SET BroadcastDate=(SELECT     2+convert(int, News.NewsDate)  FROM         Blocks INNER JOIN                       News ON Blocks.NewsId = News.id  WHERE     (Blocks.Id = (SELECT ParentId FROM BLOCKS WHERE ID=@Block_id))) WHERE id=@AMaterialId
		


		DECLARE @buf nvarchar(255)
		SELECT     @buf=Users.UserName FROM         Blocks INNER JOIN  Users ON Blocks.CreatorId = Users.UserID WHERE Blocks.Id=(SELECT ParentId FROM BLOCKS WHERE ID=@Block_id)
		
		IF (@buf IS NOT NULL ) 
		BEGIN
			UPDATE NewsFactoryArchive.dbo.tMaterial SET Autor =@buf WHERE id=@AMaterialId
		END		
		SET @buf=NULL
		SELECT     @buf=Users.UserName FROM         Blocks INNER JOIN  Users ON Blocks.OperatorId = Users.UserID WHERE Blocks.Id=(SELECT ParentId FROM BLOCKS WHERE ID=@Block_id)
		IF( @buf IS NOT NULL ) 
		BEGIN
			UPDATE NewsFactoryArchive.dbo.tMaterial SET Cammen =@buf WHERE id=@AMaterialId
		END
		INSERT INTO NewsFactoryArchive.dbo.tMaterialToPlace(MaterialID, PlaceID, Timecode, FileName, Comments )
		SELECT   @AMaterialId, @APlaceId,  BlockTime+570 ,convert(nvarchar(1024), BlockText), convert(nvarchar(255), Description ) FROM         Blocks WHERE     (ID=@Block_id)
	END
	FETCH NEXT FROM stArchive INTO @Block_id
END
CLOSE stArchive
DEALLOCATE stArchive	

SET @err_status = @@ERROR
IF (@err_status <> 0)
BEGIN
	ROLLBACK TRANSACTION NewsToArchive
	RETURN @rustv_err_status+1
END

DELETE FROM blocks WHERE NewsId=@News_id
SET @err_status = @@ERROR
IF (@err_status <> 0)
BEGIN
	ROLLBACK TRANSACTION NewsToArchive
	RETURN @rustv_err_status+1
END
*/
DELETE FROM news WHERE [id]=@News_id
SET @err_status = @@ERROR
IF (@err_status <> 0)
BEGIN
	ROLLBACK TRANSACTION NewsToArchive
	RETURN @rustv_err_status+1
END

COMMIT TRANSACTION NewsToArchive


RETURN @rustv_err_status

GO


GO
-- Create Procedure [dbo].[sp_BlockUp]
Print 'Create Procedure [dbo].[sp_BlockUp]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO


----------------------------------------------
----------------------------------------------
CREATE PROCEDURE [dbo].[sp_BlockUp]
@BlockId bigint

AS

DECLARE @News_id bigint
DECLARE @Sort int
DECLARE @Parent_id bigint
DECLARE @err_status int
DECLARE @Sort_Status int

SELECT @Parent_id=ParentId, @News_id=NewsId, @Sort = Sort FROM blocks WHERE [id]=@BlockId

UPDATE Blocks SET Sort =(@Sort-15) WHERE ([Id]=@BlockId)
SET @err_status = @@ERROR
IF @err_status <> 0 RETURN 1

IF (@Parent_id=0)
BEGIN
	EXECUTE @Sort_Status = sp_SortBlocks @News_id
	SET @Sort_Status = @Sort_Status*10
END
ELSE
BEGIN
	EXECUTE @Sort_Status = sp_SortChildrenBlocks @Parent_id
	SET @Sort_Status = @Sort_Status*10
END
RETURN @Sort_Status


GO


GO
-- Create Procedure [dbo].[pWeb_CopyBlockTONewNews]
Print 'Create Procedure [dbo].[pWeb_CopyBlockTONewNews]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[pWeb_CopyBlockTONewNews]
 
	@BlocksId bigint,
	@NewNewsId bigint
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
DECLARE @NewBlockId bigint 
DECLARE @Subblock_id bigint 
DECLARE @Error_Num int

SELECT @NewBlockId=ABS(CHECKSUM(NEWID())) % 99999999999

	INSERT INTO Blocks 
	( Id, Name, NewsId, ParentId, BLockType, CreatorId, OperatorId, JockeyId,CutterId, BlockTime, TaskTime, CalcTime, BlockText, Sort, Description, Ready, Approve, deleted, TextLang1, TextLang2, TextLang3)
	SELECT (@NewBlockId), Name + ' - copy', @NewNewsId, ParentId, BLockType, CreatorId, OperatorId, JockeyId,CutterId, BlockTime, TaskTime, CalcTime, BlockText, Sort, Description, Ready, Approve, deleted, TextLang1, TextLang2, TextLang3
FROM BLOCKS
	WHERE Id=@BlocksId AND ParentId=0
	
	IF(SELECT count([id]) FROM Blocks WHERE ParentId=@BlocksId) > 0
BEGIN
	DECLARE st1 cursor FOR SELECT [id] FROM Blocks WHERE ParentId=@BlocksId
	OPEN st1
	FETCH NEXT FROM st1 INTO @Subblock_id
	WHILE @@fetch_status=0
	BEGIN
		
			INSERT INTO Blocks ([Id], [Name], NewsId, ParentId, BLockType, CreatorId, OperatorId, 
						JockeyId,CutterId, BlockTime, TaskTime, CalcTime, BlockText, Sort, [Description], 
						Ready, Approve, TextLang1,TextLang2,TextLang3)
			SELECT convert(bigint,ABS(CHECKSUM(NEWID())) % 99999999999), [Name], @NewNewsId, @NewBlockId, BLockType, CreatorId, OperatorId, 
				JockeyId, CutterId, BlockTime, TaskTime, CalcTime, BlockText, Sort, [Description], Ready, Approve, TextLang1,TextLang2,TextLang3
			FROM  Blocks WHERE [id]=@Subblock_id
			
		
			
		FETCH NEXT FROM st1 INTO @Subblock_id
	END
	CLOSE st1
	DEALLOCATE st1
	
	EXECUTE [sp_SortBlocks] @NewnewsId
END


END


GO


GO
-- Create Procedure [dbo].[sp_BlockDown]
Print 'Create Procedure [dbo].[sp_BlockDown]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO


----------------------------------------------
----------------------------------------------
CREATE PROCEDURE [dbo].[sp_BlockDown]
@BlockId bigint

AS

-- BlockDown

DECLARE @News_id bigint
DECLARE @Sort int
DECLARE @Parent_id bigint
DECLARE @err_status int
DECLARE @Sort_Status int

SELECT @Parent_id=ParentId, @News_id=NewsId, @Sort = Sort FROM blocks WHERE [id]=@BlockId

UPDATE Blocks SET Sort =(@Sort+15) WHERE ([Id]=@BlockId)
SET @err_status = @@ERROR
IF @err_status <> 0 RETURN 1

IF (@Parent_id=0)
BEGIN
	EXECUTE @Sort_Status = sp_SortBlocks @News_id
	SET @Sort_Status = @Sort_Status*10
END
ELSE
BEGIN
	EXECUTE @Sort_Status = sp_SortChildrenBlocks @Parent_id
	SET @Sort_Status = @Sort_Status*10
END
RETURN @Sort_Status


GO


GO
-- Create Procedure [dbo].[pWeb_InsertMediaToBlock]
Print 'Create Procedure [dbo].[pWeb_InsertMediaToBlock]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[pWeb_InsertMediaToBlock]
	-- Add the parameters for the stored procedure here
	@BlockId bigint,
	@FilePath ntext,
	@MediaName nvarchar(255),
	@MediaTypeID int
AS
BEGIN
	
	DECLARE @count int
	SELECT @count=COUNT(ID) From Blocks WHERE Id=@BlockId AND Deleted=0 AND ParentId=0
	
	if @count=0 
		BEGIN
			RETURN -1
		END
		
	DECLARE @MediaBlockId bigint
	SET @MediaBlockId=(convert(bigint,rand()*10000000000000))
	
	DECLARE @SortOrder int
	SELECT @SortOrder=MAX(sort) From Blocks WHERE ParentId=@BlockId AND Deleted=0 AND ParentId=0
	
	IF @SortOrder IS NULL
	BEGIN
	 SET @SortOrder=0
	END
	ELSE
	BEGIN
		SET @SortOrder=@SortOrder+10
	END
	DECLARE @newsId bigint
	SELECT @newsId=newsid FROM Blocks WHERE Id=@BlockId AND deleted=0 AND ParentId=0
	
	INSERT INTO Blocks(Id, Name, NewsId, Sort, ParentId, Description,BlockText , BLockType  ) VALUES (@MediaBlockId, @MediaName,@NewsId, @SortOrder, @BlockId, @MediaName,@FilePath, @MediaTypeID )
	EXECUTE dbo.sp_SortChildrenBlocks @BlockId
	INSERT INTO tWeb_MediaTask (MediaId) VALUES(@MediaBlockId)
	
	DECLARE @ret int
	SELECT @ret=MAX(id) FROM tWeb_MediaTask
	RETURN @ret 
	
END
GO


GO
-- Create Procedure [dbo].[pWeb_NewBlock]
Print 'Create Procedure [dbo].[pWeb_NewBlock]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[pWeb_NewBlock]
	@NewsId bigint,
	@AfterBlockId  bigint
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @NewId int
	DECLARE @Sort int
	SET @Sort=0;
	SELECT @NewId=convert(bigint,rand()*100000000)
	IF @AfterBlockId>0
	BEGIN
	SELECT @Sort=Sort+5 FROM BLOCKS WHERE ID=@AfterBlockId
		IF @Sort IS NULL
		BEGIN
			SET @Sort=0
		END
	END
	
	INSERT INTO Blocks(Id, Name, NewsId, Sort) VALUES (@NewId, '',@NewsId, @Sort )
	EXECUTE [sp_SortBlocks] @newsId
	
RETURN @NewId
	
END

GO


GO
-- Create Procedure [dbo].[pWeb_InsertRssToNews]
Print 'Create Procedure [dbo].[pWeb_InsertRssToNews]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[pWeb_InsertRssToNews] 
	@MessageId int,
	@NewsId bigint,
	@CreatorId int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @BlockId bigint
	SET @BlockId=(convert(bigint,rand()*1000000000000000))

INSERT INTO Blocks (Id, ParentId, NewsId, BLockType, CreatorId, Name, BlockText)
   SELECT  @BlockId, 0,@NewsId, 4, @CreatorId, dbo.tWeb_RssSources.Name+': '+ dbo.tWeb_IncomingRssMessages.Name, 
   cast (dbo.tWeb_IncomingRssMessages.Lid as nvarchar(max))
   + ' ((DATE:' + CONVERT(NVARCHAR, dbo.tWeb_IncomingRssMessages.Date,20) +' LINK:' 
   + cast(dbo.tWeb_IncomingRssMessages.Link   as nvarchar(max)) +'))'                    
FROM         dbo.tWeb_IncomingRssMessages INNER JOIN
                      dbo.tWeb_RssSources ON dbo.tWeb_IncomingRssMessages.SourceId = dbo.tWeb_RssSources.id WHERE dbo.tWeb_IncomingRssMessages.id=@MessageId

EXECUTE sp_SortBlocks @NewsId

END
GO


GO
-- Create Procedure [dbo].[sp_ChangeBlockPosition]
Print 'Create Procedure [dbo].[sp_ChangeBlockPosition]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

----------------------------------------------
----------------------------------------------
CREATE PROCEDURE [dbo].[sp_ChangeBlockPosition]
@Block_id bigint,
@Afterblock_id bigint

AS

DECLARE @News_id bigint
DECLARE @Sort int
DECLARE @Parent_id bigint
DECLARE @Afterparent_id bigint
DECLARE @NewParent_id bigint

DECLARE @Sort_Status int
DECLARE @err_status int

IF @Block_id <= 0  RETURN 1
IF @Afterblock_id < 0  RETURN 1
IF @Afterblock_id = @Block_id RETURN 0

SELECT @Parent_id=ParentId, @News_id=NewsId FROM blocks WHERE [id]=@Block_id
IF @Afterblock_id = 0 -- если блок в начало
BEGIN
	IF @Parent_id <> 0 RETURN 0 -- если 2 уровня в начало уходит ничего не делая но без оштибки
	SET @Afterparent_id = 0
END
ELSE
BEGIN
	SELECT @Afterparent_id=ParentId FROM blocks WHERE [id]=@Afterblock_id
END


IF @Parent_id = 0 -- если перемещаем блок 1 уровня
BEGIN
	IF @Afterblock_id = 0  -- если в начало выпуска
	BEGIN
		SET @Sort = 0
	END 
	ELSE
	BEGIN
		IF @Afterparent_id = 0 -- если под блок 1 уровня
		BEGIN
			SELECT @Sort = Sort FROM blocks WHERE [id]=@Afterblock_id
		END 
		ELSE  -- если под блок 2 уровня, берем родителя этого блока 2 уровня и вставляем под родителя
		BEGIN
			SELECT @Sort = Sort FROM blocks WHERE [id]=@Afterparent_id
		END 
	END

	UPDATE Blocks SET Sort =(@Sort+5) WHERE ([Id]=@Block_id)
	SET @err_status = @@ERROR
	IF @err_status <> 0 RETURN 1
	DECLARE @Block1Id bigint
	----------------- для перемещения блока, если тянем за блок, имеющий подводку
	
	--
	--SET @Block1Id=NULL
	--SELECT  @Block1Id=id FROM Blocks WHERE NewsId=@News_id AND  deleted=0 AND [name] = 'Подводка к ' + (SELECT Name FROM Blocks where [id]=@Block_id)
	--IF (@Block1Id IS NOT NULL ) AND (@Block1Id>0)
	--BEGIN
	--	UPDATE Blocks SET Sort =(@Sort+3) WHERE ([Id]=@Block1Id)
	--END

	
	----------------- для перемещения блока, если тянем за подводку
	SET @Block1Id=NULL
	
	
	SELECT  @Block1Id=id FROM Blocks WHERE NewsId=@News_id AND  deleted=0 AND  'Подводка к ' +[name] = (SELECT Name FROM Blocks where [id]=@Block_id)
	IF (@Block1Id IS NOT NULL ) AND (@Block1Id>0)
	BEGIN
		UPDATE Blocks SET Sort =(@Sort+7) WHERE ([Id]=@Block1Id)
	END

	
	EXECUTE @Sort_Status = sp_SortBlocks @News_id
	IF @Sort_Status <> 0 RETURN @Sort_Status*10
END

ELSE -- если перемещаем блок 2 уровня

BEGIN
	IF @Afterparent_id =  0 -- если прямо под блок 1 уровня
	BEGIN
		SET @Sort = 0
		SET @NewParent_id = @Afterblock_id
	END
	ELSE -- если под блок 2 уровня
	BEGIN
		SELECT @Sort = Sort FROM blocks WHERE [id]= @Afterblock_id
		SET @NewParent_id = @Afterparent_id 
	END

	UPDATE Blocks SET Sort =(@Sort+5), ParentId = @NewParent_id WHERE ([Id]=@Block_id)
	SET @err_status = @@ERROR
	IF @err_status <> 0 RETURN 1
	EXECUTE  @Sort_Status = sp_SortChildrenBlocks @NewParent_id
	IF @Sort_Status <> 0 RETURN @Sort_Status*10

END
RETURN 0

GO


GO
-- Create Procedure [dbo].[pWeb_CopyBlockGroupsTONewNews]
Print 'Create Procedure [dbo].[pWeb_CopyBlockGroupsTONewNews]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[pWeb_CopyBlockGroupsTONewNews]
 
	@BlocksId bigint,
	@NewNewsId bigint
AS
BEGIN
	DECLARE @GroupCount INT
	SELECT  @GroupCount=COUNT(id)  FROM [Blocks] WHERE (TextLang3 not like '0' OR TextLang3 not like '') and Id=@BlocksId
	if(@GroupCount=0)
	BEGIN
		EXEC pWeb_CopyBlockTONewNews @BlocksId, @NewNewsId
		RETURN
	END
	DECLARE @CurrNewsId BIGINT
	SELECT @CurrNewsId=NewsID FROM [Blocks] Where ID=@BlocksId
	DECLARE @i int
	set @i=0
	----
	DECLARE @CurrBlockId bigint 
	DECLARE stBl cursor FOR SELECT [id] FROM Blocks WHERE NewsId=@CurrNewsId AND Deleted=0 AND ParentId=0 AND TextLang3 LIKE (SELECT TextLang3 FROM BLOCKS WHERE ID=@BlocksId ) ORDER BY Sort
	OPEN stBl
	FETCH NEXT FROM stBl INTO @CurrBlockId
	WHILE @@fetch_status=0
	BEGIN
		
		EXEC pWeb_CopyBlockTONewNewsWITHnoSORT @CurrBlockId,  @NewNewsId, @i
		SET @i=@i+1
		FETCH NEXT FROM stBl INTO @CurrBlockId
	END

	CLOSE stBl
	DEALLOCATE stBl

EXECUTE [sp_SortBlocks] @NewnewsId
END
GO


GO
-- Create Trigger [dbo].[delete Blocks on Copy News]
Print 'Create Trigger [dbo].[delete Blocks on Copy News]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO





CREATE TRIGGER dbo.[delete Blocks on Copy News] ON [dbo].[CopyNews] 
FOR DELETE 
AS
DELETE FROM blocks WHERE NewsId in (SELECT [id] FROM deleted)

GO


GO
-- Create Trigger [dbo].[update time exch]
Print 'Create Trigger [dbo].[update time exch]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

CREATE TRIGGER dbo.[update time exch] ON dbo.ExchangeNews 
FOR INSERT, UPDATE, DELETE 
AS
UPDATE    [Update] SET  [Time] =GetDate() WHERE     (id = 3)

GO


GO
-- Create Trigger [dbo].[update update]
Print 'Create Trigger [dbo].[update update]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

CREATE TRIGGER dbo.[update update] on dbo.[Update] 
FOR INSERT, UPDATE, DELETE 
AS
UPDATE    [Update] SET  [Time] =GetDate() WHERE     (id = 6)

GO


GO
-- Create Trigger [dbo].[update time arch condition]
Print 'Create Trigger [dbo].[update time arch condition]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

CREATE TRIGGER dbo.[update time arch condition] ON dbo.NewsGroupsConditions 
FOR INSERT, UPDATE, DELETE 
AS
UPDATE    [Update] SET  [Time] =GetDate() WHERE     (id = 2)

GO


GO
-- Create Trigger [dbo].[replaseEmailToAlias]
Print 'Create Trigger [dbo].[replaseEmailToAlias]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO

CREATE TRIGGER dbo.replaseEmailToAlias ON [dbo].[ExchangeNews] 
FOR INSERT
AS

declare @id bigint
declare @milo varchar(255)

select @id=id, @milo=name from inserted


GO


GO
-- Create Trigger [dbo].[update time blocks]
Print 'Create Trigger [dbo].[update time blocks]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
CREATE TRIGGER dbo.[update time blocks] ON dbo.Blocks 
FOR INSERT, UPDATE, DELETE
AS
UPDATE [Update] SET [Time] =GetDate() WHERE ([id] = 5)
GO


GO
-- Create Trigger [dbo].[update EXCGroups Query]
Print 'Create Trigger [dbo].[update EXCGroups Query]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO


CREATE TRIGGER dbo.[update EXCGroups Query] ON dbo.[EXCGroups Query] 
FOR INSERT, UPDATE, DELETE 
AS
UPDATE [EXCGroups Query] SET data_query= GetDate() WHERE [id] in (SELECT [id] FROM inserted)

GO


GO
-- Create Trigger [dbo].[time update Outbox]
Print 'Create Trigger [dbo].[time update Outbox]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

CREATE TRIGGER dbo.[time update Outbox] ON dbo.OutboxNews 
FOR INSERT, UPDATE, DELETE 
AS
UPDATE    [Update] SET  [Time] =GetDate() WHERE     (id = 9)

GO


GO
-- Create Trigger [dbo].[delete_0_newsID]
Print 'Create Trigger [dbo].[delete_0_newsID]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
CREATE TRIGGER dbo.[delete_0_newsID] ON dbo.Blocks 
FOR INSERT, UPDATE, DELETE 
AS
delete from blocks where newsid=0
GO


GO
-- Create Trigger [dbo].[TRIG_UPDATEUseers]
Print 'Create Trigger [dbo].[TRIG_UPDATEUseers]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE TRIGGER dbo.TRIG_UPDATEUseers 
   ON  dbo.tWeb_SessionGuid
   AFTER  INSERT,UPDATE
AS 
BEGIN
	
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
DECLARE @USERID INT
	SELECT @USERID=USERID From INSERTED
	Update dbo.Users SET  ACTIVE=1, Last_Time=GetDate() WHERE UserId=@UserId
	
    -- Insert statements for trigger here

END
GO


GO
-- Create Trigger [dbo].[time update]
Print 'Create Trigger [dbo].[time update]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

CREATE TRIGGER dbo.[time update] ON dbo.News 
FOR INSERT, UPDATE, DELETE 
AS
UPDATE    [Update] SET  [Time] =GetDate() WHERE     (id = 1)

GO


GO
-- Create Trigger [dbo].[Messages update]
Print 'Create Trigger [dbo].[Messages update]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO


CREATE TRIGGER dbo.[Messages update] ON dbo.Messages 
FOR INSERT
AS
UPDATE Messages SET data = GetDate() WHERE [id] in (SELECT [id] FROM inserted)

GO


GO
-- Create Trigger [dbo].[cascade_delete_outboxblocks]
Print 'Create Trigger [dbo].[cascade_delete_outboxblocks]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO



CREATE TRIGGER dbo.[cascade_delete_outboxblocks] ON [dbo].[OutboxNews] 
FOR DELETE 
AS
DELETE FROM OutboxBlocks WHERE [Newsid] in (SELECT [id] FROM deleted)

GO


GO
-- Create Trigger [dbo].[update time copybox]
Print 'Create Trigger [dbo].[update time copybox]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

CREATE TRIGGER dbo.[update time copybox] ON dbo.CopyNews 
FOR INSERT, UPDATE, DELETE 
AS
UPDATE    [Update] SET  [Time] =GetDate() WHERE     (id = 4)

GO


GO
-- Create Trigger [dbo].[update time]
Print 'Create Trigger [dbo].[update time]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

CREATE TRIGGER dbo.[update time] ON dbo.ArcNews 
FOR INSERT, UPDATE, DELETE 
AS
UPDATE    [Update] SET  [Time] =GetDate() WHERE     (id = 2)

GO


GO
-- Create Trigger [dbo].[del_depend_roles_from_user_program]
Print 'Create Trigger [dbo].[del_depend_roles_from_user_program]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

CREATE TRIGGER dbo.[del_depend_roles_from_user_program] ON [dbo].[URoles] 
FOR DELETE
AS
declare @RoleUndelete bit
select @RoleUndelete=URoleUndelete from deleted
if @RoleUndelete <> 0
begin
print 'удаление запрещено'
rollback transaction
end
else
begin
   declare @RoleId int
   declare @UserId int
   declare @ProgramId int
   select @RoleId=URoleid from deleted
   declare del_cursor cursor static for
   select UserId, programid from UUserToProgram where URoleid = @Roleid
   OPEN del_cursor 
   FETCH NEXT FROM del_cursor INTO @UserId, @ProgramId
   WHILE @@FETCH_STATUS = 0
   BEGIN
   delete from UUserToProgram 
      where UserId=@UserId and programid=@ProgramId and programid>0 and uroleid <> 30 
      FETCH NEXT FROM del_cursor INTO @UserId,@ProgramId
   END
   CLOSE del_cursor 
   DEALLOCATE del_cursor 
   delete from uusertoprogram where uroleid = @roleid
end








GO


GO
-- Create Trigger [dbo].[update ocking user name]
Print 'Create Trigger [dbo].[update ocking user name]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

CREATE TRIGGER dbo.[update ocking user name] ON dbo.Locking 
FOR INSERT
AS

update locking  set username=(select UserName from users where userid=(select userid from inserted )) where id=(select id from inserted )

GO


GO
-- Create Trigger [dbo].[cascade_delete_emails]
Print 'Create Trigger [dbo].[cascade_delete_emails]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO



CREATE TRIGGER dbo.[cascade_delete_emails] ON [dbo].[Outbox] 
FOR DELETE 
AS
DELETE FROM [Outbox e-mail] WHERE OutboxId in (SELECT [id] FROM deleted)

GO


GO
-- Create Trigger [dbo].[update time update]
Print 'Create Trigger [dbo].[update time update]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

CREATE TRIGGER dbo.[update time update] ON dbo.Locking 
FOR INSERT, UPDATE, DELETE 
AS

UPDATE    [Update] SET  [Time] =GetDate() WHERE     (id = 6)

GO


GO
-- Create Trigger [dbo].[delete Blocks Exchange]
Print 'Create Trigger [dbo].[delete Blocks Exchange]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO


CREATE TRIGGER dbo.[delete Blocks Exchange] ON [dbo].[ExchangeNews] 
FOR DELETE 
AS
DELETE FROM ExcangeBlocks WHERE NewsId in (SELECT [id] FROM deleted)

GO


GO
-- Create Trigger [dbo].[delete Blocks]
Print 'Create Trigger [dbo].[delete Blocks]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO


CREATE TRIGGER [dbo].[delete Blocks] ON [dbo].[News] 
FOR DELETE 
AS
DELETE FROM blocks WHERE NewsId in (SELECT [id] FROM deleted)

GO


GO
-- Create Trigger [dbo].[update time locking]
Print 'Create Trigger [dbo].[update time locking]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO


CREATE TRIGGER dbo.[update time locking] ON dbo.Locking 
FOR INSERT, UPDATE
AS
UPDATE locking SET [time]=GetDate() WHERE [id] in (SELECT [id] FROM inserted)

GO


GO
-- Create Trigger [dbo].[Update users timeout]
Print 'Create Trigger [dbo].[Update users timeout]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO


GO

CREATE TRIGGER dbo.[Update users timeout] ON dbo.Users 
FOR INSERT, UPDATE, DELETE 
AS

UPDATE    [Update] SET  [Time] =GetDate() WHERE     (id = 8)

GO


GO
-- Create Trigger [dbo].[delete locking for inactive users]
Print 'Create Trigger [dbo].[delete locking for inactive users]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO

CREATE TRIGGER dbo.[delete locking for inactive users] ON [dbo].[Users] 
FOR INSERT, UPDATE, DELETE 
AS

delete from locking where UserId in (SELECT     UserID FROM  Users  WHERE     (Active = 0))
GO


GO
-- Create Trigger [dbo].[update date search]
Print 'Create Trigger [dbo].[update date search]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO


GO


CREATE TRIGGER dbo.[update date search] ON dbo.[ArcGroups Query] 
FOR INSERT
AS
UPDATE [ArcGroups Query] SET data_query= GetDate() WHERE [id] in (SELECT [id] FROM inserted)

GO


GO
-- Create Foreign Key FK_UUserToProgram_Programs On UUserToProgram
Print 'Create Foreign Key FK_UUserToProgram_Programs On UUserToProgram'
GO
ALTER TABLE [dbo].[UUserToProgram]
	WITH NOCHECK
	ADD CONSTRAINT [FK_UUserToProgram_Programs]
	FOREIGN KEY ([ProgramID]) REFERENCES [dbo].[Programs] ([id])
	ON DELETE CASCADE
	NOT FOR REPLICATION
ALTER TABLE [dbo].[UUserToProgram]
	CHECK CONSTRAINT [FK_UUserToProgram_Programs]

GO


GO
-- Create Foreign Key FK_UUserToProgram_URoles On UUserToProgram
Print 'Create Foreign Key FK_UUserToProgram_URoles On UUserToProgram'
GO
ALTER TABLE [dbo].[UUserToProgram]
	WITH NOCHECK
	ADD CONSTRAINT [FK_UUserToProgram_URoles]
	FOREIGN KEY ([URoleID]) REFERENCES [dbo].[URoles] ([URoleID])
	NOT FOR REPLICATION
ALTER TABLE [dbo].[UUserToProgram]
	NOCHECK CONSTRAINT [FK_UUserToProgram_URoles]

GO


GO
-- Create Foreign Key FK_UUserToProgram_Users On UUserToProgram
Print 'Create Foreign Key FK_UUserToProgram_Users On UUserToProgram'
GO
ALTER TABLE [dbo].[UUserToProgram]
	WITH NOCHECK
	ADD CONSTRAINT [FK_UUserToProgram_Users]
	FOREIGN KEY ([UserID]) REFERENCES [dbo].[Users] ([UserID])
	ON DELETE CASCADE
	NOT FOR REPLICATION
ALTER TABLE [dbo].[UUserToProgram]
	CHECK CONSTRAINT [FK_UUserToProgram_Users]

GO


GO

-- Create Foreign Key FK_tWeb_IncomingRssMessages_tWeb_RssSources On tWeb_IncomingRssMessages
Print 'Create Foreign Key FK_tWeb_IncomingRssMessages_tWeb_RssSources On tWeb_IncomingRssMessages'
GO
ALTER TABLE [dbo].[tWeb_IncomingRssMessages]
	WITH CHECK
	ADD CONSTRAINT [FK_tWeb_IncomingRssMessages_tWeb_RssSources]
	FOREIGN KEY ([SourceId]) REFERENCES [dbo].[tWeb_RssSources] ([id])
ALTER TABLE [dbo].[tWeb_IncomingRssMessages]
	CHECK CONSTRAINT [FK_tWeb_IncomingRssMessages_tWeb_RssSources]

GO


GO

-- Create Foreign Key FK_URightsToRole_URights On URightsToRole
Print 'Create Foreign Key FK_URightsToRole_URights On URightsToRole'
GO
ALTER TABLE [dbo].[URightsToRole]
	WITH NOCHECK
	ADD CONSTRAINT [FK_URightsToRole_URights]
	FOREIGN KEY ([URightID]) REFERENCES [dbo].[URights] ([URightID])
	ON DELETE CASCADE
	ON UPDATE CASCADE
	NOT FOR REPLICATION
ALTER TABLE [dbo].[URightsToRole]
	CHECK CONSTRAINT [FK_URightsToRole_URights]

GO


GO
-- Create Foreign Key FK_URightsToRole_URoles On URightsToRole
Print 'Create Foreign Key FK_URightsToRole_URoles On URightsToRole'
GO
ALTER TABLE [dbo].[URightsToRole]
	WITH NOCHECK
	ADD CONSTRAINT [FK_URightsToRole_URoles]
	FOREIGN KEY ([URoleID]) REFERENCES [dbo].[URoles] ([URoleID])
	ON DELETE CASCADE
	NOT FOR REPLICATION
ALTER TABLE [dbo].[URightsToRole]
	CHECK CONSTRAINT [FK_URightsToRole_URoles]

GO


GO

-- Create Foreign Key FK_FlagsToBlockTypes_BlockType On FlagsToBlockTypes
Print 'Create Foreign Key FK_FlagsToBlockTypes_BlockType On FlagsToBlockTypes'
GO
ALTER TABLE [dbo].[FlagsToBlockTypes]
	WITH NOCHECK
	ADD CONSTRAINT [FK_FlagsToBlockTypes_BlockType]
	FOREIGN KEY ([BlockTypeID]) REFERENCES [dbo].[BlockType] ([id])
	ON DELETE CASCADE
	NOT FOR REPLICATION
ALTER TABLE [dbo].[FlagsToBlockTypes]
	CHECK CONSTRAINT [FK_FlagsToBlockTypes_BlockType]

GO


GO
-- Create Foreign Key FK_FlagsToBlockTypes_Flags On FlagsToBlockTypes
Print 'Create Foreign Key FK_FlagsToBlockTypes_Flags On FlagsToBlockTypes'
GO
ALTER TABLE [dbo].[FlagsToBlockTypes]
	WITH NOCHECK
	ADD CONSTRAINT [FK_FlagsToBlockTypes_Flags]
	FOREIGN KEY ([FlagID]) REFERENCES [dbo].[Flags] ([id])
	ON DELETE CASCADE
	NOT FOR REPLICATION
ALTER TABLE [dbo].[FlagsToBlockTypes]
	CHECK CONSTRAINT [FK_FlagsToBlockTypes_Flags]

GO


GO

-- Create Foreign Key FK_News_Programs On News
Print 'Create Foreign Key FK_News_Programs On News'
GO
ALTER TABLE [dbo].[News]
	WITH NOCHECK
	ADD CONSTRAINT [FK_News_Programs]
	FOREIGN KEY ([ProgramId]) REFERENCES [dbo].[Programs] ([id])
	ON DELETE CASCADE
	NOT FOR REPLICATION
ALTER TABLE [dbo].[News]
	CHECK CONSTRAINT [FK_News_Programs]

GO


GO

-- Create Foreign Key FK_Blocks_CopyNews On Blocks
Print 'Create Foreign Key FK_Blocks_CopyNews On Blocks'
GO
ALTER TABLE [dbo].[Blocks]
	WITH NOCHECK
	ADD CONSTRAINT [FK_Blocks_CopyNews]
	FOREIGN KEY ([NewsId]) REFERENCES [dbo].[CopyNews] ([id])
	NOT FOR REPLICATION
ALTER TABLE [dbo].[Blocks]
	NOCHECK CONSTRAINT [FK_Blocks_CopyNews]

GO


GO
-- Create Foreign Key FK_Blocks_News On Blocks
Print 'Create Foreign Key FK_Blocks_News On Blocks'
GO
ALTER TABLE [dbo].[Blocks]
	WITH NOCHECK
	ADD CONSTRAINT [FK_Blocks_News]
	FOREIGN KEY ([NewsId]) REFERENCES [dbo].[News] ([id])
	NOT FOR REPLICATION
ALTER TABLE [dbo].[Blocks]
	NOCHECK CONSTRAINT [FK_Blocks_News]

GO


GO

-- COMMITTING TRANSACTION STRUCTURE
PRINT 'Committing transaction STRUCTURE'
IF @@TRANCOUNT>0
	COMMIT TRANSACTION _STRUCTURE_
GO

SET NOEXEC OFF
GO
-- Create Fulltext Index  On ArchBlocks
Print 'Create Fulltext Index  On ArchBlocks'
GO
CREATE FULLTEXT INDEX ON [dbo].[ArchBlocks]
	KEY INDEX [PK_ArchBlocks]
	ON (FILEGROUP [PRIMARY], [ArchiveCatalog])
	WITH CHANGE_TRACKING OFF, STOPLIST SYSTEM
GO
ALTER FULLTEXT INDEX ON [dbo].[ArchBlocks] DISABLE
GO
/*=============================================================
SCRIPT HEADER

VERSION:   1.01.0003
DATE:      05-28-2017 18:54:39
SERVER:    DENISSHEVCHB89A\SQLEXPRESS

DATABASE:	NewsFactory
	Tables:
		t_SynchTemplate, tMedia_Chunks, tMedia_EncoderTasks, tMedia_Files
		tMedia_Folders, tMedia_Thumbnails, tSocial_Feed, tSocial_feedToMessage
		tSocial_Message, tSocial_Type, tWeb_ArchiveBlockHistory, tWeb_BlockHistory
		tWeb_IncomingRssMessages, tWeb_MediaTask, tWeb_RssSources, tWeb_SavedStates
		tWeb_SessionGuid, tWeb_Settings, tWeb_TempLink


=============================================================*/
SET ANSI_WARNINGS ON
SET XACT_ABORT ON
SET ARITHABORT ON
SET NOCOUNT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
GO
-- BEGINNING TRANSACTION STRUCTURE
PRINT 'Beginning transaction STRUCTURE'
BEGIN TRANSACTION _STRUCTURE_
GO
-- Create Table [dbo].[t_SynchTemplate]
Print 'Create Table [dbo].[t_SynchTemplate]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[t_SynchTemplate] (
		[id]          [nvarchar](90) NOT NULL,
		[Name]        [nvarchar](max) NOT NULL,
		[Caption]     [nvarchar](max) NOT NULL,
		[Deleted]     [bit] NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[t_SynchTemplate]
	ADD
	CONSTRAINT [PK_t_SynchTemplate]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[t_SynchTemplate]
	ADD
	CONSTRAINT [DF_t_SynchTemplate_Deleted]
	DEFAULT ((0)) FOR [Deleted]
GO


GO
ALTER TABLE [dbo].[t_SynchTemplate] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[tMedia_Chunks]
Print 'Create Table [dbo].[tMedia_Chunks]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[tMedia_Chunks] (
		[id]             [bigint] IDENTITY(1, 1) NOT NULL,
		[BytesStart]     [bigint] NOT NULL,
		[BytesEnd]       [bigint] NOT NULL,
		[BytesWrite]     [bigint] NOT NULL,
		[FileGuid]       [nvarchar](255) NOT NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tMedia_Chunks]
	ADD
	CONSTRAINT [PK_tMedia_Chunks]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tMedia_Chunks]
	ADD
	CONSTRAINT [DF_tMedia_Chunks_BytesEnd]
	DEFAULT ((0)) FOR [BytesEnd]
GO


GO
ALTER TABLE [dbo].[tMedia_Chunks]
	ADD
	CONSTRAINT [DF_tMedia_Chunks_BytesStart]
	DEFAULT ((0)) FOR [BytesStart]
GO


GO
ALTER TABLE [dbo].[tMedia_Chunks]
	ADD
	CONSTRAINT [DF_tMedia_Chunks_BytesWrite]
	DEFAULT ((0)) FOR [BytesWrite]
GO


GO
ALTER TABLE [dbo].[tMedia_Chunks] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[tWeb_TempLink]
Print 'Create Table [dbo].[tWeb_TempLink]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[tWeb_TempLink] (
		[id]                 [int] IDENTITY(1, 1) NOT NULL,
		[BlockId]            [bigint] NOT NULL,
		[UserId]             [int] NOT NULL,
		[GrantDate]          [datetime] NOT NULL,
		[IsExpirience]       [bit] NOT NULL,
		[ExpirienceDate]     [date] NOT NULL,
		[Deleted]            [bit] NOT NULL,
		[URL]                [nvarchar](20) NOT NULL,
		[IsCommentable]      [bit] NOT NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tWeb_TempLink]
	ADD
	CONSTRAINT [PK_tWeb_TempLink]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tWeb_TempLink]
	ADD
	CONSTRAINT [DF__tWeb_Temp__IsCom__33F4B129]
	DEFAULT ((0)) FOR [IsCommentable]
GO


GO
ALTER TABLE [dbo].[tWeb_TempLink]
	ADD
	CONSTRAINT [DF_Table_1_GarntDate]
	DEFAULT (getdate()) FOR [GrantDate]
GO


GO
ALTER TABLE [dbo].[tWeb_TempLink]
	ADD
	CONSTRAINT [DF_tWeb_TempLink_Deleted]
	DEFAULT ((0)) FOR [Deleted]
GO


GO
ALTER TABLE [dbo].[tWeb_TempLink]
	ADD
	CONSTRAINT [DF_tWeb_TempLink_ExpirienceDate]
	DEFAULT (getdate()) FOR [ExpirienceDate]
GO


GO
ALTER TABLE [dbo].[tWeb_TempLink]
	ADD
	CONSTRAINT [DF_tWeb_TempLink_IsExpirience]
	DEFAULT ((1)) FOR [IsExpirience]
GO


GO
ALTER TABLE [dbo].[tWeb_TempLink]
	ADD
	CONSTRAINT [DF_tWeb_TempLink_URL]
	DEFAULT ('') FOR [URL]
GO


GO
ALTER TABLE [dbo].[tWeb_TempLink] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[tWeb_Settings]
Print 'Create Table [dbo].[tWeb_Settings]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[tWeb_Settings] (
		[id]              [int] IDENTITY(1, 1) NOT NULL,
		[Key]             [nvarchar](254) NOT NULL,
		[value]           [nvarchar](254) NOT NULL,
		[Description]     [nvarchar](254) NOT NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tWeb_Settings]
	ADD
	CONSTRAINT [PK_tWeb_Settings]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tWeb_Settings]
	ADD
	CONSTRAINT [DF_tWeb_Settings_Description]
	DEFAULT ('') FOR [Description]
GO


GO
ALTER TABLE [dbo].[tWeb_Settings] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[tWeb_SessionGuid]
Print 'Create Table [dbo].[tWeb_SessionGuid]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING OFF
GO


GO
CREATE TABLE [dbo].[tWeb_SessionGuid] (
		[id]           [bigint] IDENTITY(1, 1) NOT NULL,
		[UserId]       [int] NOT NULL,
		[Cookie]       [int] NOT NULL,
		[LastTime]     [datetime] NOT NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tWeb_SessionGuid]
	ADD
	CONSTRAINT [PK_tWeb_SessionGuid]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tWeb_SessionGuid]
	ADD
	CONSTRAINT [DF_tWeb_SessionGuid_LastTime]
	DEFAULT (getdate()) FOR [LastTime]
GO


GO
ALTER TABLE [dbo].[tWeb_SessionGuid] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[tWeb_SavedStates]
Print 'Create Table [dbo].[tWeb_SavedStates]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[tWeb_SavedStates] (
		[id]              [int] IDENTITY(1, 1) NOT NULL,
		[Data]            [image] NULL,
		[Descriotion]     [nvarchar](255) NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tWeb_SavedStates]
	ADD
	CONSTRAINT [PK_tWeb_SavedStates]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tWeb_SavedStates] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[tWeb_RssSources]
Print 'Create Table [dbo].[tWeb_RssSources]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[tWeb_RssSources] (
		[id]              [int] IDENTITY(1, 1) NOT NULL,
		[Name]            [nvarchar](255) NOT NULL,
		[URL]             [nvarchar](255) NULL,
		[Active]          [bit] NOT NULL,
		[LastGetTime]     [datetime] NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tWeb_RssSources]
	ADD
	CONSTRAINT [PK_tWeb_RssSources]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tWeb_RssSources]
	ADD
	CONSTRAINT [DF_tWeb_RssSources_Active]
	DEFAULT ((1)) FOR [Active]
GO


GO
ALTER TABLE [dbo].[tWeb_RssSources]
	ADD
	CONSTRAINT [DF_tWeb_RssSources_Name]
	DEFAULT ('') FOR [Name]
GO


GO
ALTER TABLE [dbo].[tWeb_RssSources] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[tWeb_MediaTask]
Print 'Create Table [dbo].[tWeb_MediaTask]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[tWeb_MediaTask] (
		[id]                  [int] IDENTITY(1, 1) NOT NULL,
		[MediaId]             [bigint] NOT NULL,
		[DateAdd]             [datetime] NULL,
		[DateAddComplite]     [datetime] NULL,
		[LRVStatus]           [int] NOT NULL,
		[LRVCount]            [int] NOT NULL,
		[LRVMessage]          [nvarchar](255) NOT NULL,
		[LRVLastDate]         [datetime] NOT NULL,
		[PICStatus]           [int] NOT NULL,
		[PICCount]            [int] NOT NULL,
		[PICMessage]          [nvarchar](255) NOT NULL,
		[PICLastDate]         [datetime] NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tWeb_MediaTask]
	ADD
	CONSTRAINT [DF_tWeb_MediaTask_DateAdd]
	DEFAULT (getdate()) FOR [DateAdd]
GO


GO
ALTER TABLE [dbo].[tWeb_MediaTask]
	ADD
	CONSTRAINT [DF_tWeb_MediaTask_LRVCount]
	DEFAULT ((0)) FOR [LRVCount]
GO


GO
ALTER TABLE [dbo].[tWeb_MediaTask]
	ADD
	CONSTRAINT [DF_tWeb_MediaTask_LRVLastDate]
	DEFAULT (getdate()) FOR [LRVLastDate]
GO


GO
ALTER TABLE [dbo].[tWeb_MediaTask]
	ADD
	CONSTRAINT [DF_tWeb_MediaTask_LRVMessage]
	DEFAULT ('') FOR [LRVMessage]
GO


GO
ALTER TABLE [dbo].[tWeb_MediaTask]
	ADD
	CONSTRAINT [DF_tWeb_MediaTask_LRVSatus]
	DEFAULT ((0)) FOR [LRVStatus]
GO


GO
ALTER TABLE [dbo].[tWeb_MediaTask]
	ADD
	CONSTRAINT [DF_tWeb_MediaTask_PICCount]
	DEFAULT ((0)) FOR [PICCount]
GO


GO
ALTER TABLE [dbo].[tWeb_MediaTask]
	ADD
	CONSTRAINT [DF_tWeb_MediaTask_PICLastDate]
	DEFAULT (getdate()) FOR [PICLastDate]
GO


GO
ALTER TABLE [dbo].[tWeb_MediaTask]
	ADD
	CONSTRAINT [DF_tWeb_MediaTask_PICMessage]
	DEFAULT ('') FOR [PICMessage]
GO


GO
ALTER TABLE [dbo].[tWeb_MediaTask]
	ADD
	CONSTRAINT [DF_tWeb_MediaTask_PICStatus]
	DEFAULT ((0)) FOR [PICStatus]
GO


GO
ALTER TABLE [dbo].[tWeb_MediaTask] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[tWeb_BlockHistory]
Print 'Create Table [dbo].[tWeb_BlockHistory]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[tWeb_BlockHistory] (
		[id]               [nvarchar](90) NOT NULL,
		[date]             [datetime] NOT NULL,
		[userId]           [int] NOT NULL,
		[blockZipText]     [image] NOT NULL,
		[blockId]          [bigint] NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tWeb_BlockHistory]
	ADD
	CONSTRAINT [PK_tWeb_BlockHistory]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tWeb_BlockHistory] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[tWeb_ArchiveBlockHistory]
Print 'Create Table [dbo].[tWeb_ArchiveBlockHistory]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[tWeb_ArchiveBlockHistory] (
		[id]               [nvarchar](90) NOT NULL,
		[date]             [datetime] NOT NULL,
		[userId]           [int] NOT NULL,
		[blockZipText]     [image] NOT NULL,
		[blockId]          [bigint] NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tWeb_ArchiveBlockHistory]
	ADD
	CONSTRAINT [PK_tWeb_ArchiveBlockHistory]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tWeb_ArchiveBlockHistory] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[tSocial_Type]
Print 'Create Table [dbo].[tSocial_Type]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[tSocial_Type] (
		[id]              [nvarchar](90) NOT NULL,
		[title]           [nvarchar](max) NOT NULL,
		[deleted]         [bit] NOT NULL,
		[isTitle]         [bit] NOT NULL,
		[isLid]           [bit] NOT NULL,
		[isText]          [bit] NOT NULL,
		[isVideo]         [bit] NOT NULL,
		[isPhoto]         [bit] NOT NULL,
		[img]             [nvarchar](max) NOT NULL,
		[linkPrefix]      [nvarchar](max) NOT NULL,
		[linkPostfix]     [nvarchar](max) NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tSocial_Type]
	ADD
	CONSTRAINT [PK_t_socialType]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tSocial_Type]
	ADD
	CONSTRAINT [DF_t_socialType_deleted]
	DEFAULT ((0)) FOR [deleted]
GO


GO
ALTER TABLE [dbo].[tSocial_Type]
	ADD
	CONSTRAINT [DF_t_socialType_isLid]
	DEFAULT ((1)) FOR [isLid]
GO


GO
ALTER TABLE [dbo].[tSocial_Type]
	ADD
	CONSTRAINT [DF_t_socialType_isPhoto]
	DEFAULT ((1)) FOR [isPhoto]
GO


GO
ALTER TABLE [dbo].[tSocial_Type]
	ADD
	CONSTRAINT [DF_t_socialType_isText]
	DEFAULT ((1)) FOR [isText]
GO


GO
ALTER TABLE [dbo].[tSocial_Type]
	ADD
	CONSTRAINT [DF_t_socialType_isTitle]
	DEFAULT ((1)) FOR [isTitle]
GO


GO
ALTER TABLE [dbo].[tSocial_Type]
	ADD
	CONSTRAINT [DF_t_socialType_isVideo]
	DEFAULT ((1)) FOR [isVideo]
GO


GO
ALTER TABLE [dbo].[tSocial_Type]
	ADD
	CONSTRAINT [DF_tSocial_Type_img]
	DEFAULT ('') FOR [img]
GO


GO
ALTER TABLE [dbo].[tSocial_Type]
	ADD
	CONSTRAINT [DF_tSocial_Type_linkPostfix]
	DEFAULT ('') FOR [linkPostfix]
GO


GO
ALTER TABLE [dbo].[tSocial_Type]
	ADD
	CONSTRAINT [DF_tSocial_Type_linkPrefix]
	DEFAULT ('') FOR [linkPrefix]
GO


GO
ALTER TABLE [dbo].[tSocial_Type] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[tSocial_Message]
Print 'Create Table [dbo].[tSocial_Message]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[tSocial_Message] (
		[id]             [nvarchar](90) NOT NULL,
		[blockId]        [bigint] NOT NULL,
		[title]          [nvarchar](max) NOT NULL,
		[subtitle]       [nvarchar](max) NOT NULL,
		[message]        [ntext] NOT NULL,
		[updateTime]     [datetime] NOT NULL,
		[mediaId]        [bigint] NOT NULL,
		[mediaType]      [int] NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tSocial_Message]
	ADD
	CONSTRAINT [PK_tSocial_Message]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tSocial_Message]
	ADD
	CONSTRAINT [DF_tSocial_Message_mediaType]
	DEFAULT ((1)) FOR [mediaType]
GO


GO
ALTER TABLE [dbo].[tSocial_Message] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[tMedia_Thumbnails]
Print 'Create Table [dbo].[tMedia_Thumbnails]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[tMedia_Thumbnails] (
		[id]           [int] IDENTITY(1, 1) NOT NULL,
		[DateAdd]      [datetime] NOT NULL,
		[Number]       [int] NOT NULL,
		[image]        [image] NOT NULL,
		[FileGuid]     [nvarchar](255) NOT NULL,
		[size640]      [image] NULL,
		[size32]       [image] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tMedia_Thumbnails]
	ADD
	CONSTRAINT [PK_tMedia_Thumbnails]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tMedia_Thumbnails]
	ADD
	CONSTRAINT [DF_tMedia_Thumbnails_DateAdd]
	DEFAULT (getdate()) FOR [DateAdd]
GO


GO
ALTER TABLE [dbo].[tMedia_Thumbnails]
	ADD
	CONSTRAINT [DF_tMedia_Thumbnails_Timecode]
	DEFAULT ((0)) FOR [Number]
GO


GO
ALTER TABLE [dbo].[tMedia_Thumbnails] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[tMedia_Folders]
Print 'Create Table [dbo].[tMedia_Folders]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[tMedia_Folders] (
		[id]              [bigint] IDENTITY(1, 1) NOT NULL,
		[sFolderName]     [nvarchar](255) NOT NULL,
		[FolderGuid]      [nvarchar](255) NOT NULL,
		[Ready]           [bit] NOT NULL,
		[sPath]           [nvarchar](255) NOT NULL,
		[iFilesCount]     [int] NOT NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tMedia_Folders]
	ADD
	CONSTRAINT [PK_tMedia_Folders]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tMedia_Folders]
	ADD
	CONSTRAINT [DF_tMedia_Folders_bReady]
	DEFAULT ((0)) FOR [Ready]
GO


GO
ALTER TABLE [dbo].[tMedia_Folders]
	ADD
	CONSTRAINT [DF_tMedia_Folders_iFilesCount]
	DEFAULT ((0)) FOR [iFilesCount]
GO


GO
ALTER TABLE [dbo].[tMedia_Folders]
	ADD
	CONSTRAINT [DF_tMedia_Folders_sFolderName]
	DEFAULT ('') FOR [sFolderName]
GO


GO
ALTER TABLE [dbo].[tMedia_Folders]
	ADD
	CONSTRAINT [DF_tMedia_Folders_sPath]
	DEFAULT ('') FOR [sPath]
GO


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_tMedia_Folders]
	ON [dbo].[tMedia_Folders] ([FolderGuid])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tMedia_Folders] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[tMedia_Files]
Print 'Create Table [dbo].[tMedia_Files]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[tMedia_Files] (
		[id]                    [bigint] IDENTITY(1, 1) NOT NULL,
		[FileGuid]              [nvarchar](255) NULL,
		[FolderGuid]            [nvarchar](255) NOT NULL,
		[FileName]              [nvarchar](255) NULL,
		[Ready]                 [bit] NULL,
		[NumberInFolder]        [int] NULL,
		[Size]                  [bigint] NULL,
		[BytesWrite]            [bigint] NOT NULL,
		[sSourceIp]             [nvarchar](255) NULL,
		[StartDate]             [datetime] NULL,
		[EndDate]               [datetime] NULL,
		[BlockType]             [int] NULL,
		[LRVFileName]           [nvarchar](255) NULL,
		[LRVPath]               [nvarchar](255) NULL,
		[LRVReady]              [bit] NOT NULL,
		[LRVDateLastUpdate]     [datetime] NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tMedia_Files]
	ADD
	CONSTRAINT [PK_tMedia_Files]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tMedia_Files]
	ADD
	CONSTRAINT [DF_tMedia_Files_BytesWrite]
	DEFAULT ((0)) FOR [BytesWrite]
GO


GO
ALTER TABLE [dbo].[tMedia_Files]
	ADD
	CONSTRAINT [DF_tMedia_Files_LRVReady]
	DEFAULT ((0)) FOR [LRVReady]
GO


GO
ALTER TABLE [dbo].[tMedia_Files]
	ADD
	CONSTRAINT [DF_tMedia_Files_Ready]
	DEFAULT ((0)) FOR [Ready]
GO


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_tMedia_Files]
	ON [dbo].[tMedia_Files] ([FileGuid])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tMedia_Files] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[tMedia_EncoderTasks]
Print 'Create Table [dbo].[tMedia_EncoderTasks]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[tMedia_EncoderTasks] (
		[id]                [bigint] IDENTITY(1, 1) NOT NULL,
		[FileGuid]          [nvarchar](255) NOT NULL,
		[EncoderGuid]       [nvarchar](255) NULL,
		[DateAdd]           [datetime] NOT NULL,
		[DateLastStart]     [datetime] NULL,
		[DateLastEnd]       [datetime] NULL,
		[IsActive]          [bit] NOT NULL,
		[ErrorCount]        [int] NOT NULL,
		[IsComplite]        [bit] NOT NULL
) ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tMedia_EncoderTasks]
	ADD
	CONSTRAINT [PK_tMedia_EncoderTasks]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tMedia_EncoderTasks]
	ADD
	CONSTRAINT [DF_tMedia_EncoderTasks_DateAdd]
	DEFAULT (getdate()) FOR [DateAdd]
GO


GO
ALTER TABLE [dbo].[tMedia_EncoderTasks]
	ADD
	CONSTRAINT [DF_tMedia_EncoderTasks_ErrorCount]
	DEFAULT ((0)) FOR [ErrorCount]
GO


GO
ALTER TABLE [dbo].[tMedia_EncoderTasks]
	ADD
	CONSTRAINT [DF_tMedia_EncoderTasks_IsActive]
	DEFAULT ((0)) FOR [IsActive]
GO


GO
ALTER TABLE [dbo].[tMedia_EncoderTasks]
	ADD
	CONSTRAINT [DF_tMedia_EncoderTasks_IsComplite]
	DEFAULT ((0)) FOR [IsComplite]
GO


GO
ALTER TABLE [dbo].[tMedia_EncoderTasks] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[tWeb_IncomingRssMessages]
Print 'Create Table [dbo].[tWeb_IncomingRssMessages]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[tWeb_IncomingRssMessages] (
		[id]              [int] IDENTITY(1, 1) NOT NULL,
		[exsternalId]     [bigint] NULL,
		[Name]            [nvarchar](255) NULL,
		[Lid]             [ntext] NULL,
		[Date]            [datetime] NULL,
		[SourceId]        [int] NOT NULL,
		[Link]            [nvarchar](255) NULL,
		[ImgLink]         [nvarchar](255) NULL,
		[GUID]            [nvarchar](255) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tWeb_IncomingRssMessages]
	ADD
	CONSTRAINT [PK_tWeb_IncomingRssMessages]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tWeb_IncomingRssMessages]
	ADD
	CONSTRAINT [DF_tWeb_IncomingRssMessages_Date]
	DEFAULT (getdate()) FOR [Date]
GO


GO
ALTER TABLE [dbo].[tWeb_IncomingRssMessages]
	ADD
	CONSTRAINT [DF_tWeb_IncomingRssMessages_exsternalId]
	DEFAULT ('') FOR [exsternalId]
GO


GO
ALTER TABLE [dbo].[tWeb_IncomingRssMessages]
	ADD
	CONSTRAINT [DF_tWeb_IncomingRssMessages_ImgLink]
	DEFAULT ('') FOR [ImgLink]
GO


GO
ALTER TABLE [dbo].[tWeb_IncomingRssMessages]
	ADD
	CONSTRAINT [DF_tWeb_IncomingRssMessages_Lid]
	DEFAULT ('') FOR [Lid]
GO


GO
ALTER TABLE [dbo].[tWeb_IncomingRssMessages]
	ADD
	CONSTRAINT [DF_tWeb_IncomingRssMessages_Link]
	DEFAULT ('') FOR [Link]
GO


GO
ALTER TABLE [dbo].[tWeb_IncomingRssMessages]
	ADD
	CONSTRAINT [DF_tWeb_IncomingRssMessages_Name]
	DEFAULT ('') FOR [Name]
GO


GO
ALTER TABLE [dbo].[tWeb_IncomingRssMessages]
	ADD
	CONSTRAINT [DF_tWeb_IncomingRssMessages_Source]
	DEFAULT ('') FOR [SourceId]
GO


GO
ALTER TABLE [dbo].[tWeb_IncomingRssMessages] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[tSocial_Feed]
Print 'Create Table [dbo].[tSocial_Feed]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[tSocial_Feed] (
		[id]          [nvarchar](90) NOT NULL,
		[typeId]      [nvarchar](90) NOT NULL,
		[title]       [nvarchar](max) NOT NULL,
		[authKey]     [nvarchar](max) NOT NULL,
		[deleted]     [bit] NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tSocial_Feed]
	ADD
	CONSTRAINT [PK_tSocial_Feed]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tSocial_Feed]
	ADD
	CONSTRAINT [DF_t_socialFeed_deleted]
	DEFAULT ((0)) FOR [deleted]
GO


GO
ALTER TABLE [dbo].[tSocial_Feed] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Table [dbo].[tSocial_feedToMessage]
Print 'Create Table [dbo].[tSocial_feedToMessage]'
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
GO


GO
CREATE TABLE [dbo].[tSocial_feedToMessage] (
		[id]                   [nvarchar](90) NOT NULL,
		[feedId]               [nvarchar](90) NOT NULL,
		[socialMessId]         [nvarchar](90) NOT NULL,
		[insertDate]           [datetime] NOT NULL,
		[updateStatusDate]     [datetime] NOT NULL,
		[status]               [int] NOT NULL,
		[message]              [ntext] NOT NULL,
		[publishCount]         [int] NOT NULL,
		[socialId]             [nvarchar](max) NOT NULL,
		[socialError]          [nvarchar](max) NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tSocial_feedToMessage]
	ADD
	CONSTRAINT [PK_tSocial_feedToMessage]
	PRIMARY KEY
	CLUSTERED
	([id])
	ON [PRIMARY]
GO


GO
ALTER TABLE [dbo].[tSocial_feedToMessage]
	ADD
	CONSTRAINT [DF_tSocial_feedToMessage_publishCount]
	DEFAULT ((0)) FOR [publishCount]
GO


GO
ALTER TABLE [dbo].[tSocial_feedToMessage]
	ADD
	CONSTRAINT [DF_tSocial_feedToMessage_socialError]
	DEFAULT ('') FOR [socialError]
GO


GO
ALTER TABLE [dbo].[tSocial_feedToMessage]
	ADD
	CONSTRAINT [DF_tSocial_feedToMessage_socialId]
	DEFAULT ('') FOR [socialId]
GO


GO
ALTER TABLE [dbo].[tSocial_feedToMessage] SET (LOCK_ESCALATION = TABLE)
GO


GO

-- Create Foreign Key FK_tWeb_IncomingRssMessages_tWeb_RssSources On tWeb_IncomingRssMessages
Print 'Create Foreign Key FK_tWeb_IncomingRssMessages_tWeb_RssSources On tWeb_IncomingRssMessages'
GO
ALTER TABLE [dbo].[tWeb_IncomingRssMessages]
	WITH CHECK
	ADD CONSTRAINT [FK_tWeb_IncomingRssMessages_tWeb_RssSources]
	FOREIGN KEY ([SourceId]) REFERENCES [dbo].[tWeb_RssSources] ([id])
ALTER TABLE [dbo].[tWeb_IncomingRssMessages]
	CHECK CONSTRAINT [FK_tWeb_IncomingRssMessages_tWeb_RssSources]

GO


GO

-- Create Foreign Key FK_tSocial_Feed_tSocial_Type On tSocial_Feed
Print 'Create Foreign Key FK_tSocial_Feed_tSocial_Type On tSocial_Feed'
GO
ALTER TABLE [dbo].[tSocial_Feed]
	WITH CHECK
	ADD CONSTRAINT [FK_tSocial_Feed_tSocial_Type]
	FOREIGN KEY ([typeId]) REFERENCES [dbo].[tSocial_Type] ([id])
ALTER TABLE [dbo].[tSocial_Feed]
	CHECK CONSTRAINT [FK_tSocial_Feed_tSocial_Type]

GO


GO

-- Create Foreign Key FK_tSocial_feedToMessage_tSocial_Feed On tSocial_feedToMessage
Print 'Create Foreign Key FK_tSocial_feedToMessage_tSocial_Feed On tSocial_feedToMessage'
GO
ALTER TABLE [dbo].[tSocial_feedToMessage]
	WITH CHECK
	ADD CONSTRAINT [FK_tSocial_feedToMessage_tSocial_Feed]
	FOREIGN KEY ([feedId]) REFERENCES [dbo].[tSocial_Feed] ([id])
ALTER TABLE [dbo].[tSocial_feedToMessage]
	CHECK CONSTRAINT [FK_tSocial_feedToMessage_tSocial_Feed]

GO


GO
-- Create Foreign Key FK_tSocial_feedToMessage_tSocial_Message On tSocial_feedToMessage
Print 'Create Foreign Key FK_tSocial_feedToMessage_tSocial_Message On tSocial_feedToMessage'
GO
ALTER TABLE [dbo].[tSocial_feedToMessage]
	WITH CHECK
	ADD CONSTRAINT [FK_tSocial_feedToMessage_tSocial_Message]
	FOREIGN KEY ([socialMessId]) REFERENCES [dbo].[tSocial_Message] ([id])
ALTER TABLE [dbo].[tSocial_feedToMessage]
	CHECK CONSTRAINT [FK_tSocial_feedToMessage_tSocial_Message]

GO


GO

-- COMMITTING TRANSACTION STRUCTURE
PRINT 'Committing transaction STRUCTURE'
IF @@TRANCOUNT>0
	COMMIT TRANSACTION _STRUCTURE_
GO

SET NOEXEC OFF
GO
